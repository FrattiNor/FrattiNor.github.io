<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CommonJS学习</title>
      <link href="/2018/04/24/2018_4_24_2_CommonJS%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/04/24/2018_4_24_2_CommonJS%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>今天学习了webpack的使用，虽然一知半解，但也还算有所收获，同时了解到webpack是以commonjs的形式来书写脚本的，然后node应用也采用commonjs模块规范，所以就来学习一下commonjs</p><p>1.概述<br>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。<br>如果想在多个文件分享变量，必须定义为global对象的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.warning = true;</span><br></pre></td></tr></table></figure></p><p>上面代码的warning变量，可以被所有文件读取。当然，这样写法是不推荐的。</p><p>CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = 5;</span><br><span class="line">module.exports.x = x;</span><br></pre></td></tr></table></figure></p><p>上面代码通过module.exports输出变量x<br>require方法用于加载模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var example = require(&apos;./example.js&apos;);</span><br><span class="line">console.log(example.x); // 5</span><br></pre></td></tr></table></figure></p><p>CommonJS模块的特点如下:</p><blockquote><p>所有代码都运行在模块作用域，不会污染全局作用域。</p></blockquote><p>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</p><blockquote></blockquote><p>模块加载的顺序，按照其在代码中出现的顺序。</p><p>2.module对象<br>Node内部提供一个Module构建函数，所有模块都是Module的实例<br>每个模块内部，都有一个Module对象，代表当前模块，有以下属性：</p><blockquote><p>module.id 模块的识别符，通常是带有绝对路径的模块文件名。<br>module.filename 模块的文件名，带有绝对路径。<br>module.loaded 返回一个布尔值，表示模块是否已经完成加载。<br>module.parent 返回一个对象，表示调用该模块的模块。<br>module.children 返回一个数组，表示该模块要用到的其他模块。<br>module.exports 表示模块对外输出的值。</p></blockquote><p>下面是一个示例文件，最后一行输出module变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// example.js</span><br><span class="line">var jquery = require(&apos;jquery&apos;);</span><br><span class="line">exports.$ = jquery;</span><br><span class="line">console.log(module);</span><br></pre></td></tr></table></figure></p><p>执行这个文件，命令行会输出如下信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123; id: &apos;.&apos;,</span><br><span class="line">  exports: &#123; &apos;$&apos;: [Function] &#125;,</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: &apos;/path/to/example.js&apos;,</span><br><span class="line">  loaded: false,</span><br><span class="line">  children:</span><br><span class="line">   [ &#123; id: &apos;/path/to/node_modules/jquery/dist/jquery.js&apos;,</span><br><span class="line">       exports: [Function],</span><br><span class="line">       parent: [Circular],</span><br><span class="line">       filename: &apos;/path/to/node_modules/jquery/dist/jquery.js&apos;,</span><br><span class="line">       loaded: true,</span><br><span class="line">       children: [],</span><br><span class="line">       paths: [Object] &#125; ],</span><br><span class="line">  paths:</span><br><span class="line">   [ &apos;/home/user/deleted/node_modules&apos;,</span><br><span class="line">     &apos;/home/user/node_modules&apos;,</span><br><span class="line">     &apos;/home/node_modules&apos;,</span><br><span class="line">     &apos;/node_modules&apos; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果在命令行下调用某个模块，比如node something.js，那么module.parent就是null。如果是在脚本之中调用，比如require(‘./something.js’)，那么module.parent就是调用它的模块。利用这一点，可以判断当前模块是否为入口脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (!module.parent) &#123;</span><br><span class="line">    // ran with `node something.js`</span><br><span class="line">    app.listen(8088, function() &#123;</span><br><span class="line">        console.log(&apos;app listening on port 8088&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // used with `require(&apos;/.something.js&apos;)`</span><br><span class="line">    module.exports = app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.1 module.exports属性<br>module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter;</span><br><span class="line">module.exports = new EventEmitter();</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  module.exports.emit(&apos;ready&apos;);</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure></p><p>上面模块会在加载后1秒后，发出ready事件。其他文件监听该事件，可以写成下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&apos;./a&apos;);</span><br><span class="line">a.on(&apos;ready&apos;, function() &#123;</span><br><span class="line">  console.log(&apos;module a is ready&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.2 exports变量<br>为了方便，Node为每个模块提供一个exports变量，指向module.exports。<br>造成的结果是，在对外输出模块接口时，可以向exports对象添加方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.area = function (r) &#123;</span><br><span class="line">  return Math.PI * r * r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.hello = function() &#123;</span><br><span class="line">  return &apos;hello&apos;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = &apos;Hello world&apos;;</span><br></pre></td></tr></table></figure></p><p>上面代码中，hello函数是无法对外输出的，因为module.exports被重新赋值了。</p><p>这意味着，如果一个模块的对外接口，就是一个单一的值，不能使用exports输出，只能使用module.exports输出。</p><p>如果你觉得，exports与module.exports之间的区别很难分清，一个简单的处理方法，就是放弃使用exports，只使用module.exports。</p><p>3.AMD规范与CommonJS规范的兼容性<br>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p><blockquote><p>amd规范还没看过，再说吧</p></blockquote><p>AMD规范使用define方法定义模块<br>AMD规范允许输出的模块兼容CommonJS规范，这时define方法需要写成下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define(function (require, exports, module)&#123;</span><br><span class="line">  var someModule = require(&quot;someModule&quot;);</span><br><span class="line">  var anotherModule = require(&quot;anotherModule&quot;);</span><br><span class="line"></span><br><span class="line">  someModule.doTehAwesome();</span><br><span class="line">  anotherModule.doMoarAwesome();</span><br><span class="line"></span><br><span class="line">  exports.asplode = function ()&#123;</span><br><span class="line">    someModule.doTehAwesome();</span><br><span class="line">    anotherModule.doMoarAwesome();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4.require命令<br>4.1 基本用法<br>Node使用CommonJS模块规范，内置的require命令用于加载模块文件。<br>require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。<br>如果模块输出的是一个函数，那就不能定义在exports对象上面，而要定义在module.exports变量上面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//example2.js</span><br><span class="line">module.exports = function () &#123;</span><br><span class="line">  console.log(&quot;hello world&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">require(&apos;./example2.js&apos;)()</span><br></pre></td></tr></table></figure></p><p>上面代码中，require命令调用自身，等于是执行module.exports，因此会输出 hello world。</p><p>4.2 加载规则<br>require命令用于加载文件，后缀名默认为.js。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = require(&apos;foo&apos;);</span><br><span class="line">//  等同于</span><br><span class="line">var foo = require(&apos;foo.js&apos;);</span><br></pre></td></tr></table></figure></p><p>根据参数的不同格式，require命令去不同路径寻找模块文件。</p><blockquote><p>1）如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文件。比如，require(‘/home/marco/foo.js’)将加载/home/marco/foo.js。</p></blockquote><p>（2）如果参数字符串以“./”开头，则表示加载的是一个位于相对路径（跟当前执行脚本的位置相比）的模块文件。比如，require(‘./circle’)将加载当前脚本同一目录的circle.js。</p><blockquote></blockquote><p>（3）如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块（位于Node的系统安装目录中），或者一个位于各级node_modules目录的已安装模块（全局安装或局部安装）。<br>举例来说，脚本/home/user/projects/foo.js执行了require(‘bar.js’)命令，Node会依次搜索以下文件。</p><blockquote><blockquote><p>/usr/local/lib/node/bar.js<br>/home/user/projects/node_modules/bar.js<br>/home/user/node_modules/bar.js<br>/home/node_modules/bar.js<br>/node_modules/bar.js</p></blockquote></blockquote><p>（4）如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require(‘example-module/path/to/file’)，则将先找到example-module的位置，然后再以它为参数，找到后续路径。</p><blockquote></blockquote><p>（5）如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索。.js件会以文本格式的JavaScript脚本文件解析，.json文件会以JSON格式的文本文件解析，.node文件会以编译后的二进制文件解析。</p><blockquote></blockquote><p>（6）如果想得到require命令加载的确切文件名，使用require.resolve()方法。</p><p>4.3 目录的加载规则<br>通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录。</p><p>在目录中放置一个package.json文件，并且将入口文件写入main字段。下面是一个例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123; &quot;name&quot; : &quot;some-library&quot;,</span><br><span class="line">  &quot;main&quot; : &quot;./lib/some-library.js&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>require发现参数字符串指向一个目录以后，会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件。</p><p>4,4 模块的缓存<br>第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性。<br>如果想要多次执行某个模块，可以让该模块输出一个函数，然后每次require这个模块的时候，重新执行一下输出的函数。<br>所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 删除指定模块的缓存</span><br><span class="line">delete require.cache[moduleName];</span><br><span class="line"></span><br><span class="line">// 删除所有模块的缓存</span><br><span class="line">Object.keys(require.cache).forEach(function(key) &#123;</span><br><span class="line">  delete require.cache[key];</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>注意，缓存是根据绝对路径识别模块的，如果同样的模块名，但是保存在不同的路径，require命令还是会重新加载该模块。</strong></p><p>4.5 环境变量NODE_PATH<br>Node执行一个脚本时，会先查看环境变量NODE_PATH。它是一组以冒号分隔的绝对路径。在其他位置找不到指定模块时，Node会去这些路径查找。</p><p>可以将NODE_PATH添加到.bashrc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NODE_PATH=&quot;/usr/local/lib/node&quot;</span><br></pre></td></tr></table></figure></p><p>所以，如果遇到复杂的相对路径，比如下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myModule = require(&apos;../../../../lib/myModule&apos;);</span><br></pre></td></tr></table></figure></p><p>有两种解决方法，一是将该文件加入node_modules目录，二是修改NODE_PATH环境变量，package.json文件可以采用下面的写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;node_path&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;NODE_PATH=lib node index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>NODE_PATH是历史遗留下来的一个路径解决方案，通常不应该使用，而应该使用node_modules目录机制。</p><p>4.6 模块的循环加载<br>如果发生模块的循环加载，即A加载B，B又加载A，则B将加载A的不完整版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// a.js</span><br><span class="line">exports.x = &apos;a1&apos;;</span><br><span class="line">console.log(&apos;a.js &apos;, require(&apos;./b.js&apos;).x);</span><br><span class="line">exports.x = &apos;a2&apos;;</span><br><span class="line"></span><br><span class="line">// b.js</span><br><span class="line">exports.x = &apos;b1&apos;;</span><br><span class="line">console.log(&apos;b.js &apos;, require(&apos;./a.js&apos;).x);</span><br><span class="line">exports.x = &apos;b2&apos;;</span><br><span class="line"></span><br><span class="line">// main.js</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x);</span><br></pre></td></tr></table></figure></p><p>上面代码是三个JavaScript文件。其中，a.js加载了b.js，而b.js又加载a.js。这时，Node返回a.js的不完整版本，所以执行结果如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">b.js  a1</span><br><span class="line">a.js  b2</span><br><span class="line">main.js  a2</span><br><span class="line">main.js  b2</span><br></pre></td></tr></table></figure></p><p>修改main.js，再次加载a.js和b.js。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x);</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);</span><br><span class="line">console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x);</span><br></pre></td></tr></table></figure></p><p>执行上面代码，结果如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">b.js  a1</span><br><span class="line">a.js  b2</span><br><span class="line">main.js  a2</span><br><span class="line">main.js  b2</span><br><span class="line">main.js  a2</span><br><span class="line">main.js  b2</span><br></pre></td></tr></table></figure></p><p>上面代码中，第二次加载a.js和b.js时，会直接从缓存读取exports属性，所以a.js和b.js内部的console.log语句都不会执行了。</p><p>4.7 require.main</p><p>require方法有一个main属性，可以用来判断模块是直接执行，还是被调用执行。</p><p>直接执行的时候（node module.js），require.main属性指向模块本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require.main === module</span><br><span class="line">// true</span><br></pre></td></tr></table></figure></p><p>调用执行的时候（通过require加载该脚本执行），上面的表达式返回false。</p><p>5.模块的加载机制<br>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个例子。</p><p>下面是一个模块文件lib.js。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// lib.js</span><br><span class="line">var counter = 3;</span><br><span class="line">function incCounter() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码输出内部变量counter和改写这个变量的内部方法incCounter。</p><p>然后，加载上面的模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">var counter = require(&apos;./lib&apos;).counter;</span><br><span class="line">var incCounter = require(&apos;./lib&apos;).incCounter;</span><br><span class="line"></span><br><span class="line">console.log(counter);  // 3</span><br><span class="line">incCounter();</span><br><span class="line">console.log(counter); // 3</span><br></pre></td></tr></table></figure></p><p>上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。</p><p>5.1 require的内部处理流程<br>require命令是CommonJS规范之中，用来加载其他模块的命令。它其实不是一个全局命令，而是指向当前模块的module.require命令，而后者又调用Node的内部命令Module._load。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Module._load = function(request, parent, isMain) &#123;</span><br><span class="line">  // 1. 检查 Module._cache，是否缓存之中有指定模块</span><br><span class="line">  // 2. 如果缓存之中没有，就创建一个新的Module实例</span><br><span class="line">  // 3. 将它保存到缓存</span><br><span class="line">  // 4. 使用 module.load() 加载指定的模块文件，</span><br><span class="line">  //    读取文件内容之后，使用 module.compile() 执行文件代码</span><br><span class="line">  // 5. 如果加载/解析过程报错，就从缓存删除该模块</span><br><span class="line">  // 6. 返回该模块的 module.exports</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的第4步，采用module.compile()执行指定模块的脚本，逻辑如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Module.prototype._compile = function(content, filename) &#123;</span><br><span class="line">  // 1. 生成一个require函数，指向module.require</span><br><span class="line">  // 2. 加载其他辅助方法到require</span><br><span class="line">  // 3. 将文件内容放到一个函数之中，该函数可调用 require</span><br><span class="line">  // 4. 执行该函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的第1步和第2步，require函数及其辅助方法主要如下。</p><blockquote><p>require(): 加载外部模块<br>require.resolve()：将模块名解析到一个绝对路径<br>require.main：指向主模块<br>require.cache：指向所有缓存的模块<br>require.extensions：根据文件的后缀名，调用不同的执行函数</p></blockquote><p>一旦require函数准备完毕，整个所要加载的脚本内容，就被放到一个新的函数之中，这样可以避免污染全局环境。该函数的参数包括require、module、exports，以及其他一些参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function (exports, require, module, __filename, __dirname) &#123;</span><br><span class="line">  // YOUR CODE INJECTED HERE!</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Module._compile方法是同步执行的，所以Module._load要等它执行完成，才会向用户返回module.exports的值。</p><hr><p>emmm…，总结一下吧：看了这么长的一篇关于CommonJS的规范，大概有点清楚了。</p><p>1.总之就是每个文件就一个模块，模块之间互不干扰，模块之间调用需要使用到exports和require，有点像是js里的函数，exports就像函数的返回值，require就像一个函数调用外部的函数，获得外部函数的返回值，区别也有，模块调用并改变另一个模块的值时，并不会干扰到另一个模块的内部。使用模块的好处是不会污染全局环境（emmm，并不知道什么意思）。<br>然后就是每个模块都有一个Module对象，exports和require是Module对象的属性。</p><p>2.exports用于当前模块对外输出的接口，exports和module.exports不同，exports指向module.exports。</p><p>3.require用于读入并执行一个JavaScript文件，然后返回该模块的exports对象。require加载规则，以“/”开头是绝对路径，以“./”开头是相对路径，不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块。require目录加载规则，会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。require加载的exports存在于缓存里，需要重新加载可以清除缓存，循环require会导致后加载会加载不完整模块，最后就是require加载机制，模块内部的变化就影响不到这个值本身。</p><p>差不多就这些吧。。。还挺乱的。</p>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> commonjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack和vue-cli学习</title>
      <link href="/2018/04/24/2018_4_24_1_vue-cli%E5%92%8Cwebpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/04/24/2018_4_24_1_vue-cli%E5%92%8Cwebpack%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>前几天学习了Vue.js，使用起来确实是非常的便捷，不需要自己手动的去操作DOM，只需要改变数据就能实现DOM的改变。<br>然后我搜了一下Vue相关的项目，本来是打算自己先做着试试的，结果发现完全看不懂啊，一个完整的项目涉及到的东西还是非常的多。</p><hr><p>首先我看到的就是<strong>Vue-cli</strong>，这是一个vue官方提供的vue项目的脚手架工具，emmm。。。，看不懂，脚手架工具是个什么玩意，然后我就去搜了一下vue-cli相关的知识，大概的意思应该是<strong>快捷的创建好一个vue项目模板</strong>，差不多就是一个样本，你照着修改就行了。</p><p>接下来就是要创建模板了，官方提供了2种模板使用：</p><blockquote><p>基于vue cli和browserify的项目模板<br>基于vue cli和webpack的项目模板</p></blockquote><p>emmm。。。<br>browserify是个什么东西，我还清楚，webpack呢有听说过，是个打包工具来着，所以我决定要创建webpack的项目模板</p><p>安装vue-cli脚手架工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure></p><p>安装webpack打包工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure></p><p>创建webpack-simple模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple my-webpack-simple-demo</span><br></pre></td></tr></table></figure></p><p>会产生对应的my-webpack-simple-demo项目文件夹</p><p>打开文件夹<br>文件树结构如下：</p><blockquote><p>├─.babelrc        // babel配置文件<br>├─.gitignore<br>├─index.html        // 主页<br>├─package.json        // 项目配置文件<br>├─README.md<br>├─webpack.config.js    // webpack配置文件<br>├─dist            // 发布目录<br>│   ├─.gitkeep<br>├─src            // 开发目录<br>│   ├─App.vue        // App.vue组件<br>│   ├─main.js        // 预编译入口</p></blockquote><p>。。。还是看不懂项目里的都是些啥，我只知道<br>index.html 是首页<br>README.md 是展示的makedown文件<br>package.josn 是json文件具体什么用也不清楚<br>其他一概不知，一个完整的项目东西也太多了，和做一个单独的网页配上css和js完全不一样</p><p>所以大概还得一样一样学过来</p><p>那么既然这个是基于vue-cli和webpack的项目模板，所以就先从webpack学起吧！</p><p>跟着别人的教程走吧</p><p>首先webpack是什么<br>1.一个打包工具<br>2.一个模块加载工具<br>3.各种资源都可以当成模块来处理</p><blockquote><p>emmm。。。，说真的，每次学新的东西的时候，都是看着这种很专业的术语来学习真的是非常的不明觉厉啊，前面看git命令的时候也是一样，所以还是先看后面的例子吧</p></blockquote><p>对于模块的组织，通常有如下几种方法：<br>1.通过书写在不同的文件中，使用script标签进行加载</p><blockquote><p>这个是我目前会的那种。。。</p></blockquote><p>2.CommonJS进行加载（NodeJS就是使用这种方式）</p><blockquote><p>CommonJS又是什么，nodejs还没开始看呢。。</p></blockquote><p>3.AMD进行加载（require.js使用这种方式）</p><blockquote><p>emmm…</p></blockquote><p>4.ES6模块</p><blockquote><p>es6也没怎么看</p></blockquote><p>算了，慢慢来吧</p><p>webpack的特点</p><p>1.丰富的插件，方便进行开发工作<br>2.大量的加载器，包括加载各种静态资源<br>3.代码分割，提供按需加载的能力<br>4.发布工具</p><p>webpack的优势<br>1.webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。<br>2.能被模块化的不仅仅是 JS 了。<br>3.开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。<br>4.扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。</p><blockquote><p>大概是意思就是我要使用webpack还得先去学CommonJS</p></blockquote><p>ok！开始webpack的例子了<br>还是实际的代码比较容易理解</p><p>安装webpack，前面安装过了</p><p>使用webpack<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init # 会自动生成一个package.json文件</span><br><span class="line">npm install webpack --save-dev #将webpack增加到package.json文件中</span><br></pre></td></tr></table></figure></p><p>如果要安装开发工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>webpack的配置<br>每个项目下都必须配置有一个webpack.config.js，它的作用如同常规的gulpfile.js/Gruntfile.js，就是一个配置项，告诉webpack他需要做什么<br>下面是个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //插件项</span><br><span class="line">    plugins: [commonsPlugin],</span><br><span class="line">    //页面入口文件配置</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index : &apos;./src/js/page/index.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    //入口文件输出配置</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: &apos;dist/js/page&apos;,</span><br><span class="line">        filename: &apos;[name].js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        //加载器配置</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</span><br><span class="line">            &#123; test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; &#125;,</span><br><span class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</span><br><span class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //其它解决方案配置</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        //查找module的话从这里开始查找</span><br><span class="line">        root: &apos;E:/github/flux-example/src&apos;, //绝对路径</span><br><span class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span><br><span class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</span><br><span class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</span><br><span class="line">        alias: &#123;</span><br><span class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</span><br><span class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</span><br><span class="line">            AppAction : &apos;js/actions/AppAction.js&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>plugins 是插件项，这里我们使用了一个CommonsChunkPlugin的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用<br>entry 是页面的入口文件配置，output是对应的输出配置文件<br>（既入口文件最终要生成什么名字的文件，存放在哪里）<br>module.loaders 是最关键的一块配置，它告诉webpack每种文件都需要使用什么加载器来处理。加载器需要使用npm来加载<br>resolve模块 是查找模块的路径和扩展名和别名</p><p>webpack开始使用<br>1.正确安装webpack<br>2.书写entry.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(&quot;entry&quot;);</span><br></pre></td></tr></table></figure></p><p>3.书写index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>4.执行命令，生成bundle.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack ./entry.js bundle.js</span><br></pre></td></tr></table></figure></p><p>5.打开html文件，显示entry<br>6.增加content.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &quot;content&quot;</span><br></pre></td></tr></table></figure></p><p>7.修改entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(require(&quot;./content.js&quot;));</span><br></pre></td></tr></table></figure></p><p>8.打开html文件，显示content<br>9.增加css.css文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">background:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10.修改entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;!style-loader!css-loader!./style.css&quot;);</span><br><span class="line">document.write(require(&quot;./content.js&quot;));</span><br></pre></td></tr></table></figure></p><p>11.执行命令，安装加载器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader</span><br></pre></td></tr></table></figure></p><p>12.执行webpack命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack ./entry.js bundle.js --module-bind &quot;css=style-loader!css-loader&quot;</span><br></pre></td></tr></table></figure></p><p>14.打开html文件，显示背景黄色<br>15.使用配置文件<br>默认配置文件为webpack.config.js<br>增加webpack.config.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./entry.js&quot;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure></p><p>16.发布服务器<br>安装服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack-dev-server -g</span><br><span class="line">$ webpack-dev-server --progress --colors</span><br></pre></td></tr></table></figure></p><p>服务器可以自动生成和刷新，修改代码保持后自动更新画面<br><a href="http://localhost:8080/webpack-dev-server/bundle" target="_blank" rel="noopener">http://localhost:8080/webpack-dev-server/bundle</a></p><p>17.webpack常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --display-error-details</span><br></pre></td></tr></table></figure></p><p>后面的参数“–display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config XXX.js //使用另一份配置文件（比如webpack.config2.js）来打包</span><br><span class="line">$ webpack --watch //监听变动并自动打包</span><br><span class="line">$ webpack -p //压缩混淆脚本，这个非常非常重要！</span><br><span class="line">$ webpack -d //生成map映射文件，告知哪些模块被最终打包到哪里了</span><br></pre></td></tr></table></figure></p><p>总结一下吧：vue-cli是脚手架工具，用来创建vue项目模板，webpack是打包工具，总的来说就是把多个文件打包成一个文件，不仅仅是js文件，静态资源也可以打包，学习webpack有那么一点感觉，但又很模糊，先到这里吧。</p>]]></content>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js数组函数</title>
      <link href="/2018/04/21/2018_4_21_2_%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0/"/>
      <url>/2018/04/21/2018_4_21_2_%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>push：将参数添加到原数组末尾，并返回数组的长度   </p><p>concat：返回一个新数组，是将参数添加到原数组中构成的   </p><p>splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…   </p><p>reverse：将数组反序   </p><p>sort(orderfunction)：按指定的参数对数组进行排序   </p><p>slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组 </p></blockquote><p>实例：  </p><p>1、数组的创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arrayObj = new Array();　//创建一个数组  </span><br><span class="line">var arrayObj = new Array([size]);　//创建一个数组并指定长度，注意不是上限，是长度  </span><br><span class="line">var arrayObj = new Array([element0[, element1[, ...[, elementN]]]]);　创建一个数组并赋值</span><br></pre></td></tr></table></figure></p><blockquote><p>要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。  </p></blockquote><p>2、数组的元素的访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var testGetArrValue=arrayObj[1]; //获取数组的元素值  </span><br><span class="line">arrayObj[1]= &quot;这是新值&quot;; //给数组元素赋予新的值</span><br></pre></td></tr></table></figure></p><p>3、数组元素的添加  </p><blockquote><p>arrayObj. push([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组结尾，并返回数组新长度<br>arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度<br>arrayObj.splice(insertPos,0,[item1[, item2[, . . . [,itemN]]]]);//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回””。  </p></blockquote><p>4、数组元素的删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.pop(); //移除最后一个元素并返回该元素值  </span><br><span class="line">arrayObj.shift(); //移除最前一个元素并返回该元素值，数组中元素自动前移  </span><br><span class="line">arrayObj.splice(deletePos,deleteCount); //删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素</span><br></pre></td></tr></table></figure></p><p>5、数组的截取和合并  </p><blockquote><p>arrayObj.slice(start, [end]); //以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素<br>arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); //将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组  </p></blockquote><p>6、数组的拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.slice(0); //返回数组的拷贝数组，注意是一个新的数组，不是指向  </span><br><span class="line">arrayObj.concat(); //返回数组的拷贝数组，注意是一个新的数组，不是指向</span><br></pre></td></tr></table></figure></p><p>7、数组元素的排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.reverse(); //反转元素（最前的排到最后、最后的排到最前），返回数组地址  </span><br><span class="line">arrayObj.sort(); //对数组元素排序，返回数组地址</span><br></pre></td></tr></table></figure></p><p>8、数组元素的字符串化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayObj.join(separator); //返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。  </span><br><span class="line">toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue小练习_图书管理</title>
      <link href="/2018/04/21/2018_4_21_1_vue%E7%BB%83%E4%B9%A0_%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86/"/>
      <url>/2018/04/21/2018_4_21_1_vue%E7%BB%83%E4%B9%A0_%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>这个是最后完成的样子<br><a href="https://frattinor.github.io/practice/Vue练习_图书管理" target="_blank" rel="noopener">demo</a></p><p>昨天学习看完了基本的Vue.js的知识点，今天开始做一些vue小练习</p><p>小练习目标：</p><blockquote><p>实现动态渲染html页面的图书<br>实现图书的添加和删除</p></blockquote><p>差不多就这样吧，<br>这个练习刚刚看到是时候还是觉得挺简单的，但是实际写起来就是觉得无从下手，大概是刚刚看完vue吧，没办法直接使用。<br>所以我就先写了html和css<br>大概这样吧<br><img src="https://raw.githubusercontent.com/FrattiNor/picture/master/picture_2.png" alt="Alt text"></p><p>接下来就是写js了</p><p>我的想法如下:<br>1 写一个vue实例vm对应图书的div<br>2 在vm里写一个books数组，数组里写图书的信息，<br>3 然后在html里通过v-for渲染<br>4 然后创建一个对象（newBook），然后给newBook写上书名（bookName），作者（author），价格（price）等属性<br>5 给删除按钮写删除对应行的函数（del），写在methods里<br>6 添加书籍里的书名，作者，价格用v-model对应起newBook.bookName，newBook.author，newBook.price。<br>7 给添加按钮写添加函数（add）</p><p>大概的想法是这样的</p><p>然后我开始实现我的想法<br>遇到了很多问题，这大概就是第一使用vue吧</p><p>遇到的问题如下:<br>1 js文件里的vue实例或在html属性里写错，可能会导致实例对应的DOM元素直接消失。我接二连三的遇到这个问题，一直不知道错在哪，然后就浪费了很多时间，比如v-model=”newbook.bookname”这个大小写问题，我一直没有发现</p><blockquote><p>解决办法：不要写错咯</p></blockquote><p>2 在写del函数的时候没办法删除对应行，暂时还不知道怎么解决，不过同时也学会了一个新的js的数组操作函数<strong>Array.splice(x,y)</strong>x对应的是数组的位置，y是要删除的数量，想到解决办法我会写上去的。</p><blockquote><p>解决办法：目前的想法是在渲染的时候给button添加一个index属性，来确定是哪一行<br>前面的想法不知道可不可行，我给books添加了index属性，我是用event.target确定当前button的，但是target.index不能使用，所以我把button的index属性改为了id属性，通过target.id确定是数组的哪个位置，然后把删除掉数组对应的位置<br>不过只是删除数组元素还是会产生问题，就是删除一个元素后，会打乱原来的index，产生断层，所以还要在del函数里给数组对应位置后面的所有对象的index都减一，才能保证index不会产生断层。</p></blockquote><p>3 在写add函数的时候，遇到这样一个问题，就是把newBook对象通过push函数添加进books数组里的时候，我再改变newBook对象的属性，books数组里对应的位置也会发生改变，这大概就是响应式吧，原来还会这样的。</p><blockquote><p>解决办法：在add函数里重新let一个对象，把newBook的属性全部copy一份给新对象，然后把新对象push进数组就没有这个问题了</p></blockquote><p>4 在写add函数的时候，还有遇到了一个问题，就是明明我在data里申明了newBook这个对象，但是在push的时候使用this.books.push(newBook)时报错说newBook没有申明，后来我想了想，大概是newBook不是全局变量的原因吧</p><blockquote><p>解决办法：使用时要用this.newBook，this代表当前实例</p></blockquote><p>最后附上我的代码<br>index.html（html）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;book&quot;&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;&lt;td&gt;书名&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;价格&lt;/td&gt;&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr  v-for=&quot;book in books&quot;&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; book.bookName &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; book.author &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&#123;&#123; book.price &#125;&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;&lt;button v-bind:id=&quot;book.index&quot; v-on:click=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;p&gt;添加书籍&lt;/p&gt;</span><br><span class="line">        &lt;label&gt;书名&lt;/label&gt;</span><br><span class="line">        &lt;input v-model=&quot;bookName&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">        &lt;label&gt;作者&lt;/label&gt;</span><br><span class="line">        &lt;input v-model=&quot;author&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">        &lt;label&gt;价格&lt;/label&gt;</span><br><span class="line">        &lt;input v-model.number=&quot;price&quot; type=&quot;number&quot; /&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>mycss.css（css）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html,body&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#book&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">    margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">    margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table&#123;</span><br><span class="line">    width: 95%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tr&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td&#123;</span><br><span class="line">    width: 25%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td,table&#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thead td&#123;</span><br><span class="line">    font-weight:bold;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    border-bottom: 2px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tbody td&#123;</span><br><span class="line">    padding-bottom: 10px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    border-top: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">label&#123;</span><br><span class="line">    /*display: block;*/</span><br><span class="line">    font-weight:bold;</span><br><span class="line">    /*margin: 5px 0;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">    margin: 20px 0 10px 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input::-webkit-outer-spin-button,</span><br><span class="line">input::-webkit-inner-spin-button &#123;</span><br><span class="line">    -webkit-appearance: none !important;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input[type=&quot;text&quot;],input[type=&quot;number&quot;]&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    margin: 3px 0 10px 0;</span><br><span class="line">    width: 95%;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    outline:none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input[type=&quot;text&quot;]:focus,input[type=&quot;number&quot;]:focus&#123;</span><br><span class="line">    border: 1px solid #3af;</span><br><span class="line">    box-shadow: 0 0 10px 1px #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button&#123;</span><br><span class="line">    background-color: #3E74B5;</span><br><span class="line">    border: 1px solid #3868A3;</span><br><span class="line">    padding: 7px 14px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line">button:hover&#123;</span><br><span class="line">    background-color:#325C8F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>myjs.js（js）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#book&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        bookName:&quot;&quot;,</span><br><span class="line">        author:&quot;&quot;,</span><br><span class="line">        price:&quot;&quot;,</span><br><span class="line">        index: &quot;3&quot;,</span><br><span class="line">        books: [</span><br><span class="line">            &#123;</span><br><span class="line">                bookName: &quot;红楼梦&quot;,</span><br><span class="line">                author: &quot;曹雪芹&quot;,</span><br><span class="line">                price: &quot;32&quot;,</span><br><span class="line">                index: &quot;0&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                bookName: &quot;水浒传&quot;,</span><br><span class="line">                author: &quot;施耐庵&quot;,</span><br><span class="line">                price: &quot;30&quot;,</span><br><span class="line">                index: &quot;1&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                bookName: &quot;三国演义&quot;,</span><br><span class="line">                author: &quot;罗贯中&quot;,</span><br><span class="line">                price: &quot;24&quot;,</span><br><span class="line">                index: &quot;2&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                bookName: &quot;西游记&quot;,</span><br><span class="line">                author: &quot;吴承恩&quot;,</span><br><span class="line">                price: &quot;20&quot;,</span><br><span class="line">                index: &quot;3&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        del: function(event)&#123;</span><br><span class="line">            let tar = event.target;</span><br><span class="line">            this.books.splice(tar.id,1);</span><br><span class="line">            for(let i = tar.id;i &lt; this.index;i++)&#123;</span><br><span class="line">                this.books[i].index--;</span><br><span class="line">            &#125;</span><br><span class="line">            this.index--;</span><br><span class="line">        &#125;,</span><br><span class="line">        add: function()&#123;</span><br><span class="line">            this.index++;</span><br><span class="line">            let newBook = new Object();</span><br><span class="line">            newBook.bookName = this.bookName;</span><br><span class="line">            newBook.author = this.author;</span><br><span class="line">            newBook.price = this.price;</span><br><span class="line">            newBook.index = this.index;</span><br><span class="line">            if(newBook.bookName == &quot;&quot;)&#123;</span><br><span class="line">                alert(&quot;书名为空&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(newBook.author == &quot;&quot;)&#123;</span><br><span class="line">                alert(&quot;作者为空&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            this.books.push(newBook);</span><br><span class="line">            this.bookName = &quot;&quot;;</span><br><span class="line">            this.author = &quot;&quot;;</span><br><span class="line">            this.price = &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后总结一下吧：<br>1.vue的响应式渲染确实非常的好用，改变实例的属性就能动态渲染html页面<br>2.我还不太熟悉vue的写法，经常漏写逗号，写多了就好<br>3.今天还知道了一些新的数组函数，过会我把今天看的数组函数都列一下吧<br>4.总的来说vue还是非常便利的</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript闭包问题</title>
      <link href="/2018/04/20/2018_4_20_5_Javascript%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/20/2018_4_20_5_Javascript%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>闭包这个问题，其实是我一直没有搞懂的，到现在为止也没有，但是我很早之前就遇到过闭包的问题，当时要给多个li绑定事件，为了方便我使用了for循环一个一个的给每个li绑定事件，但是，结果发现只有最后一个li绑定了事件，这个问题一直困扰着我，后来问了学长才知道，这个是闭包问题。后来用了立即执行函数才解决问题<br>直到现在我也不太明白闭包到底是个什么东西，但大概有个概念<br>就是变量作用域的问题，在函数外面访问不到函数内部变量，函数内部可以访问函数外部的变量，从而导致了闭包问题的产生<br>那么要怎么样才能在访问函数内部的变量呢，这里就是闭包的概念了，在函数内部写一个函数，当然能访问到函数的变量，然后再将变量做为返回值，这样函数外部就能访问到函数内部的变量了。。。。emmm，大概是这么个意思吧。</p><p>前面是我个人对闭包的简单理解</p><hr><p>下面是借鉴dalao对闭包的理解:</p><blockquote><p>我的理解是，闭包就是能够读取其他函数内部变量的函数。</p><p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line"></span><br><span class="line">　　　　var n=999;</span><br><span class="line"></span><br><span class="line">　　　　nAdd=function()&#123;n+=1&#125;</span><br><span class="line"></span><br><span class="line">　　　　function f2()&#123;</span><br><span class="line">　　　　　　alert(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　return f2;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　var result=f1();</span><br><span class="line"></span><br><span class="line">　　result(); // 999</span><br><span class="line"></span><br><span class="line">　　nAdd();</span><br><span class="line"></span><br><span class="line">　　result(); // 1000</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p><p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p><p><strong>使用闭包的注意点</strong><br>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git 基本命令</title>
      <link href="/2018/04/20/2018_4_20_4_git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/04/20/2018_4_20_4_git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>本地创建git仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/xxxxxx/xxxxx.git</span><br></pre></td></tr></table></figure><p>关联本地仓库到对应的github仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名/文件夹名</span><br></pre></td></tr></table></figure><p>添加文件到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;形容这次操作&quot;</span><br></pre></td></tr></table></figure><p>提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>上传到github仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached idea</span><br></pre></td></tr></table></figure><p>删除本地仓库的idea文件，cached不会删除本地文件，去掉会删除本地文件</p><p>我目前就知道这么多</p><hr><p>然后今天还看见了一个比较全面的git命令表格</p><p>我就照搬过来了</p><p>个人本地使用</p><table><thead><tr><th style="text-align:center">行为</th><th style="text-align:center">命令</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">初始化</td><td style="text-align:center">init</td><td style="text-align:center">在本地的当前目录里初始化git仓库</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">clone https://….</td><td style="text-align:center">从网络上某个地址拷贝仓库(repository)到本地</td></tr><tr><td style="text-align:center">查看当前状态</td><td style="text-align:center">status</td><td style="text-align:center">查看当前仓库的状态。碰到问题不知道怎么办的时候，可以通过看它给出的提示来解决问题</td></tr><tr><td style="text-align:center">查看不同</td><td style="text-align:center">diff</td><td style="text-align:center">查看当前状态和最新的commit之间不同的地方</td></tr><tr><td style="text-align:center">添加文件</td><td style="text-align:center">add -A</td><td style="text-align:center">这算是相当通用的了。在commit之前要先add</td></tr><tr><td style="text-align:center">撤回stage的东西</td><td style="text-align:center">checkout - - .</td><td style="text-align:center">这里用小数点表示撤回所有修改，在- -的前后都有空格</td></tr><tr><td style="text-align:center">提交</td><td style="text-align:center">commit -m “提交信息”</td><td style="text-align:center">提交信息最好能体现更改了什么</td></tr><tr><td style="text-align:center">删除未tracked</td><td style="text-align:center">clean -xf</td><td style="text-align:center">删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件</td></tr><tr><td style="text-align:center">查看提交记录</td><td style="text-align:center">log</td><td style="text-align:center">查看当前版本及之前的commit记录</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">reflog</td><td style="text-align:center">HEAD的变更记录</td></tr><tr><td style="text-align:center">版本回退</td><td style="text-align:center">reset –hard 版本号</td><td style="text-align:center">回退到指定版本号的版本，该版本之后的修改都被删除。同时也是通过这个命令回到最新版本。需要reflog配合</td></tr></tbody></table><p>个人使用远程仓库</p><table><thead><tr><th style="text-align:center">行为</th><th style="text-align:center">命令</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">设置用户名</td><td style="text-align:center">config - -global user.name “你的用户名”</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">设置邮箱</td><td style="text-align:center">config - -global user.email “你的邮箱”</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">生成ssh key</td><td style="text-align:center">ssh-keygen -t rsa -C “你的邮箱”</td><td style="text-align:center">这条命令前面不用加git</td></tr><tr><td style="text-align:center">添加远程仓库</td><td style="text-align:center">remote add origin 你复制的地址</td><td style="text-align:center">设置origin</td></tr><tr><td style="text-align:center">上传并指定默认</td><td style="text-align:center">push -u origin master</td><td style="text-align:center">指定origin为默认主机，以后push默认上传到origin上</td></tr><tr><td style="text-align:center">提交到远程仓库</td><td style="text-align:center">push</td><td style="text-align:center">将当前分支增加的commit提交到远程仓库</td></tr><tr><td style="text-align:center">从远程仓库同步</td><td style="text-align:center">pull</td><td style="text-align:center">在本地版本低于远程仓库版本的时候，获取远程仓库的commit</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github 创建本地仓库以及上传到github仓库</title>
      <link href="/2018/04/20/2018_4_20_3_github%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%B8%8A%E4%BC%A0%E5%88%B0github%E4%BB%93%E5%BA%93/"/>
      <url>/2018/04/20/2018_4_20_3_github%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%B8%8A%E4%BC%A0%E5%88%B0github%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<blockquote><p>1 注册github账号</p><p>2 新建仓库</p><p>3 安装git</p><p>4 打开Git Bash，输入以下命令生成密钥来验证身份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -C &apos;your@email.address&apos; -t rsa</span><br></pre></td></tr></table></figure></p></blockquote><p>之后会要求输入密码，输入正确后<br>会在windows当前用户目录下生成.ssh文件夹</p><blockquote><p>5 把文件夹下的id_rsa.pub文件内容全部复制</p><p>6 然后打开github账户设置</p><p>7 打开ssh keys，右上角点击add ssh key，key栏粘贴刚才的密钥。</p><p>8 在你想要文件夹下打开Git Bash，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>会在文件夹下创建.git文件夹（隐藏的）</p><p>9 添加单个文件（test.txt）本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>10 把添加的文件提交到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add test.txt&quot;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>命令行引号里面是我们用来描述这次操作，方便以后我们查记录的时候能清楚这次操作主要修改</p></blockquote><p>到这里本地仓库已经完成了</p><blockquote><p>最后提交到github仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/xxxxxx/xxxxx.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p></blockquote><p>完成</p>]]></content>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue.js 学习总结</title>
      <link href="/2018/04/20/2018_4_20_2_Vue.js%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/20/2018_4_20_2_Vue.js%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>已经学习了基本的Vue.js<br>我来总结一下具体学了什么<br>我把Vue.js分成几类<br>1<code>Vue实例</code></p><blockquote><p>Vue实例写在js文件里<br>Vue实例有以下的属性</p><blockquote><p>el：<br>对应具体的DOM</p><p>data：<br>写实例的变量</p><p>methods：<br>写实例的函数</p><p>computed：<br>写实例的计算属性（计算属性类似methods，区别是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行）</p><p>watch：<br>给对应的实例变量写回调函数，在变量发生改变时触发</p></blockquote></blockquote><p>暂时只学习了这些属性</p><hr><p>Vue实例有以下的方法</p><blockquote><p>vm.\$watch( expOrFn, callback, [options] )：<br>对应watch，再实例变量发生改变时触发，回调函数得到的参数为新值和旧值。</p><p>vm.\$set( target, key, value )：<br>这是全局 Vue.set 的别名。设置对象的属性。</p><p>vm.\$delete：<br>这是全局 Vue.delete 的别名。删除对象的属性。</p><p>vm.\$on( event, callback )：<br>给实例绑定一个自定义事件。</p><p>vm.\$once( event, callback )：<br>给实例绑定一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。</p><p>vm.\$off( [event, callback] )：<br>移除自定义事件监听器。</p><p>vm.\$emit( event, […args] )：<br>触发当前实例上的事件。附加参数都会传给监听器回调。</p></blockquote><p>暂时只学习了这些方法</p><hr><p>Vue实例的生命周期</p><p>关于Vue的生命周期我还是不太理解，所以就先放上dalao的解释了</p><blockquote><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。<br>在这些事件响应方法中的this直接指向的是vue的实例。<br><img src="https://raw.githubusercontent.com/FrattiNor/new-project/master/picture_1.png" alt="Alt text"></p></blockquote><blockquote><p>Vue提供的可以注册的钩子：</p><blockquote><p>beforeCreate<br>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p><p>created<br>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\$el 属性目前不可见。</p><p>beforeMount<br>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>mounted<br>el 被新创建的 vm.\$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.\$el 也在文档内。</p><p>beforeUpdate<br>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>updated<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。<br>该钩子在服务器端渲染期间不被调用。</p><p>beforeDestroy<br>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>destroyed<br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p></blockquote></blockquote><p>2<code>Vue指令</code></p><blockquote><p>指令：是带有V-前缀的特殊属性，通过属性来操作元素<br>Vue基本指令</p><blockquote><p>v-text:<br>在元素当中插入值,只能是文本<br>v-html:<br>在元素不中不仅可以插入文本，还可以插入标签</p><p>v-if<br>根据表达式的true或false来动态插入和移除元素（代码注释）</p><p>v-show<br>根据表达式的true或false来隐藏和显示元素（css：display:none）</p><p>v-for<br>根据变量的值来循环渲染元素（用法类似for in）</p><p>v-on<br>监听元素事件，并执行相应的操作（相当于给元素添加监听器）<br>v-on 缩写（v-on:click  ==  @click）</p><p>v-bind<br>给元素绑定属性，可以添加表达式动态的判断是否添加<br>v-bind 缩写（v-bind:href  ==  :href）</p><p>v-model<br>实现了数据和视图的双向绑定<br>分成了3步：<br> 1）把元素的值和数据相绑定<br> 2）当输入内容时，数据同步发生变化，视图  —数据的驱动<br> 3）当改变数据时，输入内容也会发生变化，数据 -&gt; 视图的驱动</p><p>自定义指令<br>通过directive来注册指令，可以注册全局指令和局部指令</p></blockquote></blockquote><p>Vue指令除了可以添加表示式，还可以添加修饰符</p><blockquote><p>Vue.js 为 v-on 提供了 事件修饰符</p><blockquote><p>.stop<br>阻止事件冒泡</p><p>.prevent<br>不再重载页面</p><p>.capture<br>添加事件侦听器时使用时间捕获模式</p><p>.self<br>只当事件在该元素本身（而不是子元素）触发时触发回调</p><p>.once<br>事件只能点击一次</p></blockquote></blockquote><p>修饰符例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>按键修饰符<br>v-on:keyup.13=”submit”<br>只有在 keyCode 是 13 时调用 vm.submit()</p></blockquote><p>因为记住全部按键太难了，所以Vue提供了按键别名</p><blockquote><p>全部的按键别名：</p><blockquote><p>.enter<br>.tab<br>.delete (捕获 “删除” 和 “退格” 键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right<br>.ctrl<br>.alt<br>.shift<br>.meta</p></blockquote></blockquote><p>3<code>其他</code><br>Vue除了实例和指令外，还有一些其他的知识点</p><blockquote><p>3.1 数据绑定最常见的形式就是使用 &#123;&#123;…&#125;&#125;（双大括号）的文本插值：</p><p>3.2 Vue组件<br>组件可以扩展 HTML 元素，封装可重用的代码。</p></blockquote><p>我个人对组件的看法是类似于DOM元素的东西，通俗的讲就是HTMl的标签</p><blockquote><p>component可以用来注册组件，可以注册全局组件和局部组件<br>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：<br><strong>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</strong><br>但如果子组件要把数据传递回去，就需要使用自定义事件！<br>我们可以使用 v-on 绑定自定义事件</p><p>3.3 Vue.js 路由<br>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。<br>Vue.js 路由需要载入 vue-router 库</p></blockquote><p>暂时应该就学了这些东西。。。以后学的再补充吧。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue.js 学习（四）</title>
      <link href="/2018/04/20/2018_4_20_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/04/20/2018_4_20_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>14<code>Vue.js 自定义指令</code></p><blockquote><p>Vue 允许注册自定义指令。<br>指令（v-model v-show 等。。）<br>使用 directives 来注册指令<br>我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt;</span><br><span class="line">    &lt;input v-focus&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册一个全局自定义指令 v-focus</span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line">  // 当绑定元素插入到 DOM 中。</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    // 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>钩子函数<br>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。<br>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。<br>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。<br>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。<br>unbind: 只调用一次， 指令与元素解绑时调用。</p></blockquote><blockquote><p>钩子函数参数<br>el: 指令所绑定的元素，可以用来直接操作 DOM 。<br>binding: 一个对象，包含以下属性：</p><blockquote><p>name: 指令名，不包括 v- 前缀。<br>value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。<br>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。<br>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。<br>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</p></blockquote></blockquote><blockquote><p>vnode: Vue 编译生成的虚拟节点。<br>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;  v-runoob:hello.a.b=&quot;message&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.directive(&apos;runoob&apos;, &#123;</span><br><span class="line">  bind: function (el, binding, vnode) &#123;</span><br><span class="line">    var s = JSON.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      &apos;name: &apos;       + s(binding.name) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;value: &apos;      + s(binding.value) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;expression: &apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;argument: &apos;   + s(binding.arg) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;modifiers: &apos;  + s(binding.modifiers) + &apos;&lt;br&gt;&apos; +</span><br><span class="line">      &apos;vnode keys: &apos; + Object.keys(vnode).join(&apos;, &apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;xxxx!&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>有时候我们不需要其他钩子函数，我们可以简写函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;runoob&apos;, function (el, binding) &#123;</span><br><span class="line">  // 设置指令的背景颜色</span><br><span class="line">  el.style.backgroundColor = binding.value.color</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>总结：Vue支持写自定义函数，同样也是响应式的函数，根据参数的变化而变化。具体的还不太清楚。</p><p>15<code>Vue.js 路由</code></p><blockquote><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。<br>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。<br>Vue.js 路由需要载入 vue-router 库<br>Vue.js + vue-router 可以很简单的实现单页应用。</p></blockquote><p>html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello App!&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">    &lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span><br><span class="line"> </span><br><span class="line">// 1. 定义（路由）组件。</span><br><span class="line">// 可以从其他文件 import 进来</span><br><span class="line">const Foo = &#123; template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; &#125;</span><br><span class="line">const Bar = &#123; template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; &#125;</span><br><span class="line"> </span><br><span class="line">// 2. 定义路由</span><br><span class="line">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span><br><span class="line">// 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">// 或者，只是一个组件配置对象。</span><br><span class="line">// 我们晚点再讨论嵌套路由。</span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: &apos;/foo&apos;, component: Foo &#125;,</span><br><span class="line">  &#123; path: &apos;/bar&apos;, component: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">// 3. 创建 router 实例，然后传 `routes` 配置</span><br><span class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes // （缩写）相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">// 4. 创建和挂载根实例。</span><br><span class="line">// 记得要通过 router 配置参数注入路由，</span><br><span class="line">// 从而让整个应用都有路由功能</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br><span class="line"> </span><br><span class="line">// 现在，应用已经启动了！</span><br></pre></td></tr></table></figure></p><p>总结：Vue.js路由很好理解，就是本来是多页面的网页，可以通过单页来实现，根据点击的router-link的url不同，在下面router-view处会渲染不同的页面来实现单页面跳转效果。<br>还有就是使用起来可能有点小困难吧。。。意思很好理解，实际操作应该不简单</p><p>到这里基础的Vue.js已经学完了，感觉上和以前学JQuery没什么差别，感觉上就是看了的，基本都看懂了，但是实际使用起来就是无从下手的感觉，总感觉看了跟没有看一样，所以还是找点Vue的练习做做吧。。。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于事件冒泡和事件捕获（二）</title>
      <link href="/2018/04/19/2018_4_19_5_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/04/19/2018_4_19_5_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>附上今天看见的非常形象的事件冒泡代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">              box-sizing: border-box;</span><br><span class="line">              margin: 0;</span><br><span class="line">              padding: 20px;</span><br><span class="line">              transition: background 800ms;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ul &#123;</span><br><span class="line">              height: 100%;</span><br><span class="line">              list-style: none;</span><br><span class="line">              background: hsl(193, 66%, 85%);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            li &#123;</span><br><span class="line">              height: 100%;</span><br><span class="line">              background: hsl(193, 66%, 95%);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .highlight &#123;</span><br><span class="line">              background: red;</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul @click=&quot;callback($event)&quot;&gt;</span><br><span class="line">    &lt;li @click=&quot;callback($event)&quot;&gt;One&lt;/li&gt;</span><br><span class="line">    &lt;ul @click=&quot;callback($event)&quot;&gt;</span><br><span class="line">      &lt;li @click=&quot;callback($event)&quot;&gt;Two&lt;/li&gt;</span><br><span class="line">      &lt;ul @click=&quot;callback($event)&quot;&gt;</span><br><span class="line">        &lt;li @click=&quot;callback($event)&quot;&gt;Three. Click Me!!!&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var pause = 200;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">      el: &quot;#app&quot;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">        callback(event) &#123;</span><br><span class="line">          var ms = event.timeout = (event.timeout + pause) || 0;</span><br><span class="line">          var target = event.currentTarget;</span><br><span class="line"></span><br><span class="line">          console.log(target);</span><br><span class="line"></span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            target.classList.add(&apos;highlight&apos;);</span><br><span class="line">            setTimeout(function() &#123;</span><br><span class="line">              target.classList.remove(&apos;highlight&apos;);</span><br><span class="line">            &#125;, pause);</span><br><span class="line">          &#125;, ms);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于事件冒泡和事件捕获</title>
      <link href="/2018/04/19/2018_4_19_4_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/"/>
      <url>/2018/04/19/2018_4_19_4_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7/</url>
      <content type="html"><![CDATA[<p>今天在学习Vue,js时接触到了事件修饰符.capture，意思为<strong>添加事件侦听器时使用事件捕获模式</strong>，不太明白，所以搜索了一下捕获模式，才明白原来是事件冒泡和事件捕获，虽然很早之前就已经接触过事件冒泡和事件捕获，但是一直都是一个很模糊的概念，没有去了解过，所以这次我就好好的了解了一下关于事件冒泡和事件捕获</p><blockquote><p>事件冒泡：即事件由子元素向祖先元素传播<br>事件捕获：即事件由祖先元素向子元素传播<br>要说明的是在<strong>IE</strong>浏览器和<strong>opera</strong>浏览器中，是不存在这个阶段的。</p><p>addEventListener(type,fn,boolean)，前面两个参数不用解释，第三个参数boolean，就是决定注册事件发生在捕 获阶段还是冒泡阶段，具体参考如下：<br>true : 捕获阶段<br>false : 冒泡阶段</p><p>在默认情况下，发生在一个子元素上的单击事件（或者其他事件），如果在其父级元素绑定了一个同样的事件，此时点击子元素，click事件会首先被子元素捕获，执行绑定的事件程序，之后会被父级元素捕获，再次激发一段脚本的执行，这就是所谓的“事件冒泡”。</p></blockquote><p>我个人的理解所谓的事件冒泡和事件捕获就是事件发生的顺序，冒泡是从小向大发生，也就是先子元素发生事件，再父元素发生事件，捕获则相反，一般来说，事件冒泡比较多，我个人接触的也都是事件冒泡，以前遇到过事件冒泡相关的问题，就是子元素触发了事件，父元素也同样触发了事件，因为都绑定了click事件，只要给子元素的事件添加阻止冒泡即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.stopPropagation()</span><br></pre></td></tr></table></figure></p><p>event.stopPropagation()方法<br>这是阻止事件的冒泡方法，不让事件向documen上蔓延，但是默认事件任然会执行<br>event.preventDefault()方法<br>这是阻止默认事件的方法<br>return false ；<br>这个方法比较暴力，他会同事阻止事件冒泡也会阻止默认事件</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue.js 学习（三）</title>
      <link href="/2018/04/19/2018_4_19_3_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/04/19/2018_4_19_3_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>11<code>Vue.js 事件处理器</code></p><blockquote><p>事件监听可以使用 v-on 指令<br>通常情况下，我们需要使用一个方法来调用 JavaScript 方法。<br>v-on 可以接收一个定义的方法来调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &apos;Vue.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 在 `methods` 对象中定义方法</span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      // `this` 在方法里指当前 Vue 实例</span><br><span class="line">      alert(&apos;Hello &apos; + this.name + &apos;!&apos;)</span><br><span class="line">      // `event` 是原生 DOM 事件</span><br><span class="line">      if (event) &#123;</span><br><span class="line">          alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 也可以用 JavaScript 直接调用方法</span><br><span class="line">app.greet() // -&gt; &apos;Hello Vue.js!&apos;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>事件修饰符</strong><br>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。<br>Vue.js通过由点(.)表示的指令后缀来调用修饰符。<br>.stop<br>.prevent<br>.capture<br>.self<br>.once<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class="line">&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>按键修饰符</strong><br>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line">&lt;!-- 缩写语法 --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>全部的按键别名：</strong><br>.enter<br>.tab<br>.delete (捕获 “删除” 和 “退格” 键)<br>.esc<br>.space<br>.up<br>.down<br>.left<br>.right<br>.ctrl<br>.alt<br>.shift<br>.meta</p></blockquote><p>总结：v-on就像是onclick一样，可以在DOM元素的属性里给DOM添加方法，当然一个DOM对应一个vue实例，对应的function得是vue实例里的。</p><p>12<code>Vue.js 表单</code></p><blockquote><p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。<br>v-model 会根据控件类型自动选取正确的方法来更新元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;单行文本输入……&quot;&gt;</span><br><span class="line">&lt;textarea v-model=&quot;message2&quot; placeholder=&quot;多行文本输入……&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>复选框<br>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;单个复选框：&lt;/p&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;多个复选框：&lt;/p&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;taobao&quot;&gt;taobao&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;span&gt;选择的值为: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checked : false,</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>单选框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;span&gt;选中值为: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    picked : &apos;Runoob&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>演示了单选按钮的双向数据绑定</p><p>select 列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;select v-model=&quot;selected&quot; name=&quot;fruit&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot;&gt;选择一个网站&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;www.runoob.com&quot;&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;www.google.com&quot;&gt;Google&lt;/option&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;output&quot;&gt;</span><br><span class="line">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: &apos;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>v-model</strong>会获取元素的value属性<br>修饰符<br>.lazy<br>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步<br>.number<br>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值<br>.trim<br>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>总结：感觉更像是介绍了v-model，动态根据元素来改变vue实例里的元素，从而连带改变（重新渲染）html页面</p><p>13<code>Vue.js 组件</code></p><blockquote><p>组件（Component）是 Vue.js 最强大的功能之一。<br>组件可以扩展 HTML 元素，封装可重用的代码。<br>几乎任意类型的应用的界面都可以抽象为一个组件树<br>注册一个全局组件语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(tagName, options)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tagName&gt;&lt;/tagName&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>全局组件<br>所有实例都能用全局组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;runoob&gt;&lt;/runoob&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;runoob&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>局部组件<br>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;runoob&gt;&lt;/runoob&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var Child = &#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    // &lt;runoob&gt; 将只在父模板可用</span><br><span class="line">    &apos;runoob&apos;: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Prop<br>prop 是父组件用来传递数据的一个自定义属性。<br>父组件的数据需要通过 props 把数据传给子组件，<strong>子组件需要显式地用 props 选项声明 “prop”</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input v-model=&quot;parentMsg&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;child v-bind:message=&quot;parentMsg&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注册</span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">  // 声明 props</span><br><span class="line">  props: [&apos;message&apos;],</span><br><span class="line">  // 同样也可以在 vm 实例中像 &quot;this.message&quot; 这样使用</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 创建根实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMsg: &apos;父组件内容&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。<br>Prop 验证<br>组件可以为 props 指定验证要求。<br>prop 是一个对象而不是字符串数组时，它包含验证要求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;example&apos;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 基础类型检测 （`null` 意思是任何类型都可以）</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多种类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必传且是字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数字，有默认值</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数组／对象的默认值应当由一个工厂函数返回</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: &apos;hello&apos; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        return value &gt; 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>type 可以是下面原生构造器：<br>String<br>Number<br>Boolean<br>Function<br>Object<br>Array<br>type 也可以是一个自定义构造器，使用 instanceof 检测。</p></blockquote><blockquote><p>自定义事件<br>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p><p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p><p>使用 <code>$on(eventName)</code> 监听事件<br>使用 <code>$emit(eventName)</code> 触发事件<br>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><p>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;counter-event-example&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">      &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementHandler: function () &#123;</span><br><span class="line">      this.counter += 1</span><br><span class="line">      this.$emit(&apos;increment&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#counter-event-example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: function () &#123;</span><br><span class="line">      this.total += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on</p></blockquote><p>总结：Vue.js组件我个人感觉就像是把一些写好的标签封装起来，组件的应该就是标签的意思，vue组件内部可以自己产生变量，但是父组件传递变量进去需要prop声明，组件也可以通过自定义方法来把变量传回父组件，至于native修饰符，我太明白。<br>引用dalao的话：意思就是当你给一个vue组件绑定事件时候，要加上native！如果是普通的html元素！就不需要。<br>感觉native就是把组件变回原生DOM的一种方式，不知这样说对不对。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue.js 学习（二）</title>
      <link href="/2018/04/19/2018_4_19_2_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/04/19/2018_4_19_2_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>6<code>Vue.js 条件语句</code></p><blockquote><p><strong>条件判断</strong><br>v-if<br>根据表达式的值(true 或 false )来决定是否插入对应的元素。<br>v-else<br>可以用 v-else 指令给 v-if 添加一个 “else” 块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt;</span><br><span class="line">  Sorry</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">  Not sorry</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里在v-if里写了js的随机数（0-1），如果大于0.5为true，显示Sorry，如果小于0.5为false，显示not sorry。<br>v-else-if<br>v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt;</span><br><span class="line">      A</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt;</span><br><span class="line">      B</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt;</span><br><span class="line">      C</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      Not A/B/C</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</strong><br>v-show<br>我们也可以使用 v-show 指令来根据条件展示元素<br>用法和单独用v-if类似</p></blockquote><p>总结：v-if，v-esle和v-if-else用法和js类似</p><p>7<code>Vue.js 循环语句</code></p><blockquote><p>v-for<br>v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。<br>v-for 可以绑定数据到数组来渲染一个列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-for=&quot;site in sites&quot;&gt;</span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    sites: [</span><br><span class="line">      &#123; name: &apos;Runoob&apos; &#125;,</span><br><span class="line">      &#123; name: &apos;Google&apos; &#125;,</span><br><span class="line">      &#123; name: &apos;Taobao&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>site可以自己命名，sites是实例的一组数组<br><strong>v-for 迭代对象</strong><br>v-for 可以通过一个对象的属性来迭代数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">&#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>object为对象，value为对象的属性内容（可以自己命名）<br>也可以提供第二个的参数为键名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class="line">&#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>键名就是对象属性名，这里key为属性名，value为属性内容<br>还可以提供第三个参数为索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">&#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>简单的说索引就1234…，给每个属性都加一个（差不多是这样吧emm…）<br><strong>v-for 迭代整数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;n in 10&quot;&gt;</span><br><span class="line">     &#123;&#123; n &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>会依次显示1-10</p></blockquote><p>总结：v-for应该就跟for（x in y）一个用法吧</p><p>8<code>Vue.js 计算属性</code></p><blockquote><p>计算属性关键词: <strong>computed</strong>。<br>计算属性在处理一些复杂逻辑时是很有用的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;原始字符串: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Runoob!&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里声明了一个计算属性 reversedMessage 。<br>提供的函数将用作属性 vm.reversedMessage 的 getter 。<br>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。<br>我们可以使用 methods（函数） 来替代 computed（计算属性），效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage2: function () &#123;</span><br><span class="line">    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。</p></blockquote><blockquote><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; site &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">name: &apos;Google&apos;,</span><br><span class="line">url: &apos;http://www.google.com&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    site: &#123;</span><br><span class="line">      // getter</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.name + &apos; &apos; + this.url</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set: function (newValue) &#123;</span><br><span class="line">        var names = newValue.split(&apos; &apos;)</span><br><span class="line">        this.name = names[0]</span><br><span class="line">        this.url = names[names.length - 1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span><br><span class="line">vm.site = &apos;xxxx http://www.runoob.com&apos;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>从实例运行结果看在运行 vm.site = ‘xxxx <a href="http://www.runoob.com&#39;" target="_blank" rel="noopener">http://www.runoob.com&#39;</a>; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新。</p></blockquote><p>总结：computed（计算属性）看起来和使用起来都和methods（函数）一样，区别应该就是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p><p>9<code>Vue.js 监听属性</code></p><blockquote><p>watch<br>我们可以通过 watch 来响应数据的变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id = &quot;computed_props&quot;&gt;</span><br><span class="line">    千米 : &lt;input type = &quot;text&quot; v-model = &quot;kilometers&quot;&gt;</span><br><span class="line">    米 : &lt;input type = &quot;text&quot; v-model = &quot;meters&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p id=&quot;info&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script type = &quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#computed_props&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        kilometers : 0,</span><br><span class="line">        meters:0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed :&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch : &#123;</span><br><span class="line">        kilometers:function(val) &#123;</span><br><span class="line">            this.kilometers = val;</span><br><span class="line">            this.meters = val * 1000;</span><br><span class="line">        &#125;,</span><br><span class="line">        meters : function (val) &#123;</span><br><span class="line">            this.kilometers = val/ 1000;</span><br><span class="line">            this.meters = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // $watch 是一个实例方法</span><br><span class="line">    vm.$watch(&apos;kilometers&apos;, function (newValue, oldValue) &#123;</span><br><span class="line">    // 这个回调将在 vm.kilometers 改变后调用</span><br><span class="line">    document.getElementById (&quot;info&quot;).innerHTML = &quot;修改前值为: &quot; + oldValue + &quot;，修改后值为: &quot; + newValue;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>watch 对象创建了两个方法 kilometers 和 meters。<br>当我们再输入框输入数据时，watch 会实时监听数据变化并改变自身的值。</p></blockquote><p>总结：watch对象创建的函数名对应data里的属性名，改属性发生变化时调用watch里对应的函数</p><p>10<code>Vue.js 样式绑定</code></p><blockquote><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。<br>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数<br><strong>class 属性绑定</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>isActive为true时，调用class=”active”，为false时，不调用<br>我们也可以在对象中传入更多属性用来动态切换多个 class 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;static&quot;</span><br><span class="line">     v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>我们也可以直接绑定数据里的一个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background: green;</span><br><span class="line">&#125;</span><br><span class="line">.text-danger &#123;</span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">      active: true,</span><br><span class="line">      &apos;text-danger&apos;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>此外，我们也可以在这里绑定返回对象的计算属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  error: null</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    classObject: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">        &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>数组语法<br>我们可以把一个数组传给 v-bind:class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    activeClass: &apos;active&apos;,</span><br><span class="line">    errorClass: &apos;text-danger&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>我们还可以使用三元表达式来切换列表中的 class<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &apos;&apos;]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>Vue.js style(内联样式)</strong><br>我们可以在 v-bind:style 直接设置样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;菜鸟教程&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>也可以直接绑定到一个样式对象，让模板更清晰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:style=&quot;styleObject&quot;&gt;菜鸟教程&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>v-bind:style 可以使用数组将多个样式对象应用到一个元素上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;菜鸟教程&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>注意：当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。</strong></p></blockquote><p>总结：v-bind提供很多种添加class或style的方法，我也不能一下一一全部记住，总而言之就是可以<strong>响应式的</strong>添加样式，改变个别样式可以使用style。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue.js 学习（一）</title>
      <link href="/2018/04/19/2018_4_19_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/04/19/2018_4_19_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1<code>Vue.js 安装</code></p><blockquote><p>1.本地安装<br>在 Vue.js 的官网上直接下载 vue.min.js 并用 script 标签引入。<br>2.CDN 方法<br>unpkg：<a href="https://unpkg.com/vue/dist/vue.js" target="_blank" rel="noopener">https://unpkg.com/vue/dist/vue.js</a>, 会保持和 npm 发布的最新的版本一致。<br>cdnjs : <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a><br>3.NPM 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">$ npm -v</span><br><span class="line">2.3.0</span><br><span class="line"></span><br><span class="line">#升级 npm</span><br><span class="line">cnpm install npm -g</span><br><span class="line"></span><br><span class="line"># 最新稳定版</span><br><span class="line">$ cnpm install vue</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在用 Vue.js 构建大型应用时推荐使用 NPM 安装</p></blockquote><p>总结：npm方法不太明白什么意思，但是至少可以像JQuery一样可以本地导入或网页导入</p><p>2<code>命令行工具</code></p><blockquote><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ cnpm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 这里需要进行一些配置，默认回车即可</span><br><span class="line">This will install Vue 2.x version of the template.</span><br><span class="line"></span><br><span class="line">For Vue 1.x use: vue init webpack#1.0 my-project</span><br><span class="line"></span><br><span class="line">? Project name my-project</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author runoob &lt;test@runoob.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Setup unit tests with Karma + Mocha? Yes</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;my-project&quot;.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line"></span><br><span class="line">     cd my-project</span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br><span class="line"></span><br><span class="line">   Documentation can be found at https://vuejs-templates.github.io/webpack</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>进入项目，安装并运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-project</span><br><span class="line">$ cnpm install</span><br><span class="line">$ cnpm run dev</span><br><span class="line"> DONE  Compiled successfully in 4388ms</span><br><span class="line"></span><br><span class="line">&gt; Listening at http://localhost:8080</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>成功执行以上命令后访问 <a href="http://localhost:8080/，可以看见搭建的网页" target="_blank" rel="noopener">http://localhost:8080/，可以看见搭建的网页</a></p><p><strong>注意：Vue.js 不支持 IE8 及其以下 IE 版本。</strong></p></blockquote><p>总结：暂时用不到吧，而且也不知道有那些命令</p><p>3<code>Vue.js 目录结构</code></p><blockquote><table><thead><tr><th style="text-align:center">目录/文件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">build</td><td style="text-align:center">项目构建(webpack)相关代码</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">配置目录，包括端口号等。我们初学可以使用默认的。</td></tr><tr><td style="text-align:center">node_modules</td><td style="text-align:center">npm 加载的项目依赖模块</td></tr><tr><td style="text-align:center">src</td><td style="text-align:center">这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：assets: 放置一些图片，如logo等。components: 目录里面放了一个组件文件，可以不用。App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。main.js: 项目的核心文件。</td></tr><tr><td style="text-align:center">static</td><td style="text-align:center">静态资源目录，如图片、字体等。</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">初始测试目录，可删除</td></tr><tr><td style="text-align:center">.xxxx文件</td><td style="text-align:center">这些是一些配置文件，包括语法配置，git配置等。</td></tr><tr><td style="text-align:center">index.html</td><td style="text-align:center">首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:center">项目配置文件。</td></tr><tr><td style="text-align:center">README.md</td><td style="text-align:center">项目的说明文档，markdown 格式</td></tr></tbody></table></blockquote><p>总结：emmm…，不知道说什么好</p><p>4<code>Vue.js 起步</code></p><blockquote><p>每个 Vue 应用都需要通过实例化 Vue 来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#vue_det&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            data1:&quot;1&quot;,</span><br><span class="line">            data2:&quot;2&quot;,</span><br><span class="line">            data3:&quot;3&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            function1: function() &#123;</span><br><span class="line">                return  data1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Vue实例的<br>el对应DOM的id<br>data用于定义属性<br>methods用于定义的函数，可以通过 return 来返回函数值<br>&#123;&#123; &#125;&#125;用于输出对象属性和函数返回值（用于DOM内）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;vue_det&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;data1&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。<br>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。</p></blockquote><p>总结：个人觉得就像是创建了一个object实例，然后提供了&#123;&#123; &#125;&#125;方法在DOM里直接显示出数据，并且可以时时改动，挺好理解的。</p><p>5<code>Vue.js 模板语法</code></p><blockquote><p><strong>插值</strong><br>1.数据绑定最常见的形式就是使用&#123;&#123; &#125;&#125;的文本插值<br>2.使用 v-html 指令用于输出 html 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;message1&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div v-html=&quot;message2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message1: &apos;文本插值&apos;</span><br><span class="line">    message2: &apos;&lt;h1&gt;HTML插值&lt;/h1&gt;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>属性</strong><br>HTML 属性中的值应使用 v-bind 指令<br>以下实例判断 class2 的值，如果为 true 使用 class1 类的样式，否则不使用该类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;&#123;&apos;class1&apos;: class2&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>表达式</strong><br>Vue.js 都提供了完全的 JavaScript 表达式支持。<br>在&#123;&#123; &#125;&#125;里或v-bind:class=””里使用js表达式都没有问题，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&#123;&#123;5+5&#125;&#125;&lt;br&gt;</span><br><span class="line">&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ok: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>指令</strong><br>指令是带有 v- 前缀的特殊属性<br>指令用于在表达式的值改变时，将某些行为应用到 DOM 上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素</p></blockquote><hr><blockquote><p><strong>参数</strong><br>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;超链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>href就是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定<br>另一个例子是 v-on 指令，它用于监听 DOM 事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;function&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>修饰符</strong><br>修饰符是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p><strong>用户输入</strong><br>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input v-model=&quot;message&quot;&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里input通过v-model改变了message的值，同时也反应到了p上</p></blockquote><hr><blockquote><p><strong>过滤器</strong><br>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”（|）指示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | function &#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>过滤器函数接受表达式的值作为第一个参数。<br>function为函数，message为参数传入function内<br>过滤器可以串联：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>过滤器是 JavaScript 函数，因此可以接受参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&apos;arg1&apos;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里，message 是第一个参数，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p></blockquote><hr><blockquote><p><strong>缩写</strong><br>Vue.js 为两个最为常用的指令提供了特别的缩写<br>v-bind和v-on<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>总结：Vue.js模板语法还挺多的，我个人感觉更像是把js响应式的写进了DOM里，更加直观一些，语法谁然多，但是都不是很难。</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义网页右键菜单（补充）</title>
      <link href="/2018/04/18/2018_4_18_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89%20/"/>
      <url>/2018/04/18/2018_4_18_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89%20/</url>
      <content type="html"><![CDATA[<hr><table><thead><tr><th style="text-align:center">鼠标事件</th><th style="text-align:center">button值</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">click</td><td style="text-align:center">0</td><td style="text-align:center">单击鼠标左键</td></tr><tr><td style="text-align:center">click</td><td style="text-align:center">1</td><td style="text-align:center">单击鼠标中键</td></tr><tr><td style="text-align:center">mousedown</td><td style="text-align:center">0</td><td style="text-align:center">按下鼠标左键</td></tr><tr><td style="text-align:center">mousedown</td><td style="text-align:center">1</td><td style="text-align:center">按下鼠标中键</td></tr><tr><td style="text-align:center">mousedown</td><td style="text-align:center">2</td><td style="text-align:center">按下鼠标右键</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> 鼠标点击事件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用CSS实现折叠面板</title>
      <link href="/2018/04/18/2018_4_18_1_%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/"/>
      <url>/2018/04/18/2018_4_18_1_%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/</url>
      <content type="html"><![CDATA[<hr><p>效果：使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板，要求样式一致。</p><hr><p>要使用到的是 radio，label，伪类，兄弟相邻选择器</p><hr><p> radio：单选框<br> label：文本框<br> 伪类：:checked   —选中时添加的类<br>兄弟相邻选择器：li+li {…}</p><hr><p>我的思路：<br>1<code>创建区域section</code><br>2<code>在section中建立3个radio，css设置radio的样式：dispaly:none</code><br>3<code>再创建3个label，绑定对应的radio</code><br>4<code>在label里写上标题，然后在里面创建div标签，再建立p标签，写入对应的内容</code><br>5<code>最后在css里给给div绑定对应的css3动画</code><br>到这里为止差不多就成型了</p><p>我遇到的问题：<br>1<code>radio没有单选框效果</code><br>产生的原因：没有给3个radio给定相同的name属性<br>解决办法：<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type="radio" id="one" name="cascade" /&gt;</span><br><span class="line">&lt;input type="radio" id="two" name="cascade" /&gt;</span><br><span class="line">&lt;input type="radio" id="three" name="cascade" /&gt;</span><br></pre></td></tr></table></figure></p><p>2<code>绑定的动画没有动画的过度效果</code><br>产生原因：高度再没有具体数值时，不会产生动画<br>解决办法：<br>给高度一个固定数值<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">height</span>: 250<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></p><p>建议div高度和section宽度，不要使用百分比，以免出现显示不全或空白太多的情况</p><p>3<code>绑定动画后，刷新页面会产生折叠动画</code><br>产生的原因：我给div绑定了折叠动画，因为不绑定会再失去checked时直接消失，但是绑定了折叠动画会在开始时就先播放动画。<br>解决办法：<br>建议使用css3的过滤<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">height</span> 1<span class="selector-tag">s</span> <span class="selector-tag">linear</span>;</span><br></pre></td></tr></table></figure></p><p>过滤只在对应属性改变时才会产生动画。</p><p>4<code>折叠框没办法全部折叠</code><br>产生的原因：radio选择后必须有一个选中<br>解决办法：<br>使用js改变radio只能有一个被选中的情况<br>（还是用到了js…，我感觉还不如用js让多选框只能单选来的简单）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">代码部分还不会，所以借鉴别人的</span><br><span class="line">    <span class="built_in">document</span>.body.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event = event || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (target.type === <span class="string">'radio'</span>) &#123;</span><br><span class="line">            target.previousValue = target.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event = event || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (target.type === <span class="string">'radio'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.previousValue) &#123;</span><br><span class="line">                target.checked = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>但只对点击radio有效。。。</p><hr><p>最后贴出我的代码：</p><p>index.html （html文件）<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;input type="radio" id="one" name="cascade" /&gt;</span><br><span class="line">        &lt;label for="one"&gt;Collapsible Group Item #1</span><br><span class="line">        &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.</span><br><span class="line">        &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;input type="radio" id="two" name="cascade" /&gt;</span><br><span class="line">        &lt;label for="two"&gt;Collapsible Group Item #2</span><br><span class="line">        &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.</span><br><span class="line">        &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;input type="radio" id="three" name="cascade" /&gt;</span><br><span class="line">        &lt;label for="three"&gt;Collapsible Group Item #3</span><br><span class="line">        &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.</span><br><span class="line">        &lt;/p&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src="js/myjs.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>mycss.css（css文件）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*折叠框局域*/</span></span><br><span class="line">    <span class="selector-tag">section</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: auto;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*设置单选框不可见*/</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">label</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">margin</span>: -<span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">transition</span>: height <span class="number">1s</span> linear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*单选宽选中时改变高度*/</span></span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked+label</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>myjs.js（javascript文件）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="keyword">if</span> (target.type === <span class="string">'radio'</span>) &#123;</span><br><span class="line">        target.previousValue = target.checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="keyword">if</span> (target.type === <span class="string">'radio'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.previousValue) &#123;</span><br><span class="line">            target.checked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义网页右键菜单</title>
      <link href="/2018/04/17/2018_4_17_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
      <url>/2018/04/17/2018_4_17_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<hr><p>效果：在特定区域点击鼠标右键，弹出自定义菜单。</p><hr><p>要使用到的是 contextmenu 事件</p><hr><p> contextmenu效果：初始右键效果</p><hr><p>我的思路：<br>1<code>创建区域div</code><br>2<code>js重新定义右键效果</code><br>3<code>重定义右键效果为创建一个ul里面是多个li，li里写入菜单文字</code><br>4<code>创建的ul需要定位在鼠标当前位置</code><br>5<code>然后创建完ul后给各个li绑定click事件</code><br>到这里为止差不多就成型了</p><p>需要解决的问题：<br>1<code>得创建一个消除ul的方法</code><br>不然会一直创建ul，那么什么时候应该消除ul，在区域中点击左键或中键，点击右键先的消除ul再重新创建ul，点击ul内部的li，先产生效果再消除ul<br>2<code>创建的ul消除后click事件消失</code><br>应该在创建ul的时候就绑定事件，如果在ul消失后绑定事件会报错</p><p>我遇到的问题：<br>1<code>创建区域时，使用百分比的高度，没效果</code><br>产生的原因：没有给body和html定义高度，区域的高度百分比继承于body，body继承于html<br>解决办法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">width: <span class="number">100</span>%;</span><br><span class="line">height: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2<code>给li绑定事件不生效</code><br>产生的原因：我是通过给产生的li添加属性index值来判断是哪个菜单的，然后获取到li的index值来绑定对应的事件，但是通过 <strong>getAttribute()</strong> 方法获取的index值默认为字符串，然后使用 <strong>if(index == number)</strong> 时，判断不相同。<br>解决办法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> index_0 = li_0.getAttribute(<span class="string">"index"</span>);</span><br><span class="line">index_0 = index_0 - <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>使用 - 0，可以快速转变为数字类型（算是小及技巧吧！！！）</p><p>最后贴出我的代码：</p><p>index.html （html文件）<br><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id="area"&gt;</span><br><span class="line">        &lt;p&gt;在区域中点击右键查看菜单&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src="js/myjs.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>mycss.css（css文件）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#area</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="comment">/*border: 1px solid #000;*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="comment">/*margin-left: 10px;</span></span><br><span class="line"><span class="comment">    margin-right: 10px;*/</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="comment">/*cursor: pointer;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>:none;<span class="comment">/*火狐*/</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>:none;<span class="comment">/*webkit浏览器*/</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>:none;<span class="comment">/*IE10*/</span></span><br><span class="line">    <span class="attribute">-khtml-user-select</span>:none;<span class="comment">/*早期浏览器*/</span></span><br><span class="line">    <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;<span class="comment">/*文字不可选中*/</span></span><br><span class="line"><span class="selector-class">.last</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.on</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>myjs.js（javascript文件）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> area = <span class="built_in">document</span>.getElementById(<span class="string">"area"</span>);<span class="comment">//点击区域</span></span><br><span class="line"><span class="keyword">let</span> client_x;<span class="comment">//鼠标当前的x坐标</span></span><br><span class="line"><span class="keyword">let</span> client_y;<span class="comment">//鼠标当前的y坐标</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;<span class="comment">//判断是否有菜单，有为1，无为0</span></span><br><span class="line"><span class="keyword">let</span> index_1 = <span class="number">0</span>;<span class="comment">//判断菜单1是否已点击，点击为1.未点击为0</span></span><br><span class="line"><span class="keyword">let</span> index_2 = <span class="number">0</span>;<span class="comment">//判断菜单2是否已点击，点击为1.未点击为0</span></span><br><span class="line"><span class="keyword">let</span> index_3 = <span class="number">0</span>;<span class="comment">//判断菜单3是否已点击，点击为1.未点击为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给区域绑定contextmenu事件，重新定义右键效果</span></span><br><span class="line">area.addEventListener(<span class="string">"contextmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.event)&#123;</span><br><span class="line">        e = <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">    e.preventDefault(); <span class="comment">//阻止原有的菜单</span></span><br><span class="line">    e.returnValue = <span class="literal">false</span>; <span class="comment">//在IE中阻止原有的菜单</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    <span class="comment">//判断是否已经有菜单</span></span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        determine();</span><br><span class="line">        addlist();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cleanlist();</span><br><span class="line">        determine();</span><br><span class="line">        addlist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给区域绑定左键和中键效果，消除菜单</span></span><br><span class="line">area.addEventListener(<span class="string">"mousedown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.button == <span class="number">1</span>||e.button == <span class="number">0</span>)&#123;</span><br><span class="line">        cleanlist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取鼠标当前的xy坐标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">determine</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = event || <span class="built_in">window</span>.event;</span><br><span class="line">    client_x = e.clientX;</span><br><span class="line">    client_y = e.clientY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生菜单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ul_0 = <span class="built_in">document</span>.createElement(<span class="string">"ul"</span>);</span><br><span class="line">    ul_0.setAttribute(<span class="string">"id"</span>,<span class="string">"meau"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> li_0 = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">            li_0.setAttribute(<span class="string">"index"</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                li_0.setAttribute(<span class="string">"class"</span>,<span class="string">"last"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span>(index_1 == <span class="number">1</span>)&#123;</span><br><span class="line">                        li_0.setAttribute(<span class="string">"class"</span>,<span class="string">"on"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    li_0.innerHTML = <span class="string">"背景变红"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span>(index_2 == <span class="number">1</span>)&#123;</span><br><span class="line">                        li_0.setAttribute(<span class="string">"class"</span>,<span class="string">"on"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    li_0.innerHTML = <span class="string">"字体变大"</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(index_3 == <span class="number">1</span>)&#123;</span><br><span class="line">                        li_0.className += <span class="string">" on"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    li_0.innerHTML = <span class="string">"边框变粗"</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ul_0.appendChild(li_0);</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">    ul_0.style.left = client_x+<span class="string">"px"</span>;</span><br><span class="line">    ul_0.style.top = client_y+<span class="string">"px"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ul_0);</span><br><span class="line">    addfunction(ul_0);</span><br><span class="line">    index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除菜单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanlist</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"meau"</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(box);</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给产生的菜单添加事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addfunction</span>(<span class="params">ul_0</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> li_0 = ul_0.getElementsByTagName(<span class="string">"li"</span>)[i];</span><br><span class="line">            <span class="keyword">let</span> index_0 = li_0.getAttribute(<span class="string">"index"</span>);</span><br><span class="line">            index_0 = index_0 - <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">switch</span>(index_0)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    addfunction_0(li_0);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    addfunction_1(li_0);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    addfunction_2(li_0);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给菜单1绑定事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addfunction_0</span>(<span class="params">li_0</span>)</span>&#123;</span><br><span class="line">    li_0.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">        <span class="keyword">if</span>(index_1 == <span class="number">0</span>)&#123;</span><br><span class="line">            area.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            area.style.backgroundColor = <span class="string">"#fff"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_1 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给菜单2绑定事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addfunction_1</span>(<span class="params">li_0</span>)</span>&#123;</span><br><span class="line">    li_0.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index_2 == <span class="number">0</span>)&#123;</span><br><span class="line">            area.style.fontSize = <span class="string">"32px"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_2 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            area.style.fontSize = <span class="string">"16px"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_2 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给菜单3绑定事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addfunction_2</span>(<span class="params">li_0</span>)</span>&#123;</span><br><span class="line">    li_0.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index_3 == <span class="number">0</span>)&#123;</span><br><span class="line">            area.style.border = <span class="string">"5px solid #000"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_3 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            area.style.border = <span class="string">"1px solid #000"</span>;</span><br><span class="line">            cleanlist();</span><br><span class="line">            index_3 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2018/04/17/2018_4_17_1_%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2_%E5%A6%82%E4%BD%95%E7%94%A8github%20page+hexo%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/17/2018_4_17_1_%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2_%E5%A6%82%E4%BD%95%E7%94%A8github%20page+hexo%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<hr><p>emmm…,这是我的第一篇博客，不知道该写什么，就记录一下自己怎么跟着大佬的步伐使用github和hexo搭建个人博客好了。</p><hr><p>要使用到的是github,node.js,hexo</p><hr><p> 我的博客搭建在 GitHub Pages上<br> GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><hr><p>1<code>安装git node.js</code><br>直接next选择安装目录即可</p><p>2<code>配置node.js环境变量</code><br>在环境变量里的path下添加node.js的安装目录即可</p><p>3<code>安装hexo</code><br>打开cmd,进入node.js安装目录下,利用 npm 命令即可安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>以上是安装必要的组件,然后可以开始搭建个人博客</p><p>4<code>搭建个人博客</code><br>依旧在cmd的node.js目录下输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog &amp;&amp; cd blog</span><br></pre></td></tr></table></figure><p>bolg是你的博客目录,可以自行更改,记得备份好文件,以免丢失<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><p>安装依赖包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>至此,博客搭建成功! 当然,仅仅是本地的了。此时执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><p>即可生成静态页面，然后执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到你的博客。</p><p>5<code>部署博客到github</code><br>注册github账号,并登录</p><p>创建仓库</p><blockquote><p>注：Github Pages的Repository名字是特定的，比如我Github账号是FrattiNor，那么我Github Pages Repository的名字就是FrattiNor.github.io。</p></blockquote><p>设置github pages</p><blockquote><p>选择主题并发布即可</p></blockquote><p>然后复制你github page的https链接<br>进入的bolg文件夹下修改_config.yml文件<br>修改底部的repository为刚刚复制的链接<br>如下</p><blockquote><p>deploy:<br>type: git<br>repository: <a href="https://github.com/FrattiNor/FrattiNor.github.io.git" target="_blank" rel="noopener">https://github.com/FrattiNor/FrattiNor.github.io.git</a><br>branch: master</p></blockquote><p>最后回到cmd执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save  </span><br><span class="line">（这命令是为了解决hexo新版本的部署问题）</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">（这是重新生成blog）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">（这是将本地blog部署到github的仓库）</span><br></pre></td></tr></table></figure><p>试试在浏览器的地址栏输入：“https://你的用户名.github.io/”</p><p>这样个人博客就搭建完成了，然后就可以修改主题和发布博文了</p><blockquote><p>主题在这里 <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Themes</a><br>博文使用makedown编写</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 第一 </tag>
            
            <tag> 如何搭建个人博客 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
