<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React-router]]></title>
    <url>%2F2018%2F05%2F25%2F2018_5_25_2_react-router%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[react-router应该是react的路由插件吧，就跟vue-router一样，用来实现页面的跳转功能 安装React Router已被拆分成三个包：react-router,react-router-dom和react-router-native。你不需要直接安装react-router，react-router包提供核心的路由组件与函数。其余两个提供运行环境（浏览器与react-native）所需的特定组件，但是他们都暴露出react-router中暴露的对象与方法。你应该为你的环境选择正确的包。我们进行的是网站（将会运行在浏览器）构建，所以应安装react-router-dom。1npm install -save react-router-dom Router当进行新项目时，你需要选择使用哪种路由。对于浏览器项目（网站），react-router4提供了&lt;BrowserRouter&gt;和&lt;HashRouter&gt;两个组件。前者在你有服务器处理动态请求的时候使用，后者在静态网站的时候使用。通常我们选择使用&lt;BrowserRouter&gt;，但是如果你的网站将运行在只有静态文件的服务器上，&lt;HashRouter&gt;是一个不错的方案。 区别： hashHistory 使用 URL 中的 hash（#）部分去创建路由，举例来说，用户访问http://www.example.com/，实际会看到的是http://www.example.com/#/。 browserHistory 是使用 React-Router 的应用推荐的 history方案。它使用浏览器中的 History API 用于处理 URL，创建一个像example.com/list/123这样真实的 URL 。 虽然不是太懂，大概的意思就是hash是跟原来学vue-router一样的，browser是实际存在的url。。。 History每种路由都会创建history对象，用来追踪当前的location并在网站变化的时候重新渲染。React Router提供的其它的组件都依赖于上下文中的history对象，所以必须在组件内部渲染。一个React Router组件如果没有父级组件将不会工作。 渲染一个&lt;Router&gt; 由于Router组件只能接收一个子元素，因为这个限制，我们创建一个&lt;App&gt;组件来渲染我们的应用（从路由中分离应用对于服务器端渲染也是很重要的，因为在服务器端渲染，切换到&lt;MemoryRouter&gt;的时候可以复用&lt;App&gt;） 123456import &#123; BrowserRouter &#125; from &apos;react-router-dom&apos;ReactDOM.render(( &lt;BrowserRouter&gt; &lt;App &gt;&lt;/App&gt; &lt;/BrowserRouter&gt;), document.getElementById(&apos;root&apos;)) =我们的应用写在&lt;App&gt;组件中。为了简化，我们将分离我们的应用到两部分，&lt;Header&gt;组件将包含网站的导航链接，&lt;Main&gt;组件用于渲染剩下的内容1234567// this component will be rendered by our &lt;___Router&gt;const App = () =&gt; ( &lt;div&gt; &lt;Header /&gt; &lt;Main /&gt; &lt;/div&gt;) 路由 Route&lt;Route&gt;组件是React Router的主要构件模块，任何你想渲染的与pathname匹配的地方，你都应该创建一个&lt;Route&gt;元素。 路径 Path一个&lt;Route&gt;需要一个path的字符串参数来描述路由匹配的路径名类型，例如，应该匹配以/roster开头的路径名。 当前位置的路径与path匹配时，路由将渲染一个React元素。 当路径不匹配时，路由将不会渲染任何东西。 12345&lt;Route path=&apos;/roster&apos; /&gt;// 当前路径是 &apos;/&apos;, 不满足匹配// 当前路径是 &apos;/roster&apos; 或 &apos;/roster/2&apos;, 满足匹配// 如果只想匹配 &apos;/roster&apos;, 需要使用&quot;exact&quot;参数// 下面的会匹配 &apos;/roster&apos;, 但是不会匹配&apos;/roster/2&apos;. 匹配路径path-to-regexp包用于确定路径元素的path参数是否与当前位置匹配。它将path字符串编译为一个正则表达式，该正则表达式将与该位置的路径名相匹配。path字符串具有比此处所述更高级的格式选项。你可以在正则表达式文档路径中阅读它们。当路径的路径匹配时，将创建一个具有以下属性的匹配对象： url - 当前位置路径名的匹配部分path - 路由的路径isExact - path是否等于pathnameparams - 一个包含path-to-regexp捕获的路径名值的对象 创建路由可以在路由内部的任何位置创建&lt;Route&gt;，但是通常在同一地方渲染它们。你可以使用&lt;Switch&gt;组件来包裹一组&lt;Route&gt;。 &lt;Switch&gt;将迭代其子元素（路由），并仅渲染与当前路径名匹配的第一个元素。 &lt;Route&gt;怎么渲染？当path匹配时，&lt;Route&gt;有三个参数可用于定义什么该被渲染。但是只能提供一个给&lt;Route&gt;元素。 component — 一个React组件。当带有component 参数的路由匹配时，路由将返回一个新元素，其类型是一个React component （使用React.createElement创建）。render — 一个返回React元素的函数。它将在path匹配时被调用。这与component类似，但对于 内联渲染 和 更多参数传递 很有用。children — 一个返回React元素的函数。与之前的两个参数不同，无论路由的路径是否与当前位置相匹配，都将始终被渲染。 12345678910111213141516//component&lt;Route path=&apos;/page&apos; component=&#123;Page&#125; /&gt; const extraProps = &#123; color: &apos;red&apos; &#125;//render&lt;Route path=&apos;/page&apos; render=&#123;(props) =&gt; ( &lt;Page &#123;...props&#125; data=&#123;extraProps&#125;/&gt;)&#125;/&gt;//children&lt;Route path=&apos;/page&apos; children=&#123;(props) =&gt; ( props.match ? &lt;Page &#123;...props&#125;/&gt; : &lt;EmptyPage &#123;...props&#125;/&gt;)&#125;/&gt; 通常，我们会选择conmponent或render。children参数偶尔会用上，但通常最好在路径不匹配时不渲染任何东西。在这里我们没有任何额外的参数传递给组件，因此我们的每个&lt;Route&gt;将使用component参数。由&lt;Route&gt;渲染的元素将传递多个参数。这些将是match对象，location对象和history对象（由我们的路由创建的对象）。 路径参数有时，我们想要获得路径中的变量。例如，球员资料的路径，我们想要获得球员的号码。我们可以通过将路径参数添加到&lt;Route&gt;的 path参数 中来完成。 路径/roster/:number中的:number部分意味着/roster/后面的路径名部分将被捕获并存储为match.params.number。 例如，路径 /roster/6 将生成一个params对象：{ number: ‘6’}&lt;Player&gt;组件可以使用props.match.params对象来确定应该渲染哪个Player的数据。 Links最后，我们的应用程序需要在页面间导航。如果我们要使用锚点元素创建链接，点击它们会导致整个页面重新加载。 React Router提供了一个&lt;Link&gt;组件来防止这种情况发生。点击&lt;链接&gt;时，URL将被更新，并且呈现的内容将会更改，而不会重新加载页面。&lt;Link&gt;使用to参数来描述他们应该导航到的位置。这可以是字符串或位置对象（包含路径名，search，hash和state的组合）。当它是一个字符串时，它将被转换为location对象。 1&lt;Link to=&#123;&#123; pathname: &apos;/roster/7&apos; &#125;&#125;&gt;Player #7&lt;/Link&gt; 看的有点晕，感觉跟vue-router有比较大的区别吧。但又非常的类似。讲真的，我看了这么久，实际上依旧不会操作哎。。]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无缝轮播图]]></title>
    <url>%2F2018%2F05%2F25%2F2018_5_25_1_%E6%97%A0%E7%BC%9D%E8%BD%AE%E6%92%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[demo昨天想做一个轮播图，无缝的那种，然后就想了一种办法首先我原来的写法是把图片摆成一排，然后修改左右外边距来使图片的位置得到修改，然后给图片加上过渡，就有动画效果了，有一个缺陷就是最右边的图片回到最左边是回滚回去的，没办法做到无缝，取消过渡效果，到是可以无缝，但是没有动画效果就更加不行了 然后我今天想的一种方法是把图片全部绝对定位到一起，然后修改z-index属性来让需要使用的图片来显示在最上面，动画效果就写好左右移动，给需要的2张图片加上就可以了。简单的说就是用哪张取哪张图片来添加动画就好。 还挺简单的吧，也没有什么问题，最后就是把几个函数整合在一起缩减了一下代码量。 然后我还遇到了一个问题就是子类的上外边距影响父类的高度，。。。大概是这个意思吧，我百度了一下，得到几种解决办法我这里记录一下 1、修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用）2、为父元素添加overflow：hidden；样式即可（完美）3、为父元素或者子元素声明浮动（float：left；可用）4、为父元素添加border（border:1px solid transparent可用）5、为父元素或者子元素声明绝对定位 最后附上我的代码 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;img index=&quot;1&quot; src=&quot;img/1.jpg&quot; /&gt; &lt;img index=&quot;2&quot; src=&quot;img/2.jpg&quot; /&gt; &lt;img index=&quot;3&quot; src=&quot;img/3.jpg&quot; /&gt; &lt;img index=&quot;4&quot; src=&quot;img/4.jpg&quot; /&gt; &lt;img index=&quot;5&quot; src=&quot;img/5.jpg&quot; /&gt; &lt;div class=&quot;button_box next&quot;&gt;&lt;/div&gt; &lt;div class=&quot;button_box prev&quot;&gt;&lt;/div&gt; &lt;div class=&quot;point_box&quot;&gt; &lt;div index=&quot;1&quot; class=&quot;on&quot;&gt;&lt;/div&gt; &lt;div index=&quot;2&quot;&gt;&lt;/div&gt; &lt;div index=&quot;3&quot;&gt;&lt;/div&gt; &lt;div index=&quot;4&quot;&gt;&lt;/div&gt; &lt;div index=&quot;5&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136* &#123; margin: 0; padding: 0;&#125;body, html &#123; width: 100%; height: 100%; overflow: hidden;&#125;.box &#123; box-sizing: content-box; height: 0; width: 50%; padding-bottom: 28.125%; margin: auto; margin-top: 10%; margin-bottom: 10%; border: 1px solid #aaa; position: relative; overflow: hidden;&#125;.box img &#123; width: 100%; position: absolute; top: 0; left: 0; z-index: 1;&#125;.button_box &#123; cursor: pointer; position: absolute; top: 50%; width: 6%; height: 0; padding-bottom: 6%; margin-top: -3%; /*border: 1px solid #999;*/ background: url(../img/arrow_2.png); background-color: RGBA(0,0,0,0.3); background-size: 100% 100%; z-index: 10;&#125;.next &#123; right: 0; transform: rotate(90deg);&#125;.prev &#123; left: 0; transform: rotate(-90deg);&#125;.point_box &#123; position: absolute; bottom: 10%; left: 50%; margin-left: -10%; width: 20%; height: 0; padding-bottom: 2%; z-index: 10; /*border: 1px solid #000;*/&#125;.point_box div &#123; box-sizing: border-box; cursor: pointer; position: relative; float: left; height: 0; width: 10%; padding-bottom: 10%; margin-right: 10%; border-radius: 50%; border: 0.5px solid #aaa; background-color: #aaa; transition: 1s;&#125;.on&#123; background-color: #fff !important;&#125;.next_ani_1 &#123; animation: next_one 1s both;&#125;@keyframes next_one &#123; 0% &#123; margin-left: 0; &#125; 100% &#123; margin-left: -100%; &#125;&#125;.next_ani_2 &#123; animation: next_two 1s both;&#125;@keyframes next_two &#123; 0% &#123; margin-left: 100%; &#125; 100% &#123; margin-left: 0; &#125;&#125;.prev_ani_1 &#123; animation: prev_one 1s both;&#125;@keyframes prev_one &#123; 0% &#123; margin-left: 0; &#125; 100% &#123; margin-left: 100%; &#125;&#125;.prev_ani_2 &#123; animation: prev_two 1s both;&#125;@keyframes prev_two &#123; 0% &#123; margin-left: -100%; &#125; 100% &#123; margin-left: 0; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// 获得对应节点let img = document.getElementsByClassName(&quot;box&quot;)[0].getElementsByTagName(&quot;img&quot;)let next = document.getElementsByClassName(&quot;next&quot;)[0]let prev = document.getElementsByClassName(&quot;prev&quot;)[0]let point = document.getElementsByClassName(&quot;point_box&quot;)[0].getElementsByTagName(&quot;div&quot;)// 定义各项数据let state = 0 // 定义状态let index = 0 // 定义图片当前位置let nextIndex = 1 // 定义图片跳转的位置// 定义函数// 跳转完成后获得重新获得当前位置function getIndex () &#123; index = nextIndex&#125;// 获得跳转位置function getNextIndex (i) &#123; // 没传入参数为左右跳转，传入参数为间隔多点跳转 if (i == undefined) &#123; if (state === 0) &#123; if ((index + 1) &gt; 4) &#123; nextIndex = 0; &#125; else &#123; nextIndex = index + 1 &#125; &#125; if (state === 1) &#123; if ((index - 1) &lt; 0) &#123; nextIndex = 4; &#125; else &#123; nextIndex = index - 1 &#125; &#125; &#125; else &#123; nextIndex = i &#125;&#125;// 修改当前位置和跳转位置的图层function changeZIndex () &#123; img[index].style.zIndex = &quot;2&quot; img[nextIndex].style.zIndex = &quot;2&quot; for (let i = 0; i &lt; img.length; i++) &#123; if (i != index &amp;&amp; i != nextIndex) &#123; img[i].style.zIndex = &quot;1&quot; &#125; &#125;&#125;// 设置点跟随图片位置跳转function showPiont () &#123; for (let i = 0; i &lt; point.length; i++) &#123; if (i === index) &#123; point[i].className = &apos;on&apos; &#125; else &#123; point[i].className = &apos;&apos; &#125; &#125;&#125;// 动画函数function ani (i) &#123; img[index].className = &apos;&apos; img[nextIndex].className = &apos;&apos; getNextIndex(i) changeZIndex() if (state === 0) &#123; img[index].className = &apos;next_ani_1&apos; img[nextIndex].className = &apos;next_ani_2&apos; &#125; else &#123; img[index].className = &apos;prev_ani_1&apos; img[nextIndex].className = &apos;prev_ani_2&apos; &#125; getIndex() showPiont()&#125;// 5s自动轮播function autoPlay () &#123; state = 0 setInterval(() =&gt; &#123; ani() &#125;,5000)&#125;// 添加监听器// 右按钮添加点击事件next.addEventListener(&quot;click&quot;, () =&gt; &#123; state = 0 ani()&#125;, false)// 左按钮添加点击事件prev.addEventListener(&quot;click&quot;, () =&gt; &#123; state = 1 ani()&#125;, false)// 对应点添加点击事件for (let i = 0; i &lt; point.length; i++) &#123; point[i].addEventListener(&quot;click&quot;, () =&gt; &#123; if (i &gt; index) &#123; state = 0 &#125; else &#123; state = 1 &#125; ani(i) &#125;, false)&#125;// 初始化执行// 修改第一张图片为最上层img[0].style.zIndex = 2// 自动轮播函数执行autoPlay() 最后我知道那个摆成一排的轮播图怎么无缝了，只是我的想法太局限了，动画效果只想到了css方面，如果是js给dom添加的动画，那么你直接修改样式是不会产生动画的，所以就可以解决这个问题。]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css定义高宽成比例]]></title>
    <url>%2F2018%2F05%2F24%2F2018_5_24_2_css%E5%81%9Adiv%E9%AB%98%E5%AE%BD%E6%88%90%E6%AF%94%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[今天突然想写一个无缝的轮播图了，因为以前写的轮播图都不是无缝的，在结尾的地方会回滚回第一张图，所以就想试试除了设置外边距的方法来解决这个办法。然后我就想啊，用绝对定位来把图片都放一起，然后要用到什么图片就给什么图片添加动画就好，然后发现一个问题，因为是绝对定位，所以不能把div撑开，所以容器div就没有高度了，这就很难受了，所以就把div自己写一个高度出来，但是图片是16:9的，然后我又想写相对宽度，所以得想办法把div的高宽写成比例关系的，这就很难办了，因为高度百分比是相对父容器的高度的，宽度百分比是相对父容器的宽度的，然后把控制台拉出来，会改变宽度或高度，所以父容器的高宽比例是不定的，然后我就Bing了一下，发现一个神奇的办法 百分比来做,这里需要运用一个小技巧,padding用百分比做单位时是相对于容器的宽度来算的,所以你可以把高度设为0,内容自然溢出,设置个padding-bottom 123height: 0;width: 50%;padding-bottom: 30% 那么这个div的高宽比就是30%:50% 这个办法真的不错，我想可以记一下]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react学习]]></title>
    <url>%2F2018%2F05%2F24%2F2018_5_24_1_React%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[ReactReact 是一个用于构建用户界面的 JAVASCRIPT 库React主要用于构建UIReact 拥有较高的性能，代码逻辑非常简单 React 特点 声明式设计 −React采用声明范式，可以轻松描述应用。 高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。 灵活 −React可以与已知的库或框架很好地配合。 JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。 组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。 单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。 React 安装 React 可以直接下载使用也可以直接使用 BootCDN 的 React CDN 库123&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js&quot;&gt;&lt;/script&gt; 实例12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Hello React!&lt;/title&gt; &lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/react/15.4.2/react-dom.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.22.1/babel.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;example&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/babel&quot;&gt; ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById(&apos;example&apos;) ); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 实例中引入了三个库： react.min.js 、react-dom.min.js 和 babel.min.js react.min.js - React 的核心库 react-dom.min.js - 提供与 DOM 相关的功能 babel.min.js - Babel 可以将 ES6 代码转为 ES5 代码，这样我们就能在目前不支持 ES6 浏览器上执行 React 代码。Babel 内嵌了对 JSX 的支持。通过将 Babel 和 babel-sublime 包（package）一同使用可以让源码的语法渲染上升到一个全新的水平。 1234ReactDOM.render(&lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById(&apos;example&apos;)); 这段代码表示将一个 h1 标题，插入 id=”example” 节点中。document.getElementById(‘example’)之前有一个逗号分隔 npm安装国内使用 npm 速度很慢，你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm 使用 create-react-app 快速构建 React 开发环境 create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快速构建 React 开发环境。create-react-app 自动创建的项目是基于 Webpack + ES6 。1234$ cnpm install -g create-react-app$ create-react-app my-app$ cd my-app/$ npm start 创建react项目并启动 项目的目录结构如下：my-app/ README.md node_modules/ package.json .gitignore my-app/public/ &gt;favicon.ico index.html my-app/ src/ &gt;App.css App.js App.test.js index.css index.js logo.svg React JSX React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。我们不需要一定使用 JSX，但它有以下优点： JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。 它是类型安全的，在编译过程中就能发现错误。 使用 JSX 编写模板更加简单快速。 JSX 看起来类似 HTML1234ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById(&apos;example&apos;)); 可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。123456789ReactDOM.render( &lt;div&gt; &lt;h1&gt;菜鸟教程&lt;/h1&gt; &lt;h2&gt;欢迎学习 React&lt;/h2&gt; &lt;p data-myattribute = &quot;somevalue&quot;&gt;这是一个很不错的 JavaScript 库!&lt;/p&gt; &lt;/div&gt; , document.getElementById(&apos;example&apos;)); 我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。1234567ReactDOM.render( &lt;div&gt; &lt;h1&gt;&#123;1+1&#125;&lt;/h1&gt; &lt;/div&gt; , document.getElementById(&apos;example&apos;)); 在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.1234567ReactDOM.render( &lt;div&gt; &lt;h1&gt;&#123;i == 1 ? &apos;True!&apos; : &apos;False&apos;&#125;&lt;/h1&gt; &lt;/div&gt; , document.getElementById(&apos;example&apos;)); React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。以下实例演示了为 h1 元素添加 myStyle 内联样式：12345678var myStyle = &#123; fontSize: 100, color: &apos;#FF0000&apos;&#125;;ReactDOM.render( &lt;h1 style = &#123;myStyle&#125;&gt;菜鸟教程&lt;/h1&gt;, document.getElementById(&apos;example&apos;)); 注释需要写在花括号中1234567ReactDOM.render( &lt;div&gt; &lt;h1&gt;菜鸟教程&lt;/h1&gt; &#123;/*注释...*/&#125; &lt;/div&gt;, document.getElementById(&apos;example&apos;)); JSX 允许在模板中插入数组，数组会自动展开所有成员：12345678var arr = [ &lt;h1&gt;菜鸟教程&lt;/h1&gt;, &lt;h2&gt;学的不仅是技术，更是梦想！&lt;/h2&gt;,];ReactDOM.render( &lt;div&gt;&#123;arr&#125;&lt;/div&gt;, document.getElementById(&apos;example&apos;)); React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。12var myDivElement = &lt;div className=&quot;foo&quot; /&gt;;ReactDOM.render(myDivElement, document.getElementById(&apos;example&apos;)); 要渲染 React 组件，只需创建一个大写字母开头的本地变量。123var MyComponent = React.createClass(&#123;/*...*/&#125;);var myElement = &lt;MyComponent someProperty=&#123;true&#125; /&gt;;ReactDOM.render(myElement, document.getElementById(&apos;example&apos;)); React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。 注意：由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。 React 组件 封装一个输出 “Hello World！” 的组件，组件名为 HelloMessage：12345678910var HelloMessage = React.createClass(&#123; render: function() &#123; return &lt;h1&gt;Hello World！&lt;/h1&gt;; &#125;&#125;); ReactDOM.render( &lt;HelloMessage /&gt;, document.getElementById(&apos;example&apos;)); React.createClass 方法用于生成一个组件类 HelloMessage。 注意：原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。 如果我们需要向组件传递参数，可以使用 this.props 对象12345678910var HelloMessage = React.createClass(&#123; render: function() &#123; return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;; &#125;&#125;); ReactDOM.render( &lt;HelloMessage name=&quot;Runoob&quot; /&gt;, document.getElementById(&apos;example&apos;)); 我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。123456789101112131415161718192021222324252627282930313233var WebSite = React.createClass(&#123; render: function() &#123; return ( &lt;div&gt; &lt;Name name=&#123;this.props.name&#125; /&gt; &lt;Link site=&#123;this.props.site&#125; /&gt; &lt;/div&gt; ); &#125;&#125;); var Name = React.createClass(&#123; render: function() &#123; return ( &lt;h1&gt;&#123;this.props.name&#125;&lt;/h1&gt; ); &#125;&#125;); var Link = React.createClass(&#123; render: function() &#123; return ( &lt;a href=&#123;this.props.site&#125;&gt; &#123;this.props.site&#125; &lt;/a&gt; ); &#125;&#125;); ReactDOM.render( &lt;WebSite name=&quot;菜鸟教程&quot; site=&quot; http://www.runoob.com&quot; /&gt;, document.getElementById(&apos;example&apos;)); 总的说就是组件可以使用组件，最终把多个功能组件合为一个组件，然后输出该组件就行了 组件名不一定是用单标签，也可以是双标签1&lt;HelloMessage /&gt; == &lt;HelloMessage&gt;&lt;/HelloMessage&gt; React State(状态) React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。 React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。1234567891011121314151617181920212223&lt;script type=&quot;text/babel&quot;&gt; var LikeButton = React.createClass(&#123; getInitialState: function() &#123; return &#123;liked: false&#125;; &#125;, handleClick: function(event) &#123; this.setState(&#123;liked: !this.state.liked&#125;); &#125;, render: function() &#123; var text = this.state.liked ? &apos;喜欢&apos; : &apos;不喜欢&apos;; return ( &lt;p onClick=&#123;this.handleClick&#125;&gt; 你&lt;b&gt;&#123;text&#125;&lt;/b&gt;我。点我切换状态。 &lt;/p&gt; ); &#125; &#125;); ReactDOM.render( &lt;LikeButton /&gt;, document.getElementById(&apos;example&apos;) );&lt;/script&gt; 有点看不明白state数据在哪，可能是getInitialState方法来定义数据的类似于vue的data吧 我尝试删除掉getInitialState方法，果然报错无法获取liked，应该就是定义数据的函数 React Props state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。 你可以通过 getDefaultProps() 方法为 props 设置默认值12345678910var HelloMessage = React.createClass(&#123; getDefaultProps: function() &#123; return &#123; name: &apos;Runoob&apos; &#125;; &#125;, render: function() &#123; return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;; &#125;&#125;); 在应用中组合使用 state 和 props 。我们可以在父组件中设置 state， 并通过在子组件上使用 props 将其传递到子组件上。在 render 函数中, 我们设置 name 和 site 来获取父组件传递过来的数据。 Props 验证 Props 验证使用 propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。 以下实例创建一个 Mytitle 组件，属性 title 是必须的且是字符串，非字符串类型会自动转换为字符串 ：123456789101112131415var title = &quot;url&quot;;// var title = 123;var MyTitle = React.createClass(&#123; propTypes: &#123; title: React.PropTypes.string.isRequired, &#125;, render: function() &#123; return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;; &#125;&#125;);ReactDOM.render( &lt;MyTitle title=&#123;title&#125; /&gt;, document.getElementById(&apos;example&apos;)); 更多验证器说明如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556React.createClass(&#123; propTypes: &#123; // 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的 optionalArray: React.PropTypes.array, optionalBool: React.PropTypes.bool, optionalFunc: React.PropTypes.func, optionalNumber: React.PropTypes.number, optionalObject: React.PropTypes.object, optionalString: React.PropTypes.string, // 可以被渲染的对象 numbers, strings, elements 或 array optionalNode: React.PropTypes.node, // React 元素 optionalElement: React.PropTypes.element, // 用 JS 的 instanceof 操作符声明 prop 为类的实例。 optionalMessage: React.PropTypes.instanceOf(Message), // 用 enum 来限制 prop 只接受指定的值。 optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]), // 可以是多个对象类型中的一个 optionalUnion: React.PropTypes.oneOfType([ React.PropTypes.string, React.PropTypes.number, React.PropTypes.instanceOf(Message) ]), // 指定类型组成的数组 optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number), // 指定类型的属性构成的对象 optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number), // 特定 shape 参数的对象 optionalObjectWithShape: React.PropTypes.shape(&#123; color: React.PropTypes.string, fontSize: React.PropTypes.number &#125;), // 任意类型加上 `isRequired` 来使 prop 不可空。 requiredFunc: React.PropTypes.func.isRequired, // 不可空的任意类型 requiredAny: React.PropTypes.any.isRequired, // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。 customProp: function(props, propName, componentName) &#123; if (!/matchme/.test(props[propName])) &#123; return new Error(&apos;Validation failed!&apos;); &#125; &#125; &#125;, /* ... */&#125;); React 组件 API 设置状态：setState替换状态：replaceState设置属性：setProps替换属性：replaceProps强制更新：forceUpdate获取DOM节点：findDOMNode判断组件挂载状态：isMounted 设置状态:setState1setState(object nextState[, function callback]) nextState，将要设置的新状态，该状态会和当前的state合并callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。 不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。setState()并不会立即改变this.state，而是创建一个即将处理的state。 setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。 替换状态：replaceState1replaceState(object nextState[, function callback]) nextState，将要设置的新状态，该状态会替换当前的state。callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。 设置属性：setProps1setProps(object nextProps[, function callback]) 设置组件属性，并重新渲染组件。 props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知React.render()组件需要重新渲染，可以使用setProps()。 更新组件，我可以在节点上再次调用React.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。 说真的不太理解这个意思，react不是应该会自动重新渲染的吗？为什么要通过setProps来触发组件重新渲染 替换属性：replaceProps1replaceProps(object nextProps[, function callback]) nextProps，将要设置的新属性，该属性会替换当前的props。callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。replaceProps()方法与setProps类似，但它会删除原有 props。 强制更新：forceUpdate1forceUpdate([function callback]) callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。 forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。 forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render() 一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。 获取DOM节点：findDOMNode1DOMElement findDOMNode() 返回值：DOM元素DOMElement如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。 判断组件挂载状态：isMounted 1bool isMounted() 返回值：true或false，表示组件是否已挂载到DOM中 isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。 React 组件生命周期 Mounting：已插入真实 DOMUpdating：正在被重新渲染Unmounting：已移出真实 DOM 生命周期的方法有： componentWillMount 在渲染前调用,在客户端也在服务端。 componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。 componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。 shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。可以在你确认不需要更新组件时使用。 componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。 componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。 componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。 以下实例在 Hello 组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒重新设置组件的透明度，并重新渲染：123456789101112131415161718192021222324252627282930313233var Hello = React.createClass(&#123; getInitialState: function () &#123; return &#123; opacity: 1.0 &#125;; &#125;, componentDidMount: function () &#123; this.timer = setInterval(function () &#123; var opacity = this.state.opacity; opacity -= .05; if (opacity &lt; 0.1) &#123; opacity = 1.0; &#125; this.setState(&#123; opacity: opacity &#125;); &#125;.bind(this), 100); &#125;, render: function () &#123; return ( &lt;div style=&#123;&#123;opacity: this.state.opacity&#125;&#125;&gt; Hello &#123;this.props.name&#125; &lt;/div&gt; ); &#125;&#125;); ReactDOM.render( &lt;Hello name=&quot;world&quot;/&gt;, document.body); React AJAX React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据时可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。 差不多就是vue里的created里使用ajax然后传递数据给data最后渲染ui的意思吧 React 表单与事件 在实例中我们设置了输入框 input 值value = {this.state.data}。在输入框值发生变化时我们可以更新 state。我们可以使用 onChange 事件来监听 input 的变化，并修改 state。12345678910111213141516171819var HelloMessage = React.createClass(&#123; getInitialState: function() &#123; return &#123;value: &apos;Hello Runoob!&apos;&#125;; &#125;, handleChange: function(event) &#123; this.setState(&#123;value: event.target.value&#125;); &#125;, render: function() &#123; var value = this.state.value; return &lt;div&gt; &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt; &lt;h4&gt;&#123;value&#125;&lt;/h4&gt; &lt;/div&gt;; &#125;&#125;);ReactDOM.render( &lt;HelloMessage /&gt;, document.getElementById(&apos;example&apos;)); 差不多就是vue的v-model吧，双向绑定，感觉没有v-model方便。 在以下实例中我们将为大家演示如何在子组件上使用表单。 onChange 方法将触发 state 的更新并将更新的值传递到子组件的输入框的 value 上来重新渲染界面。 你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上123456789101112131415161718192021222324252627var Content = React.createClass(&#123; render: function() &#123; return &lt;div&gt; &lt;input type=&quot;text&quot; value=&#123;this.props.myDataProp&#125; onChange=&#123;this.props.updateStateProp&#125; /&gt; &lt;h4&gt;&#123;this.props.myDataProp&#125;&lt;/h4&gt; &lt;/div&gt;; &#125;&#125;);var HelloMessage = React.createClass(&#123; getInitialState: function() &#123; return &#123;value: &apos;Hello Runoob!&apos;&#125;; &#125;, handleChange: function(event) &#123; this.setState(&#123;value: event.target.value&#125;); &#125;, render: function() &#123; var value = this.state.value; return &lt;div&gt; &lt;Content myDataProp = &#123;value&#125; updateStateProp = &#123;this.handleChange&#125;&gt;&lt;/Content&gt; &lt;/div&gt;; &#125;&#125;);ReactDOM.render( &lt;HelloMessage /&gt;, document.getElementById(&apos;example&apos;)); 。。。当input和value显示的不在一个组件里时通过props传参数的意思吧，然后传递完成会执行函数，来重新渲染页面的意思吧 React 事件 通过 onClick 事件来修改数据就是跟html一样在标签里写事件嘛，onClick触发一个函数，函数修改state数据，需要注意的是：onClick的c要大写 当你需要从子组件中更新父组件的 state 时，你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。123456789101112131415161718192021222324252627var Content = React.createClass(&#123; render: function() &#123; return &lt;div&gt; &lt;button onClick = &#123;this.props.updateStateProp&#125;&gt;点我&lt;/button&gt; &lt;h4&gt;&#123;this.props.myDataProp&#125;&lt;/h4&gt; &lt;/div&gt; &#125;&#125;);var HelloMessage = React.createClass(&#123; getInitialState: function() &#123; return &#123;value: &apos;Hello Runoob!&apos;&#125;; &#125;, handleChange: function(event) &#123; this.setState(&#123;value: &apos;菜鸟教程&apos;&#125;) &#125;, render: function() &#123; var value = this.state.value; return &lt;div&gt; &lt;Content myDataProp = &#123;value&#125; updateStateProp = &#123;this.handleChange&#125;&gt;&lt;/Content&gt; &lt;/div&gt;; &#125;&#125;);ReactDOM.render( &lt;HelloMessage /&gt;, document.getElementById(&apos;example&apos;)); React Refs React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。 这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。 你可以通过使用 this 来获取当前 React 组件，或使用 ref 来获取组件的引用 123456789101112131415161718192021222324var MyComponent = React.createClass(&#123; handleClick: function() &#123; // 使用原生的 DOM API 获取焦点 this.refs.myInput.focus(); &#125;, render: function() &#123; // 当组件插入到 DOM 后，ref 属性添加一个组件的引用于到 this.refs return ( &lt;div&gt; &lt;input type=&quot;text&quot; ref=&quot;myInput&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;点我输入框获取焦点&quot; onClick=&#123;this.handleClick&#125; /&gt; &lt;/div&gt; ); &#125;&#125;); ReactDOM.render( &lt;MyComponent /&gt;, document.getElementById(&apos;example&apos;)); 我们也可以使用 getDOMNode()方法获取DOM元素 emmm…大概就是类似id的意思，然后通过ref来获取到该DOM react学习完毕。。。看了半天文档。。总有种似懂非懂的样子，果然还是要实战才能记住啊。跟刚开始学习vue一样，无从下手的感觉。 赶紧找点东西做做吧！]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[less学习]]></title>
    <url>%2F2018%2F05%2F17%2F2018_5_17_2_less%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。 Less 可以通过 npm 在命令行上运行；在浏览器上作为脚本文件下载；或者集成在广大的第三方工具内。 使用less要成功的使用Less，需要一个脚本的支持，这个脚本我们把他叫做less.js。 less的用法 1.变量Less中的变量充许你在样式中的某个地方对常用的值进行定义，然后应用到样式中，这样只要改变你定义的变量参数值就可以达到改变全局的效果。less 使用@进行定义12345678910111213141516171819202122232425262728293031323334/*======= Less ======*///less用@定义变量@color: #4d926f;#header &#123; color: @color;&#125;h2 &#123; color: @color;&#125; /*======= Less 编译成 css ======*/#header &#123; color: #4d926f;&#125;h2 &#123; color: #4d926f;&#125;/*======= Less ======*/ //less变量算数@nice-blue: #5b83ad;@light-blue: @nice-blue + #111;#header &#123; color: @light-blue;&#125; /*======= Less 编译成 css ======*/#header &#123;color: #6c94be;&#125;/*======= Less ======*///less变量定义变量 @color: #253636;@highlight: &quot;color&quot;;#header &#123;color: @@highlight;&#125;/*======= Less 编译成 css ======*/ #header &#123;color: #253636;&#125; 在Less中的变量实际上就是一个“常量”，因为它们只能被定义一次。优势的地方应该是修改变量可以改变所有的使用该变量的样式 2.混入——Mixins混入其实就是一种嵌套，它充许你将一个类嵌入到另一个类中，而被嵌入的这个类也称为是一个变量。换句话说，你可以用一个类定义CSS，然后把整个为当作一个变量来使用，嵌入到另一个类中当作他的属性；12345678910111213/*========== 定义一个规则，并且不设置默认参数值 ============*/.borderRadius(@radius)&#123; -moz-border-radius: @radius; -webkit-border-radius: @radius; border-radius: @radius;&#125; /*============ 应用到元素中 ============*/#header &#123; .borderRadius(10px); /*把10px传给变量@radius*/&#125;.btn &#123; .borderRadius(3px);/*把3px传给变量@radius*/&#125; Mixins还有一个重要的变量：@arguments。@arguments在Mixins中具是一个很特别的参数，当Mixins引用这个参数时，他将表示所有的变量。123456789.boxShadow(@x:0,@y:0,@blur:1px,@color:#000)&#123; -moz-box-shadow: @arguments; -webkit-box-shadow: @arguments; box-shadow: @arguments;&#125;#header &#123; .boxShadow(2px,2px,3px,#f36);&#125; 3.嵌套规则嵌套规则主要是针对一多层元素的样式规则写法，以前我们在多层元素中写样式，要么从头选下来，要么另外给这个元素加上类名或id名，但在Less中我们不需要这样操作了，我们只要使用他的嵌套规则就可以完成。写法就和html的DOM结构类似12345678910111213141516171819202122232425/*============ html ============*/&lt;div id=&quot;header&quot;&gt; &lt;h1&gt;&lt;a href=&quot;&quot;&gt;W3cplus&lt;/a&gt;&lt;/h1&gt; &lt;p&gt;记述前端那些事——引领Web前沿&lt;/p&gt;&lt;/div&gt;/*============ less ============*/#header &#123; display: inline; float: left; h1 &#123; font-size: 26px; font-weight: bold; a &#123; text-decoration: none; color: #f36; &amp;:hover &#123; text-decoration: underline; color: #63f; &#125; &#125; &#125; p &#123; font-size: 12px; &#125;&#125; 4.Functions &amp; Operations在我们平时的样式中，有很多元素的属性都具有一定的比例或倍数。那么这两个刚好可以帮我们实现这方面的功能，首先来看Operations（直译“动作”）他可以让你对元素的属性值，颜色进行四则运算：加、减、乘、除。而Function就像javascript中的function一样可以让你进行你想要的值的操作。 Operations 12345678910111213/*============ less ============*/@base: 5%;@filler: @base*2;@other: @base + @filler;#header &#123; color: #888 / 4; height: 100% / 2 + @filler; &#125;/*============ css ============*/#header &#123; color: #222222; height: 60%;&#125; FunctionsLess中还提供了一个Color Functions，他具有多种变换颜色的功能，先把颜色转换成HSL色，然后在此基础上进行操作，具体包括以下几种： 1234567891011lighten(@color, 10%); // return a color which is 10% *lighter* than @colordarken(@color, 10%); // return a color which is 10% *darker* than @colorsaturate(@color, 10%); // return a color 10% *more* saturated than @colordesaturate(@color, 10%); // return a color 10% *less* saturated than @colorfadein(@color, 10%); // return a color 10% *less* transparent than @colorfadeout(@color, 10%); // return a color 10% *more* transparent than @colorspin(@color, 10); // return a color with a 10 degree larger in hue than @colorspin(@color, -10); // return a color with a 10 degree smaller hue than @color 5.命名空间有时候你想把一些变量或mixins组织起来，并将他封装，想用的时候就把要关的一部分取出来，那么我们将在前面的mixins基础上将其功能扩展。123456789101112131415#bundle &#123; .button () &#123; display: block; border: 1px solid black; background-color: grey; &amp;:hover &#123; background-color: white &#125; &#125; .tab &#123; ... &#125; .citation &#123; ... &#125;&#125;#header a &#123; color: orange; #bundle &gt; .button;&#125; 6.变量范围Less中的变量和别的程序语言一样，他的变量也有一个范围概念，这个概念就有点像局部变量和全局变量一样，只是在Less中采取的是就近原则，换句话说，元素先找本身有没有这个变量存在，如果本身存在，就取本身中的变量，如果本身不存在，就寻找父元素，依此类推，直到寻找到相对应的变量。123456789101112@var: red;#page &#123; @var: white; #header &#123; color: @var; // white &#125;&#125;#footer &#123; color: @var; // red &#125; 7.Less的注解单行：// Hi, I’m a silent comment, I won’t show up in your CSS多行：/ Hello, I’m a CSS-style comment / 8.引入Less样式文件一定要放在less脚本文件之前]]></content>
      <tags>
        <tag>css</tag>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6学习（二）]]></title>
    <url>%2F2018%2F05%2F17%2F2018_5_17_1_ES6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[ES6新特性 1.箭头操作符（=&gt;）操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=&gt;outputs。2.类的支持ES6中添加了对类的支持，引入了class关键字。JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。1234567891011121314151617181920212223242526class Animal &#123; //ES6中新型构造器 constructor(name) &#123; this.name = name; &#125; //实例方法 sayName() &#123; console.log(&apos;My name is &apos;+this.name); &#125;&#125;//类的继承class Programmer extends Animal &#123; constructor(name) &#123; //直接调用父类构造器进行初始化 super(name); &#125; program() &#123; console.log(&quot;I&apos;m coding...&quot;); &#125;&#125;//测试我们的类var animal=new Animal(&apos;dummy&apos;),wayou=new Programmer(&apos;wayou&apos;);animal.sayName();//输出 ‘My name is dummy’wayou.sayName();//输出 ‘My name is wayou’wayou.program();//输出 ‘I&apos;m coding...’ 3.增强的对象字面量 可以在对象字面量里面定义原型 定义方法可以不用function关键字 直接调用父类方法 4.字符串模板ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible} 5.解构自动解析数组或对象中的值。变量和对应值互相匹配 6.参数默认值，不定参数，拓展参数1.默认参数值现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。2.不定参数不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过arguments变量来达到这一目的。不定参数的格式是三个句点后跟代表所有不定参数的变量名。3.拓展参数拓展参数则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。 7.let与const 关键字可以把let看成var，只是它定义的变量被限定在了特定范围内才能使用，而离开这个范围则无效。const则很直观，用来定义常量，即无法被更改值的变量。 8.for of 值遍历我们都知道for in 循环用于遍历数组，类数组或对象，ES6中新引入的for of循环功能相似，不同的是每次循环它提供的不是序号而是值。 9.模块在ES6标准中，JavaScript原生支持module了 10.Map，Set 和 WeakMap，WeakSet这些是新加的集合类型，提供了更加方便的获取属性值的方法，不用像以前一样用hasOwnProperty来检查某个属性是属于原型链上的呢还是当前对象的。同时，在进行属性值添加与获取时有专门的get，set 方法。 11.ProxiesProxy可以监听对象身上发生了什么事情，并在这些事情发生后执行一些相应的操作。一下子让我们对一个对象有了很强的追踪能力，同时在数据绑定方面也很有用处。 还有很多我看不懂的，先放一放吧。。。]]></content>
      <tags>
        <tag>ECMAScript 6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6学习]]></title>
    <url>%2F2018%2F05%2F17%2F2018_5_15_1_ES6%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[ES6学习 1.letlet与var都是变量声明的方式let与var的区别 let是只在块级作用域（花括号）起作用 let不存在变量提升“函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部” let存在暂时性死区“要块级作用域存在let命令，它所声明的变量就绑定在这个区域，不再受外部影响”（外部声明的相同变量不会影响到块级作用域内部） 12345678910&lt;script&gt;&#123; var a; &#123; console.log(a) //undefined let a = 100; console.log(a) //100 &#125;&#125;&lt;/script&gt; let不允许重复声明“同一个块级作用域内不允许声明相同变量” 2.块级作用域es5只有全局作用域和函数作用域es6多了块级作用域（let实际上为js新增了块级作用域）没有块级作用域时可能造成的不合理现象： 内层变量覆盖外层变量 计数的变量泄露为全局变量（浪费内存） 块级作用域的作用：有块级作用域不用立即执行函数了 3.const const用来声明常量 const也会产生块级作用域 const也存在暂时性死区 const也不可重复声明 const一旦声明不可改变，但是const数组和对象，可以对内部的值进行赋值。 const对象冻结 1234cosnt obj = Object.freeze(&#123; name: &quot;ZhangSan&quot;, age: 30&#125;) 彻底冻结对象12345678910var constantize = (obj) =&gt; &#123; Object.freeze(obj); Object.keys(obj).forEach( (key,value) =&gt; &#123; if(typeof obj[key] === &apos;object&apos;)&#123; constantize(obj[key]); &#125; &#125; ) &#125; 即对象的属性也是对象时重新调用函数，冻结对象的对象属性并且检查对象属性的属性 4.跨模块常量module.js12export const Name = &quot;name&quot;;export const Age = 30; use_1.js123import * as Use from &quot;./module&quot;;console.log(Use.Name);console.log(Use.Age); use_2.js12import &#123;Name&#125; as Use from &quot;./module&quot;;console.log(Use.Name); 这个跟vue里的模块一样的用法 5.全局变量的属性全局对象是最顶层的对象，浏览器环境指的是window对象，在Node.js指的是global对象。ES6规定，var命令和function命令声明的全局变量，属于全局对象的属性，let，const和class命令声明的全局变量，不属于全局对象的属性 1234var newName = &quot;name&quot;;console.log(window.newName); //namelet newName_2 = &quot;name2&quot;;console.log(window.newName_2); //undefined 6.解构赋值ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值（Destructuring） 数组结构赋值123let [x,y] = [1,2];console.log(x); // 1console.log(y); // 2 也就是说左边的变量匹配右边的值 7.不完全解构等号左边的模式，只匹配一部分的等号右边的数组 1234567let [x,y] = [1,2,3]; console.log(x); // 1 console.log(y); // 2 let [a,b,c] = [1,2]; console.log(a); // 1 console.log(b); // 2 console.log(c); // undefined 8.指定默认值 1234let [temp = &quot;string&quot;] = [];console.log(temp); // stringlet [temp2 = &quot;string&quot;] = [&quot;newString&quot;];console.log(temp2); // newString 只要某种数据解构具有lterator借口，都可以采用数组形式的结构赋值 9.对象的结构赋值对象的属性没有次序，变量必须与属性名同名才能取到正确的值 1234567let node = &#123; type: &quot;Identifier&quot;, name: &quot;foo&quot;&#125;,(&#123; type, name &#125; = node);console.log(type); // &quot;Identifier&quot;console.log(name); // &quot;foo&quot; 10.对象的结构赋值指定默认值1234var &#123;x = 3&#125; = &#123;&#125;;console.log(x); // 3var &#123;msg = &quot;you are a person&quot;&#125; = &#123;&#125;;console.log(msg);// you are a person 默认值生效的条件是，对象的属性严格等于undefined 11.现有对象的方法 1234console.log(Math.sin(Math.PI/6)); // 0.4999999let &#123;sin,cos,tan,log&#125; = Math;console.log(sin(Math.PI/6)); // 0.4999999 12.字符串的解构赋值123456const [a,b,c,d,c] = &quot;hello&quot;;console.log(a); // hconsole.log(b); // econsole.log(c); // lconsole.log(d); // lconsole.log(e); // o 类似与数组的解构赋值12345const &#123;length: len&#125; = &quot;HELLO&quot;;console.log(len); // 5const &#123;length&#125; = &quot;HELLO WORLD&quot; ;console.log(length); // 12 字符串解构赋值可以取出长度 13.函数参数的解构赋值1234function sum ([x,y]) &#123; return x+y;&#125;;console.log(sum([1,2])); // 3 函数声明时的参数和对应使用时赋予的参数是对应的，就可以解构赋值 14.函数参数的解构赋值的默认值 12345678function fun (&#123;x = 0, y = 0&#125; = &#123;&#125;)&#123; return [x,y];&#125;console.log(fun(&#123;x:100, y:200&#125;)); // [100,200]console.log(fun(&#123;x:100&#125;)); // [100,0]console.log(fun(&#123;&#125;)); // [0,0]console.log(fun()); // [0,0] 15.解构赋值的用途 交换变量的值 12345let x = 100;let y = 200;[x,y] = [y,x]; console.log(x); // 200console.log(y); // 100 函数返回多个值 12345function fun()&#123; return [1,2,3];&#125;let [x,y,z] = fun();console.log(x); // 1 函数参数的定义 123456function fun ([x,y,z])&#123; ...&#125;function fun2 (&#123;id, name, age&#125;)&#123; ...&#125; 提取json数据 1234567let jsonDate = &#123; id: &quot;007&quot;, age: &quot;30&quot;, number: &quot;200&quot;&#125;let &#123;id, age, number&#125; = jsonDate;console.log(id); // 007 遍历map解构 123456789101112131415let map = new Map();map.set(&quot;id&quot;,&quot;007&quot;);map.set(&quot;name&quot;,&quot;myName&quot;);console.log(map);console.log(typeof(map));for(let [key, value] of map)&#123; console.log(key + &quot;:&quot; + value);&#125;;for(let [key] of map) &#123; console.log(key);&#125;for(let [,value] of map) &#123; console.log(value);&#125;]]></content>
      <tags>
        <tag>ECMAScript 6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 MVVM学院 3-1]]></title>
    <url>%2F2018%2F05%2F11%2F2018_5_10_1ife_2018%20MVVM%E5%AD%A6%E9%99%A2%203-1%2F</url>
    <content type="text"><![CDATA[3.1 用递归的方式实现级联组件 demo 实现一个简单的Cascader级联组件 我的思路 首先创建一个div，用v-for循环渲染数据， 通过router-link标签在router-view标签里显示第二个组件，并传递子数组 模仿第一个组件再写2个组件，通过vue-router连接起来 遇到的问题1.vue-router嵌套问题 解决办法：在对应的路由里用children注册子路由12345678910111213141516171819&#123; path: &apos;/MVVM3_1&apos;, name: &apos;MVVM3_1&apos;, component: MVVM3_1, children: [ &#123; path: &apos;/select_2_1&apos;, name: &apos;select_2_1&apos;, component: select_2_1, children:[ &#123; path: &apos;/select_3&apos;, name: &apos;select_3&apos;, component: select_3, &#125; ] &#125;, ], &#125;, 2.vue-router数据传递后刷新后变空白数据，但还存在 解决办法：可能是传递数据是数组的原因还是什么，反正刷新后确实是变成了空白数据，最后我是把数据单独写了一个js文件，然后再导入到组件里，通过传递数组下标的方式来确定数据的 然后我还了解了一下query和paramsquery和params类似与get和post，query在地址栏有数据，params没有，但是刷新后query数据还在，params会消失。大概是这样的区别 3.我没有想到的一个问题，就是子组件把数据传回给父组件 解决办法：使用vuex来解决，现在在学习vuex 最后附上我的代码mvvm3_1.vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120&lt;template&gt;&lt;div class=&quot;mm31&quot;&gt; &lt;div v-on:click=&quot;changeArrow&quot; class=&quot;selecter&quot;&gt; &lt;span&gt;请选择&lt;/span&gt; &lt;span class=&quot;arrow&quot;&gt;&amp;lt&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;theSelect&quot;&gt; &lt;div class=&quot;theRouter&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;div class=&quot;select_1&quot;&gt; &lt;ul&gt; &lt;router-link v-for=&quot;item in items&quot; tag=&quot;li&quot; v-bind:to=&quot;&#123;name:&apos;select_2_1&apos; , query: &#123;id_1: item.id&#125;&#125;&quot;&gt; &#123;&#123;item.name&#125;&#125;&lt;span&gt;&amp;gt&lt;/span&gt; &lt;/router-link&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;data&#125; from &quot;./MVVM31/mm31_data.js&quot;export default&#123; data() &#123; return&#123; items: [], &#125; &#125;, methods: &#123; changeArrow()&#123; let x = document.getElementsByClassName(&quot;arrow&quot;)[0]; let y = document.getElementsByClassName(&quot;theSelect&quot;)[0]; let z = document.getElementsByClassName(&quot;theRouter&quot;)[0]; let u = document.getElementsByClassName(&quot;select_1&quot;)[0]; if(x.style.transform != &quot;&quot;)&#123; x.style.transform = &quot;&quot;; y.style.height = &quot;0&quot;; z.style.height = &quot;0&quot;; u.style.height = &quot;0&quot;; y.style.boxShadow = &quot;0 0 0 0 #fff&quot;; &#125; else&#123; x.style.transform = &quot;rotate(-90deg)&quot; y.style.height = &quot;300px&quot;; z.style.height = &quot;100%&quot;; u.style.height = &quot;100%&quot;; y.style.boxShadow = &quot;0 0 5px 10px #ddd&quot;; &#125; &#125;, &#125;, mounted()&#123; this.items = data(); &#125;,&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;.mm31&#123; width: 800px; height: 400px; border: 1px solid #000; text-align: left; margin: auto;&#125;.selecter&#123; margin: 10px; width: 300px; height: 30px; line-height: 30px; padding-left: 10px; border: 1px solid #ddd; user-select: none; cursor: pointer; border-radius: 4px;&#125;.arrow&#123; width: 30px; height: 30px; text-align: center; float: right; transition: 0.5s;&#125;.theSelect&#123; width: 600px; height: 0; margin: 20px; box-shadow: 0 0 0 0 #fff; position: relative; transition: 0.5s;&#125;.theRouter&#123; width: 400px; height: 0; float: right; overflow: hidden;&#125;.select_1&#123; width: 200px; height: 0; overflow: hidden; float: left; background-color: #ddd; /*border: 1px solid #ddd;*/&#125;.select_1 ul&#123; list-style-type: none;&#125;.select_1 li&#123; padding: 10px; color: #aaa; cursor: pointer;&#125;.select_1 span&#123; float: right; margin-right: 10px;&#125;&lt;/style&gt; select2_1.vue12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;template&gt; &lt;div class=&quot;select_2&quot;&gt; &lt;div class=&quot;select_2_1&quot;&gt; &lt;ul&gt; &lt;router-link v-for=&quot;item in items&quot; tag=&quot;li&quot; v-bind:to=&quot;&#123;name:&apos;select_3&apos; , query: &#123;id_1: id_1,id_2: item.id&#125;&#125;&quot;&gt; &#123;&#123;item.name&#125;&#125;&lt;span&gt;&amp;gt&lt;/span&gt; &lt;/router-link&gt; &lt;/ul&gt; &lt;!-- &lt;button v-on:click=&quot;show&quot;&gt;show&lt;/button&gt; --&gt; &lt;/div&gt; &lt;div class=&quot;select_2_1&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;data&#125; from &quot;./mm31_data.js&quot;export default&#123; data()&#123; return&#123; items: [], id_1: &quot;&quot;, &#125; &#125;, mounted()&#123; this.id_1 = this.$route.query.id_1; this.items = data()[this.id_1-1].children; &#125;, watch: &#123; $route()&#123; this.id_1 = this.$route.query.id_1; this.items = data()[this.id_1-1].children; &#125; &#125;, methods: &#123; show()&#123; console.log(this.items[this.id_1].children); &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.select_2&#123; width: 100%; height: 100%; background-color: #eee;&#125;.select_2_1&#123; width: 50%; height: 100%; float: left;&#125;.select_2 ul&#123; list-style-type: none;&#125;.select_2 li&#123; padding: 10px; color: #aaa; cursor: pointer;&#125;.select_2 span&#123; float: right; margin-right: 10px;&#125;&lt;/style&gt; select_3.vue1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;div class=&quot;select_3&quot;&gt; &lt;ul&gt; &lt;li v-for=&quot;item in items&quot;&gt; &#123;&#123;item.name&#125;&#125;&lt;span&gt;&amp;gt&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;data&#125; from &quot;./mm31_data.js&quot;export default&#123; data()&#123; return&#123; items: [], id_1: &quot;&quot;, id_2: &quot;&quot;, &#125; &#125;, mounted()&#123; this.id_1 = this.$route.query.id_1; this.id_2 = this.$route.query.id_2; this.items = data()[this.id_1-1].children[this.id_2-1].children; &#125;, watch: &#123; $route()&#123; this.id_1 = this.$route.query.id_1; this.id_2 = this.$route.query.id_2; this.items = data()[this.id_1-1].children[this.id_2-1].children; &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.select_3&#123; width: 100%; height: 100%; background-color: #fff;&#125;.select_3 ul&#123; list-style-type: none;&#125;.select_3 li&#123; padding: 10px; color: #aaa; cursor: pointer;&#125;.select_3 span&#123; float: right; margin-right: 10px;&#125;&lt;/style&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 MVVM学院 2-4]]></title>
    <url>%2F2018%2F05%2F11%2F2018_5_9_2ife_2018%20MVVM%E5%AD%A6%E9%99%A2%202-4%2F</url>
    <content type="text"><![CDATA[2.4事件处理 demo 对mvvm双向绑定以及san的事件通信有相关了解 我的思路 首先创建三个嵌套div 然后在3个div里建立input，通过v-model双向绑定数据 没有遇到问题 最后附上我的代码vue1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;template&gt;&lt;div class=&quot;mvvm24_1&quot;&gt; &lt;span&gt;我是更高层父组件:&lt;/span&gt;&lt;input v-model=&quot;far&quot; class=&quot;one&quot; type=&quot;text&quot; /&gt; &lt;div class=&quot;mvvm24_2&quot;&gt; &lt;span&gt;我是父组件:&lt;/span&gt;&lt;input v-model=&quot;far&quot; class=&quot;one&quot; type=&quot;text&quot; /&gt; &lt;input v-model=&quot;val&quot; class=&quot;three&quot; type=&quot;text&quot; /&gt; &lt;button v-on:click=&quot;submit&quot;&gt;提交给父组件&lt;/button&gt; &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; val:&quot;&quot;, far:&quot;&quot;, &#125; &#125;, methods: &#123; submit()&#123; this.far = this.val; console.log(this.val); if(this.val == &quot;&quot;)&#123; this.far = &quot;静静等待用户输入&quot;; &#125; &#125;, &#125;, watch: &#123; far()&#123; this.val = this.far; &#125;, &#125;&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;.mvvm24_1&#123; width: 400px; height: 400px; border: 1px solid #ddd; margin: auto; padding: 5px;&#125;.mvvm24_2&#123; width: 300px; height: 200px; border: 1px solid #ddd; margin: auto; padding: 5px;&#125;.one&#123; width: auto; font-size: 16px; outline: none; /*border: 1px solid #000;*/ border: 0;&#125;.three&#123; margin: 5px; padding: 2px; text-align: center; outline: none; border: 1px solid #ddd;&#125;.mvvm24_1 button&#123; margin: 5px; padding: 5px; border: 1px solid #ddd; border-radius: 4px; outline: none;&#125;.mvvm24_1 button:active&#123; border: 1px solid #36f;&#125;span&#123; /*border: 1px solid #000;*/&#125;&lt;/style&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 MVVM学院 2-3]]></title>
    <url>%2F2018%2F05%2F11%2F2018_5_9_1ife_2018%20MVVM%E5%AD%A6%E9%99%A2%202-3%2F</url>
    <content type="text"><![CDATA[2.3 样式控制 demo 点击方块，修改方块的样式的功能。 我的思路 首先创建一个div 创建2个class，设置背景颜色不同 然后通过v-bind:class=”{}”设置是否绑定样式 没有遇到问题 最后附上我的代码vue12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt;&lt;div v-on:click=&quot;change_color&quot; class=&quot;mvvm23&quot; v-bind:class=&quot;&#123;red:isRed,bule:!isRed&#125;&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; isRed: true, &#125; &#125;, methods: &#123; change_color()&#123; this.isRed = !this.isRed; &#125;, &#125;,&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;.mvvm23&#123; cursor: pointer; width: 100px; height: 100px; border: 1px solid #ddd; margin: auto;&#125;.red&#123; background-color: red;&#125;.bule&#123; background-color: blue;&#125;&lt;/style&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vuex学习]]></title>
    <url>%2F2018%2F05%2F11%2F2018_5_11_1_Vuex%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[昨天写了一个vue-router嵌套的小练习昨天练习写完后觉得应该差不多了，今天看了别人写的例子，发现少了一个步骤就是把最终结果返回到选择栏里vue-router的本质应该是自定义组件的切换嵌套后就形成了组件的嵌套也就是说父组件传递值给子组件显示子组件的数据，最后子组件把最终的数据再返回给父组件父组件传值给子组件比较简单的，但是子组件传递数据给父组件完全不知道怎么做，今天搜索了一下，好像使用bus或vuex可以实现所以决定开始学习vuex 那么什么vuex呢，vue官方的介绍是状态管理器，我原来写豆瓣电影搜索的vue应用时看到过，但是完全不知所云，所以暂时放弃了，现在再回过头来看好像又有那么一点明白。 我个人的理解是在vue项目里，使用vue-router做到切换页面，本质是切换自定义组件，然后自定义组件之间的数据又是独立的，所以想要在组件之间进行数据传递比较难实现，vuex则提供了一个全局变量，所有组件都可以获得其中的数据，从而做到组件之间的数据传递 安装vuex1npm install vuex --save 在src目录下创建store目录，其中新建index.js（这就是vuex，一个项目只有一个vuex） 通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。 vuex实例属性 State：Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。state应该就是存放唯一数据的地方 从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态 mapState 辅助函数：当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性。当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。 Getter：如果有多个组件需要用到同一属性，vuex提供了getter来过滤state，Getter 接受 state 作为其第一个参数Getter 也可以接受其他 getter 作为第二个参数mapGetters 辅助函数：mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性 我个人觉得getter就像是提供了一个过滤state的函数，供组件使用 Mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。调用 store.commit 方法来调用 mutation你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然Mutation 必须是同步函数（占时还不清楚什么是同步什么是异步）我大概看了一下同步和异步的概念，但不是很理解同步：当一个函数是同步执行时，那么当该函数被调用时不会立即返回，直到该函数所要做的事情全都做完了才返回。异步：如果一个异步函数被调用时，该函数会立即返回尽管该函数规定的操作任务还没有完成。 mutation是唯一修改state的手段 Action：Action 类似于 mutation，不同在于： Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。 Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象。Action 通过 store.dispatch 方法触发 Module：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块12345678910111213141516171819202122const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;)store.state.a // -&gt; moduleA 的状态store.state.b // -&gt; moduleB 的状态 大概就怎么多了吧，vuex，怎么说呢，感觉就是一个全局的数据存储的文件]]></content>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 MVVM学院 2-2]]></title>
    <url>%2F2018%2F05%2F08%2F2018_5_8_1_ife_2018%20MVVM%E5%AD%A6%E9%99%A2%202-2%2F</url>
    <content type="text"><![CDATA[2.2 条件和循环 demo 使用循环指令渲染表格根据不同的审核状态值，显示对应的状态文案和操作按钮点击「添加」按钮，增加一条数据项；点击「删除」按钮，删除该条数据；点击「审核」按钮，将审核状态修改为合格 我的思路 先建立一个添加button，绑定add_1函数，add_1显示新建的tr 再建立一个table，tbody里用v-for循环渲染数据 在tbody最后建一个tr，tr第一个td写input，第二个写select，第三个写添加button，绑定add_2函数，add_2把输入的数据添加到data里 最后给循环的数据的每个button绑定del函数，del函数判断按钮的值来实现修改审核状态或删除数据 我遇到的问题1 其实我在写添加最后一行tr也就是要填写数据的哪一行，我想了很多种办法，但是都不可行，第一种给数据里多添加一个read数据，然后在td里写input，用v-bind绑定readonly，但是发现去除readonly太麻烦了，而且在vue可以去除但是还是会报错，我不是很明白，而且select不知道应该怎么加。所以被排除了，第二种我是动态创建tr元素 ，在tr里添加啊3个td，最后把tr添加到tbody里，但是发现新建的元素不能继承css里样式，而且一个一个新建元素也是非常的麻烦，尤其是select，所以排除，修改这2个方法我就用了块一个晚上了。 解决办法：最后决定在循环下面加一个tr，用v-if=“show”隐藏掉，给上面的添加按钮修改this.show = true，在下面的添加按钮修改this.show = false，这样代码也短也易于修改。 2 获取select被选中的数值麻烦而且报错 解决办法：我是重新自己用ul和li模仿了一个select来显示的，而且获取值比较容易 最后附上我的代码vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243&lt;template&gt;&lt;div class=&quot;mvvm22&quot;&gt; &lt;button v-on:click=&quot;add_1&quot; class=&quot;mvvm22_button&quot;&gt;添加&lt;/button&gt; &lt;table class=&quot;mvvm22_table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;审核状态&lt;/td&gt; &lt;td&gt;操作&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;item in mvvm22&quot;&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.status&#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button v-bind:id=&quot;item.index&quot; v-on:click=&quot;shordel&quot; class=&quot;mvvm22_button&quot;&gt;&#123;&#123;item.operating&#125;&#125;&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr id=&quot;new_tr&quot; v-if=&quot;show&quot;&gt; &lt;td&gt;&lt;input type=&quot;text&quot; /&gt;&lt;/td&gt; &lt;td&gt; &lt;div v-on:click=&quot;more&quot; class=&quot;mvvm22_select&quot;&gt; &lt;span class=&quot;mvvm22_span right&quot;&gt;&amp;lt&lt;/span&gt; &lt;ul class=&quot;mvvm22_ul&quot;&gt; &lt;li id=&quot;selected&quot;&gt;&lt;/li&gt; &lt;li v-on:click=&quot;mm22_select&quot; v-for=&quot;option in select&quot;&gt;&#123;&#123;option&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/td&gt; &lt;td&gt;&lt;button v-on:click=&quot;add_2&quot; class=&quot;mvvm22_button&quot;&gt;添加&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; index: &quot;6&quot;, show: false, mvvm22:[ &#123; name: &quot;张三&quot;, status: &quot;合格&quot;, operating: &quot;删除&quot;, index: &quot;1&quot;, &#125;, &#123; name: &quot;李四&quot;, status: &quot;不合格&quot;, operating: &quot;删除&quot;, index: &quot;2&quot;, &#125;, &#123; name: &quot;王五&quot;, status: &quot;待审核&quot;, operating: &quot;审核&quot;, index: &quot;3&quot;, &#125;, &#123; name: &quot;赵六&quot;, status: &quot;待审核&quot;, operating: &quot;审核&quot;, index: &quot;4&quot;, &#125;, &#123; name: &quot;孙七&quot;, status: &quot;待审核&quot;, operating: &quot;审核&quot;, index: &quot;5&quot;, &#125;, ], select:[ &quot;合格&quot;, &quot;不合格&quot;, &quot;待审核&quot;, ], &#125; &#125;, methods:&#123; add_1()&#123; this.show = true; &#125;, add_2()&#123; let mvvm22_new = new Object(); let new_tr = document.getElementById(&quot;new_tr&quot;); let new_name = new_tr.getElementsByTagName(&quot;td&quot;)[0].getElementsByTagName(&quot;input&quot;)[0].value; let new_status = document.getElementById(&quot;selected&quot;); mvvm22_new.name = new_name; mvvm22_new.status = new_status.innerHTML; if(mvvm22_new.status == &quot;合格&quot; || mvvm22_new.status == &quot;不合格&quot;)&#123; mvvm22_new.operating = &quot;删除&quot;; &#125; else&#123; mvvm22_new.operating = &quot;审核&quot;; &#125; if(mvvm22_new.name == &quot;&quot;|| mvvm22_new.status == &quot;&quot;)&#123; alert(&quot;姓名为空或审核状态没有选择&quot;); return; &#125; mvvm22_new.index = this.index; this.mvvm22.push(mvvm22_new); this.index++; this.show = false; &#125;, more()&#123; let span = document.getElementsByClassName(&quot;mvvm22_span&quot;)[0]; if(span.getAttribute(&quot;class&quot;) == &quot;mvvm22_span right&quot;)&#123; span.setAttribute(&quot;class&quot;,&quot;mvvm22_span down&quot;); &#125; else&#123; span.setAttribute(&quot;class&quot;,&quot;mvvm22_span right&quot;); &#125; let ull = document.getElementsByClassName(&quot;mvvm22_ul&quot;)[0]; if(ull.style.height != &quot;112px&quot;)&#123; ull.style.height = &quot;112px&quot;; &#125; else&#123; ull.style.height = &quot;26px&quot;; &#125; &#125;, mm22_select(event)&#123; let _this = event.target; let select = document.getElementById(&quot;selected&quot;); select.innerHTML = _this.innerHTML; &#125;, shordel(event)&#123; let _this = event.target; if(_this.innerHTML == &quot;删除&quot;)&#123; let new_index; for(let i = 0;i &lt; this.mvvm22.length;i++)&#123; if(this.mvvm22[i].index == _this.id)&#123; this.mvvm22.splice(i,1); &#125; &#125; &#125; else&#123; let new_index; for(let i = 0;i &lt; this.mvvm22.length;i++)&#123; if(this.mvvm22[i].index == _this.id)&#123; this.mvvm22[i].status = &quot;合格&quot;; this.mvvm22[i].operating = &quot;删除&quot;; &#125; &#125; &#125; &#125;, &#125;, watch:&#123; &#125;,&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;.mvvm22&#123; margin: auto; width: 600px; border: 1px; text-align: left; padding: 10px; height: 600px;&#125;.mvvm22_button&#123; padding: 5px 15px; margin: 5px; border: 1px solid #ddd; outline: none; border-radius: 4px;&#125;.mvvm22_button:active&#123; border: 1px solid #36f;&#125;.mvvm22_table&#123; margin: 5px;&#125;.mvvm22_table,.mvvm22_table td&#123; border: 1px solid #ddd; border-collapse: collapse;&#125;.mvvm22_table thead td&#123; width: 200px; text-align: center; padding: 5px;&#125;.mvvm22_table tbody td&#123; width: 200px; text-align: center; padding: 10px;&#125;.mvvm22 input[type=&quot;text&quot;]&#123; font-size: 16px; width: 120px; border: 0; text-align: center; outline: none;&#125;.mvvm22_select&#123; cursor: pointer; font-size: 16px; border: 1px solid #ddd; width: 100px; height: 16px; margin: auto; padding: 5px; text-align: right; /*overflow: hidden;*/ position: relative;&#125;.mvvm22_span&#123; display: block; width: 10px; float: right; user-select: none;&#125;.right&#123; transform: rotate(0deg);&#125;.down&#123; transform: rotate(-90deg);&#125;.mvvm22_ul&#123; list-style-type: none; position: absolute; top: 0; left: 0; height: 26px; overflow: hidden; background-color: #fff;&#125;.mvvm22_ul li&#123; display: block; width: 80px; height: 16px; padding: 5px; border: 1px solid #ddd; border-top: 0; text-align: center;&#125;&lt;/style&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue项目-豆瓣电影搜索-完善]]></title>
    <url>%2F2018%2F05%2F05%2F2018_5_5_3_%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2vue%E9%A1%B9%E7%9B%AE%E6%94%B9%E5%96%84%2F</url>
    <content type="text"><![CDATA[上次我写了这个豆瓣电影搜索的vue项目，最后完成的时候，发现打包后放到github上，不能获取到ajax的结果，原因呢我具体也不明白，大概就是存在跨域问题，上次我搜索跨域问题怎么解决，都是说反向代理什么的，我完全一脸懵逼啊，今天得知有另一种解决跨域问题的方法jsonp，所以我就对我的代码进行了完善，功夫不负有心人，终于能在github上正常访问我这个项目了demo 首先呢说一下什么是jsonp，我只明白大概的意思就是普通的ajax跨域请求会存在跨域问题，但是通过src来获取跨域资源不存在跨域问题，就像cdn，jsonp就是类似于这种的这个方法，我就知道怎么多了我原来是用的axios来进行请求的，但是axios不支持jsonp格式，所以我就打算使用jquery的ajax来实现jsonp格式资源返回，然后遇到一个问题，就是vue项目里直接在html里引入jquery.js是不行的，解决办法如下，具体什么意思，我还不明白 1：首先安装jquery1npm install jquery --save 2：在webpack.base.conf.js里加入1var webpack = require(&quot;webpack&quot;) 3：在module.exports的最后加入1234567plugins: [ new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;), new webpack.ProvidePlugin(&#123; jQuery: &quot;jquery&quot;, $: &quot;jquery&quot; &#125;) ] 4：在main.js中引入1import $ from &apos;jquery&apos; 然后就可以正常使用jquery了 然后就是重写api.js文件（这里写了如何请求）我其实对ajax完全不会的今天也是看着文档写的，然后有了一个大概的认识最后是对Promise的认识，Promise好像在网络传输方面是个神器看来我还是需要对http这一块好好的学一下 最后附上我的ajax请求jsonp格式的函数吧1234567891011121314function fetch(url) &#123; return new Promise((resolve, reject)=&gt; &#123; $.ajax(&#123; type: &quot;GET&quot;, url: url, async: false, dataType: &quot;jsonp&quot;, success: function(msg)&#123; resolve(msg); console.log(msg); &#125; &#125;) &#125;)&#125;]]></content>
      <tags>
        <tag>vue，jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 MVVM学院 2-1]]></title>
    <url>%2F2018%2F05%2F05%2F2018_5_5_2_ife_2018_mvvm%E5%AD%A6%E9%99%A2_2.1%2F</url>
    <content type="text"><![CDATA[ife 的 mvvm使用的是百度的san框架，我不太了解，同时这个也不太火，所以我还是使用我在学习的vue框架 1.x是看文档和安装环境我就没做了 2.1 数据操作1参考下方设计图，使用san实现一个功能2输入姓名、年龄和简介信息，实时展示对应的信息3点击移除信息按钮后，姓名、年龄和简介信息置空4信息的数据类型为一个必须包含name、age和des三个属性的对象，其对应的数据类型分别为string、number和string 2.1demo 这个用vue也是非常的容易，毕竟vue使用会根据数据重新对页面进行渲染我的思路 首先写3个input，年龄的input type设置为number 然后写一个button和3个p分别实现清除功能和显示功能 然后在js里新建一个vue实例 data设置3个空值的的值 methods写一个del函数，设置3个this.var为”” v-on:click给按钮绑定方法 v-model双向绑定3个input和3个data值 在3个p里用v-html单向绑定3个data值 完成，没有什么问题 因为我是用vue-cli建立的项目的，而且我打算mvvm的任务我都单独写一个router就好，所以代码格式是.vue文件格式 mvvm2-1.vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;template&gt;&lt;div class=&quot;mvvm2-1&quot;&gt; &lt;input class=&quot;sr&quot; type=&quot;text&quot; placeholder=&quot;姓名&quot; v-model=&quot;name&quot;&gt; &lt;input class=&quot;sr&quot; type=&quot;number&quot; placeholder=&quot;年龄&quot; v-model=&quot;age&quot;&gt; &lt;input class=&quot;sr&quot; type=&quot;text&quot; placeholder=&quot;简介&quot; v-model=&quot;des&quot;&gt; &lt;br&gt; &lt;span&gt;信息：&lt;/span&gt; &lt;button v-on:click=&quot;del&quot;&gt;移除信息&lt;/button&gt; &lt;br&gt; &lt;span&gt;姓名：&lt;/span&gt;&lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;&lt;br&gt; &lt;span&gt;年龄：&lt;/span&gt;&lt;span&gt;&#123;&#123;age&#125;&#125;&lt;/span&gt;&lt;br&gt; &lt;span&gt;简介：&lt;/span&gt;&lt;span&gt;&#123;&#123;des&#125;&#125;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return&#123; name: &quot;&quot;, age: &quot;&quot;, des: &quot;&quot;, &#125; &#125;, methods:&#123; del()&#123; this.name = &quot;&quot;; this.age = &quot;&quot;; this.des = &quot;&quot;; &#125; &#125;,&#125;&lt;/script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;input::-webkit-outer-spin-button,input::-webkit-inner-spin-button &#123; -webkit-appearance: none;&#125;input[type=&quot;number&quot;]&#123; -moz-appearance: textfield;&#125;.mvvm2-1 input&#123; padding: 5px; border-radius: 4px; border: 1px solid #ddd; outline: none;&#125;.mvvm2-1 input:hover&#123; border: 1px solid #36f;&#125;.mvvm2-1 input:focus&#123; border: 1px solid #36f;&#125;.mvvm2-1 span&#123; display: inline-block; margin-top: 5px; padding: 5px;&#125;.mvvm2-1 button&#123; padding: 5px; border: 1px solid #ddd; border-radius: 4px; outline: none;&#125;.mvvm2-1 button:active&#123; border: 1px solid #36f;&#125;&lt;/style&gt;]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.7]]></title>
    <url>%2F2018%2F05%2F05%2F2018_5_5_1_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.7%2F</url>
    <content type="text"><![CDATA[No.7 - 使用 animate.css 实现一个优雅的登录框 任务七demo 任务要求：在我们提供给你的 HTML 文件基础上，适当的添加 CSS transition 和 CSS transform 属性，实现视频 demo 中的效果 这个我感觉还是比较的简单的我的思路 js给email和password的input在focus时修改文字的高度和大小 给文字添加属性transtion（过滤）和给按钮添加变大变小重复动画 下划线用伪元素：after实现 给外边框写2个伪元素，一个消失下划线，一个产生下划线 然后js给input添加blur事件 判断是否有字，有字，文字不下滑和变大，不论是否有字都消失下划线 最后写一个函数判断2个input是否都有字，来确定是否给按钮添加动画 最后在input的blur事件的最后执行判断函数 这个动画我在最后也没有遇到什么问题，唯一的问题可能是伪元素width为0时还是有一个点，解决办法是连边框也消失 最后附上我的代码htmllt;!DOCTYPE html&gt;&lt;!-- saved from url=(0048)http://jadyoap.bj.bcebos.com/ife%2Fmission7.html --&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;使用 animate.css 制作流畅交互动效&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt; &lt;style type=&quot;text/css&quot;&gt; html &#123; font-size: 62.5%; font-family: &apos;Open Sans&apos;, &apos;Helvetica Neue&apos;, Arial, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, sans-serif; &#125; body &#123; font-size: 1.8em; line-height: 3; background-color: #eeeeee; &#125; h3 &#123; font-size: 1.8em; margin-bottom: 3rem; line-height: 1.5; font-weight: 800; &#125; p &#123; margin-bottom: 1.5rem; &#125; .site-container &#123; max-width: 320px; margin: 10px auto; padding-left: 0.6em; padding-right: 0.6em; padding-top: 3%; padding-bottom: 3%; &#125; @media screen and (min-width: 60.063em) &#123; .site-container &#123; max-width: 400px; &#125; &#125; .card &#123; position: relative; overflow: hidden; background-color: white; box-shadow: 0 1px 3px 0 rgba(0,0,0,0.24), 0 1px 18px 0 rgba(0,0,0,0.12); border-radius: 2px; padding: 1em 1.5em; &#125; .form__wrapper &#123; overflow: hidden; position: relative; z-index: 1; display: inline-block; margin-bottom: 1.6rem; width: 100%; vertical-align: top; &#125; .form__wrapper__submit &#123; padding: 1.6rem 0; &#125; .form__input &#123; display: block; position: relative; margin-top: 1em; padding: 0.84em 0; width: 100%; box-sizing: border-box; color: #444; font-size: 1.6rem; outline: 0; border: none; border-bottom: solid 1px #ddd; &#125; .form__input:focus &#123; background-position: 0 0; color: #444; &#125; .form__label &#123; position: absolute; bottom: 0; left: 0; padding: 0; width: 100%; height: calc(99%); text-align: left; pointer-events: none; color: #999; &#125; .form__label__content &#123; position: absolute; &#125; .form__input:focus ~ .form__label .form__label-content, .form--filled .form__label-content &#123; &#125; .btn &#123; width: 100%; display: inline-block; padding: 0.7em 1.5em; border-radius: 2px; background-color: #2196f3; color: #fff; border: 0; outline: none; cursor: pointer; font-family: inherit; font-weight: 400; font-size: 1.6rem; box-shadow: 0 1px 3px 0 rgba(3,30,51,0.24), 0 1px 2px 0 rgba(3,30,51,0.12); transition: all 0.2s ease; &#125; .btn:focus, .btn:hover &#123; background-color: #0d8aee; &#125; &lt;/style&gt; &lt;style type=&quot;text/css&quot; abt=&quot;234&quot;&gt;&lt;/style&gt;&lt;script&gt;//console.log(&apos;a&apos;)&lt;/script&gt;&lt;script&gt;//remove 17173 video addoAdblock();function doAdblock()&#123; (function() &#123; function A() &#123;&#125; A.prototype = &#123; rules: &#123; &apos;17173_in&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_in_20150522.swf&quot; &#125;, &apos;17173_out&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_out_20150522.swf&quot; &#125;, &apos;17173_live&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_stream_20150522.swf&quot; &#125;, &apos;17173_live_out&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173.out.Live.swf&quot; &#125; &#125;, _done: null, get done() &#123; if(!this._done) &#123; this._done = new Array(); &#125; return this._done; &#125;, addAnimations: function() &#123; var style = document.createElement(&apos;style&apos;); style.type = &apos;text/css&apos;; style.innerHTML = &apos;object,embed&#123;\ -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\ -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\ -o-animation-duration:.001s;-o-animation-name:playerInserted;\ animation-duration:.001s;animation-name:playerInserted;&#125;\ @-webkit-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @-ms-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @-o-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;&apos;; document.getElementsByTagName(&apos;head&apos;)[0].appendChild(style); &#125;, animationsHandler: function(e) &#123; if(e.animationName === &apos;playerInserted&apos;) &#123; this.replace(e.target); &#125; &#125;, replace: function(elem) &#123; if(this.done.indexOf(elem) != -1) return; this.done.push(elem); var player = elem.data || elem.src; if(!player) return; var i, find, replace = false; for(i in this.rules) &#123; find = this.rules[i][&apos;find&apos;]; if(find.test(player)) &#123; replace = this.rules[i][&apos;replace&apos;]; if(&apos;function&apos; === typeof this.rules[i][&apos;preHandle&apos;]) &#123; this.rules[i][&apos;preHandle&apos;].bind(this, elem, find, replace, player)(); &#125;else&#123; this.reallyReplace.bind(this, elem, find, replace)(); &#125; break; &#125; &#125; &#125;, reallyReplace: function(elem, find, replace) &#123; elem.data &amp;&amp; (elem.data = elem.data.replace(find, replace)) || elem.src &amp;&amp; ((elem.src = elem.src.replace(find, replace)) &amp;&amp; (elem.style.display = &apos;block&apos;)); var b = elem.querySelector(&quot;param[name=&apos;movie&apos;]&quot;); this.reloadPlugin(elem); &#125;, reloadPlugin: function(elem) &#123; var nextSibling = elem.nextSibling; var parentNode = elem.parentNode; parentNode.removeChild(elem); var newElem = elem.cloneNode(true); this.done.push(newElem); if(nextSibling) &#123; parentNode.insertBefore(newElem, nextSibling); &#125; else &#123; parentNode.appendChild(newElem); &#125; &#125;, init: function() &#123; var handler = this.animationsHandler.bind(this); document.body.addEventListener(&apos;webkitAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;msAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;oAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;animationstart&apos;, handler, false); this.addAnimations(); &#125; &#125;; new A().init(); &#125;)();&#125;//remove baidu search adif(document.URL.indexOf(&apos;www.baidu.com&apos;) &gt;= 0)&#123; if(document &amp;&amp; document.getElementsByTagName &amp;&amp; document.getElementById &amp;&amp; document.body)&#123; var aa = function()&#123; var all = document.body.querySelectorAll(&quot;#content_left div,#content_left table&quot;); for(var i = 0; i &lt; all.length; i++)&#123; if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute(&quot;style&quot;)))&#123;all[i].style.display= &quot;none&quot;;all[i].style.visibility=&apos;hidden&apos;;&#125; &#125; all = document.body.querySelectorAll(&apos;.result.c-container[id=&quot;1&quot;]&apos;); //if(all.length == 1) return; for(var i = 0; i &lt; all.length; i++)&#123; if(all[i].innerHTML &amp;&amp; all[i].innerHTML.indexOf(&apos;广告&apos;)&gt;-1)&#123; all[i].style.display= &quot;none&quot;;all[i].style.visibility=&apos;hidden&apos;; &#125; &#125; &#125; aa(); document.getElementById(&apos;wrapper_wrapper&apos;).addEventListener(&apos;DOMSubtreeModified&apos;,aa) &#125;;&#125;//remove sohu video adif (document.URL.indexOf(&quot;tv.sohu.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;fee_status=true&quot;)==-1)&#123;document.cookie=&apos;fee_status=true&apos;&#125;;&#125;//remove 56.com video adif (document.URL.indexOf(&quot;56.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;fee_status=true&quot;)==-1)&#123;document.cookie=&apos;fee_status=true&apos;&#125;;&#125;//fore iqiyi enable html5 player functionif (document.URL.indexOf(&quot;iqiyi.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;player_forcedType=h5_VOD&quot;)==-1)&#123; document.cookie=&apos;player_forcedType=h5_VOD&apos; if(localStorage.reloadTime &amp;&amp; Date.now() - parseInt(localStorage.reloadTime)&lt;60000)&#123; console.log(&apos;no reload&apos;) &#125;else&#123; location.reload() localStorage.reloadTime = Date.now(); &#125; &#125;&#125;&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;object,embed&#123; -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted; -ms-animation-duration:.001s;-ms-animation-name:playerInserted; -o-animation-duration:.001s;-o-animation-name:playerInserted; animation-duration:.001s;animation-name:playerInserted;&#125; @-webkit-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @-ms-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @-o-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;&lt;/style&gt;&lt;/head&gt; &lt;body style=&quot;&quot;&gt; &lt;section class=&quot;site-container&quot;&gt; &lt;section class=&quot;card&quot;&gt; &lt;h3&gt;Login&lt;/h3&gt; &lt;form&gt; &lt;div class=&quot;form__wrapper&quot; data-wow-delay=&quot;0.5s&quot;&gt; &lt;input type=&quot;email&quot; class=&quot;form__input&quot; id=&quot;email&quot; name=&quot;email&quot;&gt; &lt;label class=&quot;form__label form__label2&quot; for=&quot;email&quot;&gt; &lt;span class=&quot;form__label__content&quot;&gt;Email&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;form__wrapper&quot; data-wow-delay=&quot;0.6s&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;form__input&quot; id=&quot;password&quot; name=&quot;password&quot;&gt; &lt;label class=&quot;form__label form__label2&quot; for=&quot;password&quot;&gt; &lt;span class=&quot;form__label__content&quot;&gt;Password&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;form__wrapper__submit pulse infinite&quot; data-wow-delay=&quot;0.7s&quot;&gt; &lt;div class=&quot;form__input__submit&quot;&gt; &lt;button type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;btn&quot;&gt;Submit&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/section&gt; &lt;/section&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758.form__label2&#123; font-size: 18px; transition: 0.5s; top: 0;&#125;.form__wrapper2::after&#123; content: &quot;&quot;; position: absolute; bottom: 0; width: 100%; height: 0; padding: 0; margin: 0; border: 1px solid #09f;&#125;.form__wrapper3::after&#123; content: &quot;&quot;; position: absolute; bottom: 0; height: 0; padding: 0; margin: 0; animation: up 0.5s both ease;&#125;@keyframes up&#123; 0%&#123; width: 100%; border: 1px solid #09f; &#125; 99%&#123; width: 0; border: 1px solid #09f; &#125; 100%&#123; width: 0; border: none; &#125;&#125;.btn2&#123; animation: big 1s infinite;&#125;@keyframes big&#123; 0%&#123; height: 40px; width: 100%; margin-left: 0; &#125; 50%&#123; height: 45px; width: 106%; margin-left: -3%; &#125; 100%&#123; height: 40px; width: 100%; margin-left: 0; &#125;&#125; js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364let label = $(&quot;.form__label&quot;);let wrapper = $(&quot;.form__wrapper&quot;);let input = $(&quot;.form__input&quot;);for(let i = 0; i &lt; 2; i++)&#123; input.eq(i).focus(function()&#123; label.eq(i).css(&quot;top&quot;,&quot;-10px&quot;); label.eq(i).css(&quot;font-size&quot;,&quot;15px&quot;); wrapper.eq(i).removeClass(&quot;form__wrapper3&quot;); wrapper.eq(i).addClass(&quot;form__wrapper2&quot;); &#125;) input.eq(i).blur(function()&#123; let x = input.eq(i).val(); if(!x)&#123; label.eq(i).css(&quot;top&quot;,&quot;&quot;); label.eq(i).css(&quot;font-size&quot;,&quot;&quot;); &#125; wrapper.eq(i).removeClass(&quot;form__wrapper2&quot;); wrapper.eq(i).addClass(&quot;form__wrapper3&quot;); big(); &#125;)&#125;let big = function()&#123; if(input.eq(0).val() != &quot;&quot; &amp;&amp; input.eq(1).val() != &quot;&quot;)&#123; $(&quot;.btn&quot;).eq(0).addClass(&quot;btn2&quot;); &#125; else&#123; $(&quot;.btn&quot;).eq(0).removeClass(&quot;btn2&quot;); &#125;&#125;// $(&quot;#email&quot;).focus(function()&#123;// label.eq(0).css(&quot;top&quot;,&quot;-10px&quot;);// label.eq(0).css(&quot;font-size&quot;,&quot;15px&quot;);// wrapper.eq(0).removeClass(&quot;form__wrapper3&quot;);// wrapper.eq(0).addClass(&quot;form__wrapper2&quot;);// &#125;);// $(&quot;#email&quot;).blur(function()&#123;// let x = input.eq(0).val();// if(!x)&#123;// label.eq(0).css(&quot;top&quot;,&quot;&quot;);// label.eq(0).css(&quot;font-size&quot;,&quot;&quot;);// &#125;// wrapper.eq(0).removeClass(&quot;form__wrapper2&quot;);// wrapper.eq(0).addClass(&quot;form__wrapper3&quot;);// &#125;);// $(&quot;#password&quot;).focus(function()&#123;// label.eq(1).css(&quot;top&quot;,&quot;-10px&quot;);// label.eq(1).css(&quot;font-size&quot;,&quot;15px&quot;);// wrapper.eq(1).removeClass(&quot;form__wrapper3&quot;);// wrapper.eq(1).addClass(&quot;form__wrapper2&quot;);// &#125;);// $(&quot;#password&quot;).blur(function()&#123;// let x = input.eq(1).val();// if(!x)&#123;// label.eq(1).css(&quot;top&quot;,&quot;&quot;);// label.eq(1).css(&quot;font-size&quot;,&quot;&quot;);// &#125;// wrapper.eq(1).removeClass(&quot;form__wrapper2&quot;);// wrapper.eq(1).addClass(&quot;form__wrapper3&quot;);// &#125;);]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.6]]></title>
    <url>%2F2018%2F05%2F05%2F2018_5_4_2_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.6%2F</url>
    <content type="text"><![CDATA[No.6 - 利用 CSS animation 制作一个炫酷的 Slider 任务六demo 任务要求：通过 CSS animation 实现一个 全屏 Image Slider 的效果 我的思路 选择5张图片 在html写一个大的div 在div底部加ul里面的li写5个li里面放5张图片 然后在大div重叠放置5张图片 给5张图片写好css动画 js给5个li添加click事件，动态删除和添加动画class 差不多就是这样 遇到的问题1首先呢是图片的重叠问题，后面的图片会覆盖前面的图片 解决办法：给图片添加z-index属性，刚打开是第二张图片，所以第二张图片的z-index为2，其他为1 2.li的hover时变亮特效 解决办法：不是hover变亮，而是不hover变暗，我是通过给li加背景颜色为黑色，然后设置opcaity为0.5，就是半透明效果，然后写hover时，opcaity=1，不透明时就感觉变亮了 3.还是图片覆盖问题，添加动画class时也看不见图片 解决办法：js给需要添加动画class的z-index设置为3，需要删除的z-index设置为1，然后还有一个问题，就是z-index都为1，背景一直都是最后的图片，所以还需要给上次z-index为3的z-index为2，这样背景就会是上次最上面的图片 4.点击同一个会一直有动画 解决办法：js设置z-index为2和需要z-index为3的图片为同一个时，直接return就好 最后附上我的代码 html12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;show&quot;&gt; &lt;img class=&quot;img1&quot; src=&quot;img/1.jpg&quot;&gt; &lt;img class=&quot;img2&quot; src=&quot;img/2.jpg&quot;&gt; &lt;img class=&quot;img3&quot; src=&quot;img/3.jpg&quot;&gt; &lt;img class=&quot;img4&quot; src=&quot;img/4.jpg&quot;&gt; &lt;img class=&quot;img5&quot; src=&quot;img/5.jpg&quot;&gt; &lt;div class=&quot;five&quot;&gt; &lt;ul class=&quot;ull&quot;&gt; &lt;li&gt;&lt;img src=&quot;img/1.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/2.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/3.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/4.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/5.jpg&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;show&quot;&gt; &lt;img class=&quot;img1&quot; src=&quot;img/1.jpg&quot;&gt; &lt;img class=&quot;img2&quot; src=&quot;img/2.jpg&quot;&gt; &lt;img class=&quot;img3&quot; src=&quot;img/3.jpg&quot;&gt; &lt;img class=&quot;img4&quot; src=&quot;img/4.jpg&quot;&gt; &lt;img class=&quot;img5&quot; src=&quot;img/5.jpg&quot;&gt; &lt;div class=&quot;five&quot;&gt; &lt;ul class=&quot;ull&quot;&gt; &lt;li&gt;&lt;img src=&quot;img/1.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/2.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/3.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/4.jpg&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;img/5.jpg&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; js1234567891011121314151617181920$(&quot;li&quot;).click(function()&#123; let x = $(this).find(&quot;img&quot;).attr(&quot;src&quot;); for(let i = 0; i &lt; 5; i++)&#123; let y = $(&quot;.show&quot;).find(&quot;img&quot;).eq(i); y.removeClass(&quot;ani&quot;+(i+1)); if(y.css(&quot;z-index&quot;) == &quot;3&quot; &amp;&amp; y.attr(&quot;src&quot;) == x)&#123; return; &#125; if(y.css(&quot;z-index&quot;) == &quot;3&quot;)&#123; y.css(&quot;z-index&quot;,&quot;2&quot;); &#125; else&#123; y.css(&quot;z-index&quot;,&quot;1&quot;); &#125; if(y.attr(&quot;src&quot;) == x)&#123; y.css(&quot;z-index&quot;,&quot;3&quot;); y.addClass(&quot;ani&quot;+(i+1)); &#125; &#125;&#125;);]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.5]]></title>
    <url>%2F2018%2F05%2F05%2F2018_5_4_1_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.5%2F</url>
    <content type="text"><![CDATA[No.5 - 纯 CSS 制作绕中轴旋转的立方体 任务五demo 任务要求：通过纯CSS 实现一个立方体翻转的效果 我的思路 用绝对定位在同一个地方设置6个正方形div 通过css3的3d效果去把上下左右后5块div进行旋转和3d位移 在以底部为圆心写无穷旋转动画效果 完成 遇到的问题1.旋转后div上的字也会翻转 解决办法：前面，上面，和下面这3块不动，左右2块都向后位移200px，再进行旋转，后面一块先向后位移200px然后原地转180度这样从6个面看过去都是正的字 2。无穷旋转动画以前面这块的中轴为中心旋转 解决办法：在这6块div外加一个div，然后前面这块向前移100px，后面那块向后移100px，其他4块以这2块为基准位移和旋转，然后把无穷旋转的动画加载在外部这个div里，这样就可以围绕底面的中心旋转了 3.看起来没有3d效果，只有2d效果 解决办法：昨天使用过的perspective属性，简单的说就是增加屏幕到元素的距离，产生距离感 4.使用perspective属性后，旋转起来，前大后小，不是立方体 解决办法：其实，这个问题是我自己还不太理解perspective属性，现在我对perspective属性的理解就是在元素的前方加了一对眼睛，然后改元素旋转的同时，眼睛也在旋转，也就是说本来是屏幕到元素的距离旋转后变成了侧面到元素产生了距离，emmm。。。，我自己也说不明白，反正就是这个意思，解决办法是在外部div的外部加个div，在最外面的这个div加上perspective属性，这样里面div旋转不会影响到外部的perspective属性。 最后贴出我的代码html12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box0&quot;&gt; &lt;div class=&quot;box front&quot;&gt;front&lt;/div&gt; &lt;div class=&quot;box back&quot;&gt;back&lt;/div&gt; &lt;div class=&quot;box left&quot;&gt;left&lt;/div&gt; &lt;div class=&quot;box right&quot;&gt;right&lt;/div&gt; &lt;div class=&quot;box top&quot;&gt;top&lt;/div&gt; &lt;div class=&quot;box bottom&quot;&gt;bottom&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071*&#123; margin: 0; padding: 0;&#125;.container&#123; height: 200px; text-align: center; margin-top: 100px; perspective: 400px;&#125;.box0&#123; transform-style: preserve-3d; position: relative; width: 200px; height: 200px; transform-origin: 50% 50%; display: inline-block; animation: ani 4s infinite linear; animation-play-state:paused;&#125;.box0:hover&#123; animation-play-state:running;&#125;@keyframes ani&#123; 0%&#123; transform: rotateY(0deg); &#125; 100%&#123; transform: rotateY(360deg); &#125;&#125;.box&#123; width: 200px; height: 200px; position: absolute; top: 0; left: 0; border: 2px solid #09f; text-align: center; line-height: 200px; font-size: 30px; color: RGBA(0,0,0,0.6);&#125;.front&#123; transform: translateZ(102px); background-color: RGBA(255,0,0,0.5);&#125;.top&#123; transform-origin: 0% 0%; transform: translateZ(102px) rotateX(270deg) ; background-color: RGBA(0,255,0,0.5);&#125;.bottom&#123; transform-origin: 0% 100%; transform:translateZ(102px) rotateX(90deg); background-color: RGBA(0,0,255,0.5);&#125;.left&#123; transform-origin: 0% 50%; transform:translateZ(-102px) rotateY(270deg); background-color: RGBA(255,255,0,0.5);&#125;.right&#123; transform-origin: 100% 0%; transform:translateZ(-102px) rotateY(90deg); background-color: RGBA(0,255,255,0.5);&#125;.back&#123; transform: translateZ(-102px) rotateY(180deg); background-color: RGBA(200,0,200,0.5);&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.4]]></title>
    <url>%2F2018%2F05%2F03%2F2018_5_3_3_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.4%2F</url>
    <content type="text"><![CDATA[No.4 - 3D 空间的卡片翻转动效 任务四demo 任务要求：通过 CSS 实现一个卡片翻转的效果。 我的思路 首先先写一个div装“卡牌” 在div里写一个div代表卡牌 在卡牌div里写2个div代表卡牌的正面和反面 在css里给卡牌div加个hover翻转180度 我觉得差不多就完成了 遇到的问题翻转前后反面一直被覆盖，所以翻转前后都是正面 解决办法这个问题我修改了很多的css样式都不行，要不是没有效果就是效果突兀，没办法过渡，最后去百度了一下发现需要加2个属性给卡牌添加transform-style: preserve-3d;使被转换的子元素保留其 3D 转换给正面div加backface-visibility:hidden;时其背面变透明缺一不可因为需要在3d状态背面透明才会生效 遇到的问题2前面确实可以实现翻转效果但是非常的平面，2d的感觉，没有3d的感觉 解决办法这个问题我以前也遇到过，当时我的解决办法是使其3d状态沿x轴转30度，但是会产生上小下大的视觉效果，但确实是有3d的效果，但肯定不是最好的然后今天看见了更好的解决办法是给卡牌添加属性perspective: 1200px;设置元素被查看位置的视图，大概是让元素和屏幕产生距离的视觉效果吧这样看起来有3d的效果 最后附上代码html1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;div class=&quot;false&quot;&gt; &lt;/div&gt; &lt;div class=&quot;true&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css123456789101112131415161718192021222324252627282930313233*&#123; margin: 0; padding: 0;&#125;.box&#123; perspective: 1200px; margin: 20px; text-align: center;&#125;.card&#123; transform-style: preserve-3d; display: inline-block; width: 250px; height: 350px; transition:transform 1s ease-in-out;&#125;.true&#123; position: absolute; width: 250px; height: 350px; background: url(../img/true.jpg); backface-visibility:hidden;&#125;.false&#123; position: absolute; width: 250px; height: 350px; transform: rotateY(180deg); background: url(../img/false.jpg);&#125;.card:hover&#123; transform: rotateY(180deg);&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.3]]></title>
    <url>%2F2018%2F05%2F03%2F2018_5_3_2_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.3%2F</url>
    <content type="text"><![CDATA[No.3 - CSS transition 和 CSS transform 配合制作动画 任务三demo任务目标：在我们提供给你的 HTML 文件基础上，适当的添加 CSS transition 和 CSS transform 属性 ，实现视频 demo 中的效果；鼠标 hover 上去的时候，出现小猫笑起来的动画； 我的思路： 给小猫的各个部位写过滤效果 给左耳旋转45度，右耳旋转45度 给猫眼变小，猫眼下部抬高，给腮红显示出来 给嘴巴添加弧度 动画的实现其实并不是很难，唯一有难度的嘴巴加弧度，我试了很久才写出来猫耳旋转用transform: rotate实现猫眼变小用transform: scale实现眼底抬高用transform: translate实现腮红显性用opacity实现最后的嘴角用border-radius实现 这些其实都只用了不多的时间 遇到的问题：然后我就遇到了问题，怎么样把这些hover一起触发。。。我想了很久没有办法用css实现，就考虑用js实现，使用js强行更改css样式，这个办法确实可以实现，但是好像超出了任务的要求范围。。。 解决办法：然后就有了2.0版本，我看了别人的代码才发现原来这么简单，我一直都考虑错了方向，因为不是要同时触发这些元素的hover，而是在最外部的hover的同时改变这些元素的样式就好了使用css的选择器可以轻松搞定 代码如下html123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371&lt;!DOCTYPE html&gt;&lt;!-- saved from url=(0055)http://jadyoap.bj.bcebos.com/ife%2FcssCatAnimation.html --&gt;&lt;html&gt;&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;纯 CSS 实现猫笑起来的动画&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body &#123; background-color: #d69a44; &#125; /* face */ .face &#123; position: absolute; left: 50%; margin-left: -175px; top:40px; width: 350px; height: 250px; border-radius: 50% 50% 30% 30%; border: 2px solid #3f200b; z-index: 10; background: #fbf8f1; overflow: hidden; &#125; /* ear */ .ear-wrap &#123; position: absolute; width: 300px; left: 50%; margin-left: -150px; /* top: 100px; */ &#125; .ear-wrap&#123; position: absolute; left: 50%; width: 300px; margin-left: -150px; margin-top: 20px; &#125; .ear &#123; position: absolute; width: 80px; height: 100px; border: 2px solid #000; background: #fbf8f1; border-radius: 100% 10% 50% 0% ; &#125; .ear-wrap .right &#123; left: auto; right: 0; border-radius: 10% 100% 0% 50%; background: #f1ac2b; &#125; /* 头发 */ .hair &#123; position: absolute; width: 120px; height: 120px; left: 50%; margin-left: 50px; margin-top: -40px; background: #f3b32e; border-radius: 50% 50% 50% 50%; &#125; /* 眼睛 */ .eye-wrap &#123; position: absolute; width: 280px; height: 70px; top: 90px; left: 50%; margin-left: -140px; overflow: hidden; &#125; .eye &#123; height: 100px; width: 100px; position: absolute; &#125; .eye-circle &#123; width: 100px; height: 80px; border: 2px solid #482507; overflow: hidden; position: absolute; background: #fff; border-radius: 50% 50% 40% 40%; box-sizing: border-box; &#125; .eye-core &#123; height: 55px; width: 46px; border-radius: 50% 50% 50% 50%; /* margin: 0 auto; */ background: #000; position: absolute; left: 50%; margin-left: -23px; &#125; .eye-bottom &#123; height: 50px; width: 100px; border-radius: 40% 40% 50% 50%; position: absolute; margin-top: 48px; border-top: 2px solid #46240b; background: #f6f7f2; &#125; .eye-wrap .right &#123; left: auto; right: 0px; &#125; .face-red &#123; position: absolute; height: 20px; width: 70px; background: red; top: 45px; /*top: 64px;*/ left: 18px; border-radius: 50% 50% 50% 50%; background: #e85a5e; opacity: 0.0; &#125; /* 鼻子 */ .nose &#123; width: 20px; height: 10px; border-bottom: 8px solid #000; border-radius: 0% 0% 50% 50%; top: 154px; left: 50%; margin-left: -10px; position: absolute; &#125; /* 嘴巴 */ .mouth-wrap &#123; position: absolute; top: 168px; width: 80px; left: 50%; margin-left: -40px; height: 20px; overflow: hidden; &#125; .mouth &#123; width: 40px; height: 40px; border-bottom: 4px solid #000; border-right: 4px solid #000; border-radius: 0% 40% 50% 20%; margin-top: -26px; position: absolute; left: 0; &#125; .mouth-wrap .right &#123; border-bottom: 4px solid #000; border-right: none; border-left: 4px solid #000; border-radius: 40% 0% 20% 50%; position: absolute; left: auto; right: 0; &#125; /*鼠标hover样式 写在这里*/ &lt;/style&gt; &lt;style type=&quot;text/css&quot; abt=&quot;234&quot;&gt;&lt;/style&gt;&lt;script&gt;//console.log(&apos;a&apos;)&lt;/script&gt;&lt;script&gt;doAdblock();function doAdblock()&#123; (function() &#123; function A() &#123;&#125; A.prototype = &#123; rules: &#123; &apos;pps_pps&apos;: &#123; &apos;find&apos;: /^http:\/\/www\.iqiyi\.com\/player\/cupid\/common\/pps_flvplay_s\.swf/, &apos;replace&apos;: &apos;http://swf.adtchrome.com/pps_20140420.swf&apos; &#125;, &apos;17173_in&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_in_20150522.swf&quot; &#125;, &apos;17173_out&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_out_20150522.swf&quot; &#125;, &apos;17173_live&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173_stream_20150522.swf&quot; &#125;, &apos;17173_live_out&apos;:&#123; &apos;find&apos;:/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/, &apos;replace&apos;:&quot;http://swf.adtchrome.com/17173.out.Live.swf&quot; &#125; &#125;, _done: null, get done() &#123; if(!this._done) &#123; this._done = new Array(); &#125; return this._done; &#125;, addAnimations: function() &#123; var style = document.createElement(&apos;style&apos;); style.type = &apos;text/css&apos;; style.innerHTML = &apos;object,embed&#123;\ -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\ -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\ -o-animation-duration:.001s;-o-animation-name:playerInserted;\ animation-duration:.001s;animation-name:playerInserted;&#125;\ @-webkit-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @-ms-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @-o-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;\ @keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;&apos;; document.getElementsByTagName(&apos;head&apos;)[0].appendChild(style); &#125;, animationsHandler: function(e) &#123; if(e.animationName === &apos;playerInserted&apos;) &#123; this.replace(e.target); &#125; &#125;, replace: function(elem) &#123; if (/http:\/\/v.youku.com\/v_show\/.*/.test(window.location.href))&#123; var tag = document.getElementById(&quot;playerBox&quot;).getAttribute(&quot;player&quot;) if (tag == &quot;adt&quot;)&#123; console.log(&quot;adt adv&quot;) return; &#125; &#125; if(this.done.indexOf(elem) != -1) return; this.done.push(elem); var player = elem.data || elem.src; if(!player) return; var i, find, replace = false; for(i in this.rules) &#123; find = this.rules[i][&apos;find&apos;]; if(find.test(player)) &#123; replace = this.rules[i][&apos;replace&apos;]; if(&apos;function&apos; === typeof this.rules[i][&apos;preHandle&apos;]) &#123; this.rules[i][&apos;preHandle&apos;].bind(this, elem, find, replace, player)(); &#125;else&#123; this.reallyReplace.bind(this, elem, find, replace)(); &#125; break; &#125; &#125; &#125;, reallyReplace: function(elem, find, replace) &#123; elem.data &amp;&amp; (elem.data = elem.data.replace(find, replace)) || elem.src &amp;&amp; ((elem.src = elem.src.replace(find, replace)) &amp;&amp; (elem.style.display = &apos;block&apos;)); var b = elem.querySelector(&quot;param[name=&apos;movie&apos;]&quot;); this.reloadPlugin(elem); &#125;, reloadPlugin: function(elem) &#123; var nextSibling = elem.nextSibling; var parentNode = elem.parentNode; parentNode.removeChild(elem); var newElem = elem.cloneNode(true); this.done.push(newElem); if(nextSibling) &#123; parentNode.insertBefore(newElem, nextSibling); &#125; else &#123; parentNode.appendChild(newElem); &#125; &#125;, init: function() &#123; var handler = this.animationsHandler.bind(this); document.body.addEventListener(&apos;webkitAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;msAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;oAnimationStart&apos;, handler, false); document.body.addEventListener(&apos;animationstart&apos;, handler, false); this.addAnimations(); &#125; &#125;; new A().init(); &#125;)();&#125;// 20140730(function cnbeta() &#123; if (document.URL.indexOf(&apos;cnbeta.com&apos;) &gt;= 0) &#123; var elms = document.body.querySelectorAll(&quot;p&gt;embed&quot;); Array.prototype.forEach.call(elms, function(elm) &#123; elm.style.marginLeft = &quot;0px&quot;; &#125;); &#125;&#125;)();//baiduif(document.URL.indexOf(&apos;www.baidu.com&apos;) &gt;= 0)&#123; if(document &amp;&amp; document.getElementsByTagName &amp;&amp; document.getElementById &amp;&amp; document.body)&#123; var aa = function()&#123; var all = document.body.querySelectorAll(&quot;#content_left div,#content_left table&quot;); for(var i = 0; i &lt; all.length; i++)&#123; if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute(&quot;style&quot;)))&#123;all[i].style.display= &quot;none&quot;;all[i].style.visibility=&apos;hidden&apos;;&#125; &#125; all = document.body.querySelectorAll(&apos;.result.c-container[id=&quot;1&quot;]&apos;); //if(all.length == 1) return; for(var i = 0; i &lt; all.length; i++)&#123; if(all[i].innerHTML &amp;&amp; all[i].innerHTML.indexOf(&apos;广告&apos;)&gt;-1)&#123; all[i].style.display= &quot;none&quot;;all[i].style.visibility=&apos;hidden&apos;; &#125; &#125; &#125; aa(); document.getElementById(&apos;wrapper_wrapper&apos;).addEventListener(&apos;DOMSubtreeModified&apos;,aa) &#125;;&#125;if (document.URL.indexOf(&quot;tv.sohu.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;fee_status=true&quot;)==-1)&#123;document.cookie=&apos;fee_status=true&apos;&#125;;&#125;if (document.URL.indexOf(&quot;56.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;fee_status=true&quot;)==-1)&#123;document.cookie=&apos;fee_status=true&apos;&#125;;&#125;if (document.URL.indexOf(&quot;iqiyi.com&quot;) &gt;= 0)&#123; if (document.cookie.indexOf(&quot;player_forcedType=h5_VOD&quot;)==-1)&#123; document.cookie=&apos;player_forcedType=h5_VOD&apos; if(localStorage.reloadTime &amp;&amp; Date.now() - parseInt(localStorage.reloadTime)&lt;60000)&#123; console.log(&apos;no reload&apos;) &#125;else&#123; location.reload() localStorage.reloadTime = Date.now(); &#125; &#125;&#125;&lt;/script&gt;&lt;style type=&quot;text/css&quot;&gt;object,embed&#123; -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted; -ms-animation-duration:.001s;-ms-animation-name:playerInserted; -o-animation-duration:.001s;-o-animation-name:playerInserted; animation-duration:.001s;animation-name:playerInserted;&#125; @-webkit-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @-ms-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @-o-keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125; @keyframes playerInserted&#123;from&#123;opacity:0.99;&#125;to&#123;opacity:1;&#125;&#125;&lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- 脸 --&gt; &lt;div class=&quot;face&quot;&gt; &lt;!-- 头发 --&gt; &lt;div class=&quot;hair&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt; &lt;!-- 眼睛 --&gt; &lt;div class=&quot;eye-wrap&quot;&gt; &lt;div class=&quot;eye left&quot;&gt; &lt;div class=&quot;eye-circle&quot;&gt; &lt;div class=&quot;eye-core eye-core2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;eye-bottom eye-bottom2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face-red face-red2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;eye right&quot;&gt; &lt;div class=&quot;eye-circle&quot;&gt; &lt;div class=&quot;eye-core eye-core2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;eye-bottom eye-bottom2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;face-red face-red2&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 鼻子 --&gt; &lt;div class=&quot;nose&quot;&gt; &lt;/div&gt; &lt;!-- 嘴巴 --&gt; &lt;div class=&quot;mouth-wrap&quot;&gt; &lt;!-- &lt;div class=&quot;mouth-top&quot;&gt;&lt;/div&gt; --&gt; &lt;div class=&quot;mouth left mouth-ani&quot;&gt;&lt;/div&gt; &lt;div class=&quot;mouth right mouth-ani&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 耳朵 --&gt; &lt;div class=&quot;ear-wrap&quot;&gt; &lt;div class=&quot;ear left ear-left&quot;&gt; &lt;/div&gt; &lt;div class=&quot;ear right ear-right&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css12345678910111213141516171819202122232425262728293031323334353637.ear-left&#123; transition: transform 2s;&#125;.face:hover+.ear-wrap .ear-left&#123; transform: rotate(-45deg);&#125;.ear-right&#123; transition: transform 2s;&#125;.face:hover+.ear-wrap .ear-right&#123; transform: rotate(45deg);&#125;.eye-bottom2&#123; transition: transform 2s;&#125;.face:hover .eye-bottom2&#123; transform: translate(0px,-20px);&#125;.eye-core2&#123; transition: transform 2s;&#125;.face:hover .eye-core2&#123; transform: scale(0.7,1);&#125;.face-red2&#123; transform: scale(0.7,1); transition: opacity 2s;&#125;.face:hover .face-red2&#123; opacity: 0.5;&#125;.mouth-ani&#123; transition: border-radius 2s;&#125;.face:hover .mouth-ani&#123; border-radius: 50%;&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife_2018 设计师学院 No.1 No.2]]></title>
    <url>%2F2018%2F05%2F03%2F2018_5_3_1_ife_2018_%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%AD%A6%E9%99%A2_No.1_No.2%2F</url>
    <content type="text"><![CDATA[No.1 - 制作一个简单的菜单动画效果任务要求：点击按钮使文字产生动画效果，再点击返回原样No.2 - 初步接触 CSS 2D 变形任务要求：通过 CSS transform 实现设计图所示效果，要求达到对设计稿的百分百的还原。 这个2个任务不是很难，我说一下思路，因为基本没有遇到什么问题 任务一demo点击按钮改变文字颜色和加上下划线（下划线要有动画效果） 首先在body里写p和button标签p里写进文字，模板就这样了 然后给p写2个类font和font2 font类写动画颜色由蓝变黑，动画保留最后结果， 给font类写一个伪元素:after，after里写下划线，并给非after写消失的动画 font2类写动画颜色由黑变蓝，动画保留最后结果， 给font2类写一个伪元素:after，after里写下划线，并给非after写出现的动画 js给按钮写改变p的class的效果 这样就完成了 代码如下html12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;span id=&quot;font&quot; class=&quot;font&quot;&gt;前端学院&lt;/span&gt; &lt;/div&gt; &lt;button class=&quot;button&quot;&gt;切换样式&lt;/button&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889*&#123; margin: 0; padding: 0;&#125;.box&#123; text-align: center; margin: 20px;&#125;.font2&#123; display: inline-block; padding: 5px; animation: change3 1s both;&#125;@keyframes change3 &#123; 0%&#123; color: #36f; &#125; 100%&#123; color: #000; &#125;&#125;.font2::after&#123; content: &quot;&quot;; position: relative; left: -10%; width: 120%; display: block; height: 5px; border-bottom: 2px solid #36f; animation: change4 1s both;&#125;@keyframes change4 &#123; 0%&#123; left: -10%; width: 120%; &#125; 100%&#123; left: 50%; width: 0; &#125;&#125;.font&#123; display: inline-block; padding: 5px; /*border-bottom: 2px solid #36f;*/ animation: change 1s both;&#125;@keyframes change &#123; 0%&#123; color: #000; &#125; 100%&#123; color: #36f; &#125;&#125;.font::after&#123; content: &quot;&quot;; position: relative; left: -10%; width: 120%; display: block; height: 5px; border-bottom: 2px solid #36f; animation: change2 1s both;&#125;@keyframes change2 &#123; 0%&#123; left: 50%; width: 0; &#125; 100%&#123; left: -10%; width: 120%; &#125;&#125;.button&#123; padding: 5px; display: block; margin: auto; border: 1px solid #ddd; background-color: #fff; border-radius: 4px; outline: none;&#125;.button:active&#123; color: #fff; background-color: #3E74B5;&#125; js123456789$(&quot;.button&quot;).click(function()&#123; let c = $(&quot;#font&quot;).attr(&quot;class&quot;); if(c == &quot;font&quot;)&#123; $(&quot;#font&quot;).attr(&quot;class&quot;,&quot;font2&quot;); &#125; else&#123; $(&quot;#font&quot;).attr(&quot;class&quot;,&quot;font&quot;); &#125;&#125;); 突然发现有个错误就是初始的颜色是黑色，使用动画效果会从蓝色变成黑色，这个是因为动画一点会播放一次，所以我决定使用css3的过渡来写动画，过渡值会在改变样式时产生动画（感觉比transtion好用啊） 修改后代码如下html12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box&quot;&gt; &lt;span id=&quot;font&quot; class=&quot;font color1&quot;&gt; 前端学院 &lt;div id=&quot;bottom&quot; class=&quot;bottom bottom1&quot;&gt;&lt;/div&gt; &lt;/span&gt; &lt;/div&gt; &lt;button class=&quot;button&quot;&gt;切换样式&lt;/button&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css123456789101112131415161718192021222324252627282930313233343536373839404142434445*&#123; margin: 0; padding: 0;&#125;.box&#123; text-align: center; margin: 20px;&#125;.bottom&#123; border-bottom: 2px solid #36f; transition: 2s; margin-top: 5px;&#125;.bottom1&#123; width: 0%; margin-left: 50%;&#125;.bottom2&#123; width: 120%; margin-left: -10%;&#125;.font&#123; display: inline-block; padding: 5px; transition: 2s;&#125;.color1&#123; color: #000;&#125;.color2&#123; color: #36f;&#125;.button&#123; padding: 5px; display: block; margin: auto; border: 1px solid #ddd; background-color: #fff; border-radius: 4px; outline: none;&#125;.button:active&#123; color: #fff; background-color: #3E74B5;&#125; js123456789101112131415$(&quot;.button&quot;).click(function()&#123; let c = $(&quot;#font&quot;).attr(&quot;class&quot;); if(c == &quot;font color1&quot;)&#123; $(&quot;#font&quot;).removeClass(&quot;color1&quot;); $(&quot;#font&quot;).addClass(&quot;color2&quot;); $(&quot;#bottom&quot;).removeClass(&quot;bottom1&quot;); $(&quot;#bottom&quot;).addClass(&quot;bottom2&quot;); &#125; else&#123; $(&quot;#font&quot;).removeClass(&quot;color2&quot;); $(&quot;#font&quot;).addClass(&quot;color1&quot;); $(&quot;#bottom&quot;).removeClass(&quot;bottom2&quot;); $(&quot;#bottom&quot;).addClass(&quot;bottom1&quot;); &#125;&#125;); 任务二demo做出设计图样式 这个就更简单了只要使用css3 的transform就可以简单解决图1skew（）翻转给定角度图2scale（）减少尺寸图3rotate（）旋转给定角度图4translate（）移动给定距离图5图1234合在一起 代码如下html12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/mycss.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;box0&quot;&gt;box0&lt;/div&gt; &lt;div class=&quot;box0 box1&quot;&gt;box1&lt;/div&gt; &lt;div class=&quot;box0 box2&quot;&gt;box2&lt;/div&gt; &lt;div class=&quot;box0 box3&quot;&gt;box3&lt;/div&gt; &lt;div class=&quot;box0 box4&quot;&gt;box4&lt;/div&gt; &lt;div class=&quot;box0 box5&quot;&gt;box5&lt;/div&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; css12345678910111213141516171819202122232425262728*&#123; margin: 0; padding: 0;&#125;.box0&#123; width: 100px; height: 100px; border: 1px solid #aaa; text-align: center; line-height: 100px; margin: 30px; float: left;&#125;.box1&#123; transform: skew(30deg,0deg);&#125;.box2&#123; transform: scale(0.5,1);&#125;.box3&#123; transform: rotate(45deg);&#125;.box4&#123; transform: translate(10px,20px);&#125;.box5&#123; transform: skew(30deg,0deg) scale(0.5,1) rotate(45deg) translate(10px,20px);&#125;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue项目-豆瓣电影搜索]]></title>
    <url>%2F2018%2F04%2F28%2F2018_4_28_1_vue%E9%A1%B9%E7%9B%AE-%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[在写了第一次Vue项目todo list之后，总算是了解了vue项目大概的编写方法然后我就在网络上找一些简单的Vue项目来做然后就看到了这个基于豆瓣API的电影搜索项目（https://github.com/superman66/vue2.x-douban）老实说，看一起来并不难，就是一个主页面，一个电影搜索结果页面，一个更多页面以及一个电影详情页面。但是实际上并不简单吧，只能这样说了，因为在完成这个项目期间我修改了错误的次数可能不下100次了，这个项目里还有我完全没有学习过的http知识，虽然就是一个axios的get请求。 接下来就介绍一下项目吧。项目要求：使用vue，vue-router，vue-infinite-scroll，axios知识编写基于豆瓣API的电影搜索应用，包含主页面，电影搜索结果页面，更多页面以及电影详情页面。 原项目还包含vuex的使用，但是因为我完全不知道vuex是使用方法，所以就去掉了，感觉没有太大的影响，然后就是我在原项目的基础上修改了部分样式以及一个bug吧。 代码就不贴上来了，比较的多，可以访问我的github查看代码（https://github.com/FrattiNor/vue-project/tree/master/douban-movie-api）因为不明白代理和反向代理以及http方面的知识，build完项目存在跨域问题，所以不能在线访问，想要查看效果请：clone代码到本地bash herenpm installnpm run dev来运行 因为遇到的问题太多，然后又没记住几个，遇到的问题就不多说了我就讲一下收获吧 1.vue编写html是完全的模块化的，一个vue文件就是一个木模块2.模块的使用依赖export和require（import）3.要在一个模块引入另一个模块要import另一个模块以及在export里用components声明组件4.使用路由要在route.js中引入模块并申明组件，path，name5.路由显示在router-view标签中6.路由跳转可以携带参数，使用query来传递参数，this.$route.query来获取参数7.import时的路径里有个“@/”指的是”src/“，”../“代表返回上一级 最后讲一下原项目的一个bug吧，原项目在第二次搜索电影也就是在搜索结果页面搜索电影时不能返回结果。原因是：原项目把返回数据的函数写在mounted里，只会执行一次，但是重新搜索后把参数再传给搜索结果页面，由于router-view的页面没有改动，所以不会再次执行mounted里的函数解决办法：在watch里观察传递的参数是否改变来执行函数12345watch: &#123; &quot;$route&quot;(to, from)&#123; xxx &#125;.&#125;, to.query是新的参数from.query是旧的参数 最后的总结：这次vue项目给我最大的收获肯定是正真对模块化的了解吧，模块化真的给人一种层次分明的感觉。]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue-router</tag>
        <tag>vue-infinite-scroll</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue项目入门和vue-router部分学习]]></title>
    <url>%2F2018%2F04%2F25%2F2018_4_25_1_vue%E9%A1%B9%E7%9B%AE%E5%85%A5%E9%97%A8%E5%92%8Cvue-router%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前段时间看的vue.js，然后也写了一个小页面来练练手，总的来说不是很难，再然后，我就看到了vue项目，接触到了vue-cli，webpack等等的，于是乎就看了很久的相关文档，说真的看文档真的看的我有点难受了，看文档确实是知道了具体的代码怎么实现等等的，虽然不能全部记住，但也能记个大概了。今天又看了vuex，vue-router，axios的相关文档，但都没怎么仔细看，可能最近看文档看的有点烦了吧，看不太进去，也不想把看的都写一遍下来了。 关于vuex官方文档是这样介绍的： Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。 说真的完全完全完全看不懂是什么，后面讲的也不明觉厉，可能我还没到可以使用它的时候吧，跳过了。 关于vue-router前面学习vue的时候在最后有接触过，明白大概的意思，就是实现单页面的跳转效果，不是跳转页面，而是重新渲染页面来实现的大概有那么6个步骤：1 创建组件1234567891011var Home = Vue.extend(&#123; template: &apos;&lt;div&gt;&lt;h1&gt;Home&lt;/h1&gt;&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;&lt;/div&gt;&apos;, data: function() &#123; return &#123; msg: &apos;Hello, vue router!&apos; &#125; &#125;&#125;)var About = Vue.extend(&#123; template: &apos;&lt;div&gt;&lt;h1&gt;About&lt;/h1&gt;&lt;p&gt;This is the tutorial about vue-router.&lt;/p&gt;&lt;/div&gt;&apos;&#125;) 2 创建Router1var router = new VueRouter() 调用构造器VueRouter，创建一个路由器实例router。 3 映射路由1234router.map(&#123; &apos;/home&apos;: &#123; component: Home &#125;, &apos;/about&apos;: &#123; component: About &#125;&#125;) 4 使用v-link指令在a元素上使用v-link指令跳转到指定路径。1234&lt;div class=&quot;list-group&quot;&gt; &lt;a class=&quot;list-group-item&quot; v-link=&quot;&#123; path: &apos;/home&apos;&#125;&quot;&gt;Home&lt;/a&gt; &lt;a class=&quot;list-group-item&quot; v-link=&quot;&#123; path: &apos;/about&apos;&#125;&quot;&gt;About&lt;/a&gt;&lt;/div&gt; 5 使用标签在页面上使用&lt;router-view&gt;&lt;/router-view&gt;标签，它用于渲染匹配的组件。 6 启动路由12var App = Vue.extend(&#123;&#125;)router.start(App, &apos;#app&apos;) 编写单页面的步骤 router.redirect123router.redirect(&#123; &apos;/&apos;: &apos;/home&apos;&#125;) router.redirect方法用于为路由器定义全局的重定向规则，全局的重定向会在匹配当前路径之前执行。 后面还有 嵌套路由，具名路径 等等，我没全部看，就不列举了 关于axios特色： 浏览器端发起XMLHttpRequests请求node端发起http请求支持Promise API拦截请求和返回转化请求和返回（数据）取消请求自动转化json数据客户端支持抵御XSRF（跨站请求伪造） 具体的我也没仔细看，大概就是发起http请求以及获取结果吧。。。 说真的看了这么多，都不知道应该写在哪，vue-cli创建的项目令我无从下手，不过今天总算是找到了最最基础的教程了，才知道原来是在app.vue文件下操作的。。。这是一个慕课网的视频，讲的很基础，我也不知道讲的好不好，反正至少我知道vue的项目应该从哪下手了，也算是非常的有收获吧视频网址：http://www.imooc.com/learn/694然后我跟着做了一个todo list的小项目（可能也说不上是个项目吧。。）怎么做的我就不多讲了，视频里讲的还算挺清楚的了最后附上todolist的内容：app.vue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt; &lt;input type=&quot;text&quot; v-model=&quot;newItem&quot; v-on:keyup.enter=&quot;addNew&quot; /&gt; &lt;li v-for=&quot;item in items&quot; v-bind:class=&quot;&#123;finished:item.isFinished&#125;&quot;&gt;&#123;&#123;item.label&#125;&#125;&lt;/li&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import store from &quot;./storage.js&quot;export default &#123; data: function() &#123; return&#123; title: &quot;this is a todo list&quot;, items: store.fetch(), newItem: &quot;&quot; &#125; &#125;, methods: &#123; addNew: function()&#123; this.items.push(&#123; label: this.newItem, isFinished: false &#125;); this.newItem = &quot;&quot;; &#125; &#125;, watch: &#123; items: &#123; handler:function(val,oldval)&#123; store.save(this.items) &#125;, deep: true &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.finished&#123; color: red;&#125;#app &#123; font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px;&#125;&lt;/style&gt; storage.js1234567891011121314151617181920212223242526272829// const STORAGE_KEY = &quot;todo-vue.js&quot;// export default &#123;// fetch() &#123;// return JOSN.parse(window.localStorage.getItem(STORAGE_KEY) || &quot;[]&quot;)// &#125;,// save(items) &#123;// window.localStorage.setItem(STORAGE_KEY,JSON.stringify(items))// &#125;// &#125;const STORAGE_KEY=&quot;todos-vuejs&quot;export default&#123;fetch()&#123;return JSON.parse(window.localStorage.getItem(STORAGE_KEY)||&apos;[]&apos;)&#125;,save (items)&#123;window.localStorage.setItem(STORAGE_KEY,JSON.stringify( items)) &#125;&#125; 也可以在我的github上查看https://github.com/FrattiNor/vue-project/tree/master/my-first-vue-project]]></content>
      <tags>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CommonJS学习]]></title>
    <url>%2F2018%2F04%2F24%2F2018_4_24_2_CommonJS%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[今天学习了webpack的使用，虽然一知半解，但也还算有所收获，同时了解到webpack是以commonjs的形式来书写脚本的，然后node应用也采用commonjs模块规范，所以就来学习一下commonjs 1.概述每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。如果想在多个文件分享变量，必须定义为global对象的属性。1global.warning = true; 上面代码的warning变量，可以被所有文件读取。当然，这样写法是不推荐的。 CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。12var x = 5;module.exports.x = x; 上面代码通过module.exports输出变量xrequire方法用于加载模块。12var example = require(&apos;./example.js&apos;);console.log(example.x); // 5 CommonJS模块的特点如下: 所有代码都运行在模块作用域，不会污染全局作用域。 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。 模块加载的顺序，按照其在代码中出现的顺序。 2.module对象Node内部提供一个Module构建函数，所有模块都是Module的实例每个模块内部，都有一个Module对象，代表当前模块，有以下属性： module.id 模块的识别符，通常是带有绝对路径的模块文件名。module.filename 模块的文件名，带有绝对路径。module.loaded 返回一个布尔值，表示模块是否已经完成加载。module.parent 返回一个对象，表示调用该模块的模块。module.children 返回一个数组，表示该模块要用到的其他模块。module.exports 表示模块对外输出的值。 下面是一个示例文件，最后一行输出module变量。1234// example.jsvar jquery = require(&apos;jquery&apos;);exports.$ = jquery;console.log(module); 执行这个文件，命令行会输出如下信息。12345678910111213141516171819&#123; id: &apos;.&apos;, exports: &#123; &apos;$&apos;: [Function] &#125;, parent: null, filename: &apos;/path/to/example.js&apos;, loaded: false, children: [ &#123; id: &apos;/path/to/node_modules/jquery/dist/jquery.js&apos;, exports: [Function], parent: [Circular], filename: &apos;/path/to/node_modules/jquery/dist/jquery.js&apos;, loaded: true, children: [], paths: [Object] &#125; ], paths: [ &apos;/home/user/deleted/node_modules&apos;, &apos;/home/user/node_modules&apos;, &apos;/home/node_modules&apos;, &apos;/node_modules&apos; ]&#125; 如果在命令行下调用某个模块，比如node something.js，那么module.parent就是null。如果是在脚本之中调用，比如require(‘./something.js’)，那么module.parent就是调用它的模块。利用这一点，可以判断当前模块是否为入口脚本。123456789if (!module.parent) &#123; // ran with `node something.js` app.listen(8088, function() &#123; console.log(&apos;app listening on port 8088&apos;); &#125;)&#125; else &#123; // used with `require(&apos;/.something.js&apos;)` module.exports = app;&#125; 2.1 module.exports属性module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。123456var EventEmitter = require(&apos;events&apos;).EventEmitter;module.exports = new EventEmitter();setTimeout(function() &#123; module.exports.emit(&apos;ready&apos;);&#125;, 1000); 上面模块会在加载后1秒后，发出ready事件。其他文件监听该事件，可以写成下面这样。1234var a = require(&apos;./a&apos;);a.on(&apos;ready&apos;, function() &#123; console.log(&apos;module a is ready&apos;);&#125;); 2.2 exports变量为了方便，Node为每个模块提供一个exports变量，指向module.exports。造成的结果是，在对外输出模块接口时，可以向exports对象添加方法。123exports.area = function (r) &#123; return Math.PI * r * r;&#125;; 注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系。12345exports.hello = function() &#123; return &apos;hello&apos;;&#125;;module.exports = &apos;Hello world&apos;; 上面代码中，hello函数是无法对外输出的，因为module.exports被重新赋值了。 这意味着，如果一个模块的对外接口，就是一个单一的值，不能使用exports输出，只能使用module.exports输出。 如果你觉得，exports与module.exports之间的区别很难分清，一个简单的处理方法，就是放弃使用exports，只使用module.exports。 3.AMD规范与CommonJS规范的兼容性CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。 amd规范还没看过，再说吧 AMD规范使用define方法定义模块AMD规范允许输出的模块兼容CommonJS规范，这时define方法需要写成下面这样：123456789101112define(function (require, exports, module)&#123; var someModule = require(&quot;someModule&quot;); var anotherModule = require(&quot;anotherModule&quot;); someModule.doTehAwesome(); anotherModule.doMoarAwesome(); exports.asplode = function ()&#123; someModule.doTehAwesome(); anotherModule.doMoarAwesome(); &#125;;&#125;); 4.require命令4.1 基本用法Node使用CommonJS模块规范，内置的require命令用于加载模块文件。require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。如果模块输出的是一个函数，那就不能定义在exports对象上面，而要定义在module.exports变量上面。123456//example2.jsmodule.exports = function () &#123; console.log(&quot;hello world&quot;)&#125;require(&apos;./example2.js&apos;)() 上面代码中，require命令调用自身，等于是执行module.exports，因此会输出 hello world。 4.2 加载规则require命令用于加载文件，后缀名默认为.js。123var foo = require(&apos;foo&apos;);// 等同于var foo = require(&apos;foo.js&apos;); 根据参数的不同格式，require命令去不同路径寻找模块文件。 1）如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文件。比如，require(‘/home/marco/foo.js’)将加载/home/marco/foo.js。 （2）如果参数字符串以“./”开头，则表示加载的是一个位于相对路径（跟当前执行脚本的位置相比）的模块文件。比如，require(‘./circle’)将加载当前脚本同一目录的circle.js。 （3）如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块（位于Node的系统安装目录中），或者一个位于各级node_modules目录的已安装模块（全局安装或局部安装）。举例来说，脚本/home/user/projects/foo.js执行了require(‘bar.js’)命令，Node会依次搜索以下文件。 /usr/local/lib/node/bar.js/home/user/projects/node_modules/bar.js/home/user/node_modules/bar.js/home/node_modules/bar.js/node_modules/bar.js （4）如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require(‘example-module/path/to/file’)，则将先找到example-module的位置，然后再以它为参数，找到后续路径。 （5）如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索。.js件会以文本格式的JavaScript脚本文件解析，.json文件会以JSON格式的文本文件解析，.node文件会以编译后的二进制文件解析。 （6）如果想得到require命令加载的确切文件名，使用require.resolve()方法。 4.3 目录的加载规则通常，我们会把相关的文件会放在一个目录里面，便于组织。这时，最好为该目录设置一个入口文件，让require方法可以通过这个入口文件，加载整个目录。 在目录中放置一个package.json文件，并且将入口文件写入main字段。下面是一个例子。123// package.json&#123; &quot;name&quot; : &quot;some-library&quot;, &quot;main&quot; : &quot;./lib/some-library.js&quot; &#125; require发现参数字符串指向一个目录以后，会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。如果package.json文件没有main字段，或者根本就没有package.json文件，则会加载该目录下的index.js文件或index.node文件。 4,4 模块的缓存第一次加载某个模块时，Node会缓存该模块。以后再加载该模块，就直接从缓存取出该模块的module.exports属性。如果想要多次执行某个模块，可以让该模块输出一个函数，然后每次require这个模块的时候，重新执行一下输出的函数。所有缓存的模块保存在require.cache之中，如果想删除模块的缓存，可以像下面这样写。1234567// 删除指定模块的缓存delete require.cache[moduleName];// 删除所有模块的缓存Object.keys(require.cache).forEach(function(key) &#123; delete require.cache[key];&#125;) 注意，缓存是根据绝对路径识别模块的，如果同样的模块名，但是保存在不同的路径，require命令还是会重新加载该模块。 4.5 环境变量NODE_PATHNode执行一个脚本时，会先查看环境变量NODE_PATH。它是一组以冒号分隔的绝对路径。在其他位置找不到指定模块时，Node会去这些路径查找。 可以将NODE_PATH添加到.bashrc。1export NODE_PATH=&quot;/usr/local/lib/node&quot; 所以，如果遇到复杂的相对路径，比如下面这样。1var myModule = require(&apos;../../../../lib/myModule&apos;); 有两种解决方法，一是将该文件加入node_modules目录，二是修改NODE_PATH环境变量，package.json文件可以采用下面的写法。1234567891011&#123; &quot;name&quot;: &quot;node_path&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;NODE_PATH=lib node index.js&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;&#125; NODE_PATH是历史遗留下来的一个路径解决方案，通常不应该使用，而应该使用node_modules目录机制。 4.6 模块的循环加载如果发生模块的循环加载，即A加载B，B又加载A，则B将加载A的不完整版本12345678910111213// a.jsexports.x = &apos;a1&apos;;console.log(&apos;a.js &apos;, require(&apos;./b.js&apos;).x);exports.x = &apos;a2&apos;;// b.jsexports.x = &apos;b1&apos;;console.log(&apos;b.js &apos;, require(&apos;./a.js&apos;).x);exports.x = &apos;b2&apos;;// main.jsconsole.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x); 上面代码是三个JavaScript文件。其中，a.js加载了b.js，而b.js又加载a.js。这时，Node返回a.js的不完整版本，所以执行结果如下。12345$ node main.jsb.js a1a.js b2main.js a2main.js b2 修改main.js，再次加载a.js和b.js。12345// main.jsconsole.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x);console.log(&apos;main.js &apos;, require(&apos;./a.js&apos;).x);console.log(&apos;main.js &apos;, require(&apos;./b.js&apos;).x); 执行上面代码，结果如下。1234567$ node main.jsb.js a1a.js b2main.js a2main.js b2main.js a2main.js b2 上面代码中，第二次加载a.js和b.js时，会直接从缓存读取exports属性，所以a.js和b.js内部的console.log语句都不会执行了。 4.7 require.main require方法有一个main属性，可以用来判断模块是直接执行，还是被调用执行。 直接执行的时候（node module.js），require.main属性指向模块本身。12require.main === module// true 调用执行的时候（通过require加载该脚本执行），上面的表达式返回false。 5.模块的加载机制CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个例子。 下面是一个模块文件lib.js。123456789// lib.jsvar counter = 3;function incCounter() &#123; counter++;&#125;module.exports = &#123; counter: counter, incCounter: incCounter,&#125;; 上面代码输出内部变量counter和改写这个变量的内部方法incCounter。 然后，加载上面的模块。1234567// main.jsvar counter = require(&apos;./lib&apos;).counter;var incCounter = require(&apos;./lib&apos;).incCounter;console.log(counter); // 3incCounter();console.log(counter); // 3 上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。 5.1 require的内部处理流程require命令是CommonJS规范之中，用来加载其他模块的命令。它其实不是一个全局命令，而是指向当前模块的module.require命令，而后者又调用Node的内部命令Module._load。123456789Module._load = function(request, parent, isMain) &#123; // 1. 检查 Module._cache，是否缓存之中有指定模块 // 2. 如果缓存之中没有，就创建一个新的Module实例 // 3. 将它保存到缓存 // 4. 使用 module.load() 加载指定的模块文件， // 读取文件内容之后，使用 module.compile() 执行文件代码 // 5. 如果加载/解析过程报错，就从缓存删除该模块 // 6. 返回该模块的 module.exports&#125;; 上面的第4步，采用module.compile()执行指定模块的脚本，逻辑如下。123456Module.prototype._compile = function(content, filename) &#123; // 1. 生成一个require函数，指向module.require // 2. 加载其他辅助方法到require // 3. 将文件内容放到一个函数之中，该函数可调用 require // 4. 执行该函数&#125;; 上面的第1步和第2步，require函数及其辅助方法主要如下。 require(): 加载外部模块require.resolve()：将模块名解析到一个绝对路径require.main：指向主模块require.cache：指向所有缓存的模块require.extensions：根据文件的后缀名，调用不同的执行函数 一旦require函数准备完毕，整个所要加载的脚本内容，就被放到一个新的函数之中，这样可以避免污染全局环境。该函数的参数包括require、module、exports，以及其他一些参数。123(function (exports, require, module, __filename, __dirname) &#123; // YOUR CODE INJECTED HERE!&#125;); Module._compile方法是同步执行的，所以Module._load要等它执行完成，才会向用户返回module.exports的值。 emmm…，总结一下吧：看了这么长的一篇关于CommonJS的规范，大概有点清楚了。 1.总之就是每个文件就一个模块，模块之间互不干扰，模块之间调用需要使用到exports和require，有点像是js里的函数，exports就像函数的返回值，require就像一个函数调用外部的函数，获得外部函数的返回值，区别也有，模块调用并改变另一个模块的值时，并不会干扰到另一个模块的内部。使用模块的好处是不会污染全局环境（emmm，并不知道什么意思）。然后就是每个模块都有一个Module对象，exports和require是Module对象的属性。 2.exports用于当前模块对外输出的接口，exports和module.exports不同，exports指向module.exports。 3.require用于读入并执行一个JavaScript文件，然后返回该模块的exports对象。require加载规则，以“/”开头是绝对路径，以“./”开头是相对路径，不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块。require目录加载规则，会自动查看该目录的package.json文件，然后加载main字段指定的入口文件。require加载的exports存在于缓存里，需要重新加载可以清除缓存，循环require会导致后加载会加载不完整模块，最后就是require加载机制，模块内部的变化就影响不到这个值本身。 差不多就这些吧。。。还挺乱的。]]></content>
      <tags>
        <tag>node</tag>
        <tag>commonjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack和vue-cli学习]]></title>
    <url>%2F2018%2F04%2F24%2F2018_4_24_1_vue-cli%E5%92%8Cwebpack%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前几天学习了Vue.js，使用起来确实是非常的便捷，不需要自己手动的去操作DOM，只需要改变数据就能实现DOM的改变。然后我搜了一下Vue相关的项目，本来是打算自己先做着试试的，结果发现完全看不懂啊，一个完整的项目涉及到的东西还是非常的多。 首先我看到的就是Vue-cli，这是一个vue官方提供的vue项目的脚手架工具，emmm。。。，看不懂，脚手架工具是个什么玩意，然后我就去搜了一下vue-cli相关的知识，大概的意思应该是快捷的创建好一个vue项目模板，差不多就是一个样本，你照着修改就行了。 接下来就是要创建模板了，官方提供了2种模板使用： 基于vue cli和browserify的项目模板基于vue cli和webpack的项目模板 emmm。。。browserify是个什么东西，我还清楚，webpack呢有听说过，是个打包工具来着，所以我决定要创建webpack的项目模板 安装vue-cli脚手架工具1npm install vue-cli -g 安装webpack打包工具1npm install webpack -g 创建webpack-simple模板1vue init webpack-simple my-webpack-simple-demo 会产生对应的my-webpack-simple-demo项目文件夹 打开文件夹文件树结构如下： ├─.babelrc // babel配置文件├─.gitignore├─index.html // 主页├─package.json // 项目配置文件├─README.md├─webpack.config.js // webpack配置文件├─dist // 发布目录│ ├─.gitkeep├─src // 开发目录│ ├─App.vue // App.vue组件│ ├─main.js // 预编译入口 。。。还是看不懂项目里的都是些啥，我只知道index.html 是首页README.md 是展示的makedown文件package.josn 是json文件具体什么用也不清楚其他一概不知，一个完整的项目东西也太多了，和做一个单独的网页配上css和js完全不一样 所以大概还得一样一样学过来 那么既然这个是基于vue-cli和webpack的项目模板，所以就先从webpack学起吧！ 跟着别人的教程走吧 首先webpack是什么1.一个打包工具2.一个模块加载工具3.各种资源都可以当成模块来处理 emmm。。。，说真的，每次学新的东西的时候，都是看着这种很专业的术语来学习真的是非常的不明觉厉啊，前面看git命令的时候也是一样，所以还是先看后面的例子吧 对于模块的组织，通常有如下几种方法：1.通过书写在不同的文件中，使用script标签进行加载 这个是我目前会的那种。。。 2.CommonJS进行加载（NodeJS就是使用这种方式） CommonJS又是什么，nodejs还没开始看呢。。 3.AMD进行加载（require.js使用这种方式） emmm… 4.ES6模块 es6也没怎么看 算了，慢慢来吧 webpack的特点 1.丰富的插件，方便进行开发工作2.大量的加载器，包括加载各种静态资源3.代码分割，提供按需加载的能力4.发布工具 webpack的优势1.webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。2.能被模块化的不仅仅是 JS 了。3.开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。4.扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。 大概是意思就是我要使用webpack还得先去学CommonJS ok！开始webpack的例子了还是实际的代码比较容易理解 安装webpack，前面安装过了 使用webpack12npm init # 会自动生成一个package.json文件npm install webpack --save-dev #将webpack增加到package.json文件中 如果要安装开发工具1npm install webpack-dev-server --save-dev webpack的配置每个项目下都必须配置有一个webpack.config.js，它的作用如同常规的gulpfile.js/Gruntfile.js，就是一个配置项，告诉webpack他需要做什么下面是个例子12345678910111213141516171819202122232425262728293031323334353637var webpack = require(&apos;webpack&apos;);var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);module.exports = &#123; //插件项 plugins: [commonsPlugin], //页面入口文件配置 entry: &#123; index : &apos;./src/js/page/index.js&apos; &#125;, //入口文件输出配置 output: &#123; path: &apos;dist/js/page&apos;, filename: &apos;[name].js&apos; &#125;, module: &#123; //加载器配置 loaders: [ &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;, &#123; test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; &#125;, &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;, &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125; ] &#125;, //其它解决方案配置 resolve: &#123; //查找module的话从这里开始查找 root: &apos;E:/github/flux-example/src&apos;, //绝对路径 //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名 extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;], //模块别名定义，方便后续直接引用别名，无须多写长长的地址 alias: &#123; AppStore : &apos;js/stores/AppStores.js&apos;, ActionType : &apos;js/actions/ActionType.js&apos;, AppAction : &apos;js/actions/AppAction.js&apos; &#125; &#125;&#125;; plugins 是插件项，这里我们使用了一个CommonsChunkPlugin的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用entry 是页面的入口文件配置，output是对应的输出配置文件（既入口文件最终要生成什么名字的文件，存放在哪里）module.loaders 是最关键的一块配置，它告诉webpack每种文件都需要使用什么加载器来处理。加载器需要使用npm来加载resolve模块 是查找模块的路径和扩展名和别名 webpack开始使用1.正确安装webpack2.书写entry.js文件1document.write(&quot;entry&quot;); 3.书写index.html12345678&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 4.执行命令，生成bundle.js1$ webpack ./entry.js bundle.js 5.打开html文件，显示entry6.增加content.js文件1module.exports = &quot;content&quot; 7.修改entry.js1document.write(require(&quot;./content.js&quot;)); 8.打开html文件，显示content9.增加css.css文件123body&#123; background:yellow;&#125; 10.修改entry.js12require(&quot;!style-loader!css-loader!./style.css&quot;);document.write(require(&quot;./content.js&quot;)); 11.执行命令，安装加载器1npm install css-loader style-loader 12.执行webpack命令1$ webpack ./entry.js bundle.js --module-bind &quot;css=style-loader!css-loader&quot; 14.打开html文件，显示背景黄色15.使用配置文件默认配置文件为webpack.config.js增加webpack.config.js文件123456789101112module.exports = &#123; entry: &quot;./entry.js&quot;, output: &#123; path: __dirname, filename: &quot;bundle.js&quot; &#125;, module: &#123; loaders: [ &#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125; ] &#125;&#125;; 执行命令1$ webpack 16.发布服务器安装服务器12$ npm install webpack-dev-server -g$ webpack-dev-server --progress --colors 服务器可以自动生成和刷新，修改代码保持后自动更新画面http://localhost:8080/webpack-dev-server/bundle 17.webpack常用命令1$ webpack --display-error-details 后面的参数“–display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。1234$ webpack --config XXX.js //使用另一份配置文件（比如webpack.config2.js）来打包$ webpack --watch //监听变动并自动打包$ webpack -p //压缩混淆脚本，这个非常非常重要！$ webpack -d //生成map映射文件，告知哪些模块被最终打包到哪里了 总结一下吧：vue-cli是脚手架工具，用来创建vue项目模板，webpack是打包工具，总的来说就是把多个文件打包成一个文件，不仅仅是js文件，静态资源也可以打包，学习webpack有那么一点感觉，但又很模糊，先到这里吧。]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js数组函数]]></title>
    <url>%2F2018%2F04%2F21%2F2018_4_21_2_%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[push：将参数添加到原数组末尾，并返回数组的长度 concat：返回一个新数组，是将参数添加到原数组中构成的 splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,… reverse：将数组反序 sort(orderfunction)：按指定的参数对数组进行排序 slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组 实例： 1、数组的创建123var arrayObj = new Array(); //创建一个数组 var arrayObj = new Array([size]); //创建一个数组并指定长度，注意不是上限，是长度 var arrayObj = new Array([element0[, element1[, ...[, elementN]]]]); 创建一个数组并赋值 要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。 2、数组的元素的访问12var testGetArrValue=arrayObj[1]; //获取数组的元素值 arrayObj[1]= &quot;这是新值&quot;; //给数组元素赋予新的值 3、数组元素的添加 arrayObj. push([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组结尾，并返回数组新长度arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度arrayObj.splice(insertPos,0,[item1[, item2[, . . . [,itemN]]]]);//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回””。 4、数组元素的删除123arrayObj.pop(); //移除最后一个元素并返回该元素值 arrayObj.shift(); //移除最前一个元素并返回该元素值，数组中元素自动前移 arrayObj.splice(deletePos,deleteCount); //删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素 5、数组的截取和合并 arrayObj.slice(start, [end]); //以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); //将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组 6、数组的拷贝12arrayObj.slice(0); //返回数组的拷贝数组，注意是一个新的数组，不是指向 arrayObj.concat(); //返回数组的拷贝数组，注意是一个新的数组，不是指向 7、数组元素的排序12arrayObj.reverse(); //反转元素（最前的排到最后、最后的排到最前），返回数组地址 arrayObj.sort(); //对数组元素排序，返回数组地址 8、数组元素的字符串化12arrayObj.join(separator); //返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。 toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue小练习_图书管理]]></title>
    <url>%2F2018%2F04%2F21%2F2018_4_21_1_vue%E7%BB%83%E4%B9%A0_%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[这个是最后完成的样子demo 昨天学习看完了基本的Vue.js的知识点，今天开始做一些vue小练习 小练习目标： 实现动态渲染html页面的图书实现图书的添加和删除 差不多就这样吧，这个练习刚刚看到是时候还是觉得挺简单的，但是实际写起来就是觉得无从下手，大概是刚刚看完vue吧，没办法直接使用。所以我就先写了html和css大概这样吧 接下来就是写js了 我的想法如下:1 写一个vue实例vm对应图书的div2 在vm里写一个books数组，数组里写图书的信息，3 然后在html里通过v-for渲染4 然后创建一个对象（newBook），然后给newBook写上书名（bookName），作者（author），价格（price）等属性5 给删除按钮写删除对应行的函数（del），写在methods里6 添加书籍里的书名，作者，价格用v-model对应起newBook.bookName，newBook.author，newBook.price。7 给添加按钮写添加函数（add） 大概的想法是这样的 然后我开始实现我的想法遇到了很多问题，这大概就是第一使用vue吧 遇到的问题如下:1 js文件里的vue实例或在html属性里写错，可能会导致实例对应的DOM元素直接消失。我接二连三的遇到这个问题，一直不知道错在哪，然后就浪费了很多时间，比如v-model=”newbook.bookname”这个大小写问题，我一直没有发现 解决办法：不要写错咯 2 在写del函数的时候没办法删除对应行，暂时还不知道怎么解决，不过同时也学会了一个新的js的数组操作函数Array.splice(x,y)x对应的是数组的位置，y是要删除的数量，想到解决办法我会写上去的。 解决办法：目前的想法是在渲染的时候给button添加一个index属性，来确定是哪一行前面的想法不知道可不可行，我给books添加了index属性，我是用event.target确定当前button的，但是target.index不能使用，所以我把button的index属性改为了id属性，通过target.id确定是数组的哪个位置，然后把删除掉数组对应的位置不过只是删除数组元素还是会产生问题，就是删除一个元素后，会打乱原来的index，产生断层，所以还要在del函数里给数组对应位置后面的所有对象的index都减一，才能保证index不会产生断层。 3 在写add函数的时候，遇到这样一个问题，就是把newBook对象通过push函数添加进books数组里的时候，我再改变newBook对象的属性，books数组里对应的位置也会发生改变，这大概就是响应式吧，原来还会这样的。 解决办法：在add函数里重新let一个对象，把newBook的属性全部copy一份给新对象，然后把新对象push进数组就没有这个问题了 4 在写add函数的时候，还有遇到了一个问题，就是明明我在data里申明了newBook这个对象，但是在push的时候使用this.books.push(newBook)时报错说newBook没有申明，后来我想了想，大概是newBook不是全局变量的原因吧 解决办法：使用时要用this.newBook，this代表当前实例 最后附上我的代码index.html（html）12345678910111213141516171819202122232425262728&lt;div id=&quot;book&quot;&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;td&gt;书名&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;价格&lt;/td&gt;&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;book in books&quot;&gt; &lt;td&gt;&#123;&#123; book.bookName &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; book.author &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; book.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button v-bind:id=&quot;book.index&quot; v-on:click=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;添加书籍&lt;/p&gt; &lt;label&gt;书名&lt;/label&gt; &lt;input v-model=&quot;bookName&quot; type=&quot;text&quot; /&gt; &lt;label&gt;作者&lt;/label&gt; &lt;input v-model=&quot;author&quot; type=&quot;text&quot; /&gt; &lt;label&gt;价格&lt;/label&gt; &lt;input v-model.number=&quot;price&quot; type=&quot;number&quot; /&gt; &lt;button v-on:click=&quot;add&quot;&gt;添加&lt;/button&gt; &lt;/div&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394*&#123; margin: 0; padding: 0;&#125;html,body&#123; width: 100%; height: 100%;&#125;#book&#123; width: 100%;&#125;h1&#123; margin: 20px;&#125;div&#123; margin: 20px;&#125;table&#123; width: 95%;&#125;tr&#123; width: 100%;&#125;td&#123; width: 25%;&#125;td,table&#123; border-collapse: collapse;&#125;thead td&#123; font-weight:bold; font-size: 18px; height: 30px; border-bottom: 2px solid #ddd;&#125;tbody td&#123; padding-bottom: 10px; font-size: 13px; height: 40px; border-top: 1px solid #ddd;&#125;label&#123; /*display: block;*/ font-weight:bold; /*margin: 5px 0;*/&#125;p&#123; margin: 20px 0 10px 0;&#125;input::-webkit-outer-spin-button,input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important; margin: 0;&#125;input[type=&quot;text&quot;],input[type=&quot;number&quot;]&#123; display: block; margin: 3px 0 10px 0; width: 95%; padding: 8px; border-radius: 4px; border: 1px solid #ddd; outline:none;&#125;input[type=&quot;text&quot;]:focus,input[type=&quot;number&quot;]:focus&#123; border: 1px solid #3af; box-shadow: 0 0 10px 1px #ddd;&#125;button&#123; background-color: #3E74B5; border: 1px solid #3868A3; padding: 7px 14px; border-radius: 4px; color: #fff; outline: none;&#125;button:hover&#123; background-color:#325C8F;&#125; myjs.js（js）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var vm = new Vue(&#123; el: &quot;#book&quot;, data: &#123; bookName:&quot;&quot;, author:&quot;&quot;, price:&quot;&quot;, index: &quot;3&quot;, books: [ &#123; bookName: &quot;红楼梦&quot;, author: &quot;曹雪芹&quot;, price: &quot;32&quot;, index: &quot;0&quot; &#125;, &#123; bookName: &quot;水浒传&quot;, author: &quot;施耐庵&quot;, price: &quot;30&quot;, index: &quot;1&quot; &#125;, &#123; bookName: &quot;三国演义&quot;, author: &quot;罗贯中&quot;, price: &quot;24&quot;, index: &quot;2&quot; &#125;, &#123; bookName: &quot;西游记&quot;, author: &quot;吴承恩&quot;, price: &quot;20&quot;, index: &quot;3&quot; &#125; ] &#125;, methods: &#123; del: function(event)&#123; let tar = event.target; this.books.splice(tar.id,1); for(let i = tar.id;i &lt; this.index;i++)&#123; this.books[i].index--; &#125; this.index--; &#125;, add: function()&#123; this.index++; let newBook = new Object(); newBook.bookName = this.bookName; newBook.author = this.author; newBook.price = this.price; newBook.index = this.index; if(newBook.bookName == &quot;&quot;)&#123; alert(&quot;书名为空&quot;); return; &#125; if(newBook.author == &quot;&quot;)&#123; alert(&quot;作者为空&quot;); return; &#125; this.books.push(newBook); this.bookName = &quot;&quot;; this.author = &quot;&quot;; this.price = &quot;&quot;; &#125; &#125;&#125;) 最后总结一下吧：1.vue的响应式渲染确实非常的好用，改变实例的属性就能动态渲染html页面2.我还不太熟悉vue的写法，经常漏写逗号，写多了就好3.今天还知道了一些新的数组函数，过会我把今天看的数组函数都列一下吧4.总的来说vue还是非常便利的]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript闭包问题]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_5_Javascript%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[闭包这个问题，其实是我一直没有搞懂的，到现在为止也没有，但是我很早之前就遇到过闭包的问题，当时要给多个li绑定事件，为了方便我使用了for循环一个一个的给每个li绑定事件，但是，结果发现只有最后一个li绑定了事件，这个问题一直困扰着我，后来问了学长才知道，这个是闭包问题。后来用了立即执行函数才解决问题直到现在我也不太明白闭包到底是个什么东西，但大概有个概念就是变量作用域的问题，在函数外面访问不到函数内部变量，函数内部可以访问函数外部的变量，从而导致了闭包问题的产生那么要怎么样才能在访问函数内部的变量呢，这里就是闭包的概念了，在函数内部写一个函数，当然能访问到函数的变量，然后再将变量做为返回值，这样函数外部就能访问到函数内部的变量了。。。。emmm，大概是这么个意思吧。 前面是我个人对闭包的简单理解 下面是借鉴dalao对闭包的理解: 我的理解是，闭包就是能够读取其他函数内部变量的函数。 由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。123456789101112131415161718192021function f1()&#123; var n=999; nAdd=function()&#123;n+=1&#125; function f2()&#123; alert(n); &#125; return f2; &#125; var result=f1(); result(); // 999 nAdd(); result(); // 1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。 为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。 这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 基本命令]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_4_git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1git init 本地创建git仓库 1git remote add origin https://github.com/xxxxxx/xxxxx.git 关联本地仓库到对应的github仓库 1git add 文件名/文件夹名 添加文件到本地仓库 1git commit -m &quot;形容这次操作&quot; 提交信息 1git push origin master 上传到github仓库 1git rm -r --cached idea 删除本地仓库的idea文件，cached不会删除本地文件，去掉会删除本地文件 我目前就知道这么多 然后今天还看见了一个比较全面的git命令表格 我就照搬过来了 个人本地使用 行为 命令 备注 初始化 init 在本地的当前目录里初始化git仓库 clone https://…. 从网络上某个地址拷贝仓库(repository)到本地 查看当前状态 status 查看当前仓库的状态。碰到问题不知道怎么办的时候，可以通过看它给出的提示来解决问题 查看不同 diff 查看当前状态和最新的commit之间不同的地方 添加文件 add -A 这算是相当通用的了。在commit之前要先add 撤回stage的东西 checkout - - . 这里用小数点表示撤回所有修改，在- -的前后都有空格 提交 commit -m “提交信息” 提交信息最好能体现更改了什么 删除未tracked clean -xf 删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件 查看提交记录 log 查看当前版本及之前的commit记录 reflog HEAD的变更记录 版本回退 reset –hard 版本号 回退到指定版本号的版本，该版本之后的修改都被删除。同时也是通过这个命令回到最新版本。需要reflog配合 个人使用远程仓库 行为 命令 备注 设置用户名 config - -global user.name “你的用户名” 设置邮箱 config - -global user.email “你的邮箱” 生成ssh key ssh-keygen -t rsa -C “你的邮箱” 这条命令前面不用加git 添加远程仓库 remote add origin 你复制的地址 设置origin 上传并指定默认 push -u origin master 指定origin为默认主机，以后push默认上传到origin上 提交到远程仓库 push 将当前分支增加的commit提交到远程仓库 从远程仓库同步 pull 在本地版本低于远程仓库版本的时候，获取远程仓库的commit]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github 创建本地仓库以及上传到github仓库]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_3_github%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%B8%8A%E4%BC%A0%E5%88%B0github%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[1 注册github账号 2 新建仓库 3 安装git 4 打开Git Bash，输入以下命令生成密钥来验证身份1ssh-keygen -C &apos;your@email.address&apos; -t rsa 之后会要求输入密码，输入正确后会在windows当前用户目录下生成.ssh文件夹 5 把文件夹下的id_rsa.pub文件内容全部复制 6 然后打开github账户设置 7 打开ssh keys，右上角点击add ssh key，key栏粘贴刚才的密钥。 8 在你想要文件夹下打开Git Bash，输入1git init 会在文件夹下创建.git文件夹（隐藏的） 9 添加单个文件（test.txt）本地仓库1git add test.txt 10 把添加的文件提交到仓库1git commit -m &quot;add test.txt&quot; 命令行引号里面是我们用来描述这次操作，方便以后我们查记录的时候能清楚这次操作主要修改 到这里本地仓库已经完成了 最后提交到github仓库12git remote add origin https://github.com/xxxxxx/xxxxx.gitgit push origin master 完成]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习总结]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_2_Vue.js%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[已经学习了基本的Vue.js我来总结一下具体学了什么我把Vue.js分成几类1Vue实例 Vue实例写在js文件里Vue实例有以下的属性 el：对应具体的DOM data：写实例的变量 methods：写实例的函数 computed：写实例的计算属性（计算属性类似methods，区别是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行） watch：给对应的实例变量写回调函数，在变量发生改变时触发 暂时只学习了这些属性 Vue实例有以下的方法 vm.\$watch( expOrFn, callback, [options] )：对应watch，再实例变量发生改变时触发，回调函数得到的参数为新值和旧值。 vm.\$set( target, key, value )：这是全局 Vue.set 的别名。设置对象的属性。 vm.\$delete：这是全局 Vue.delete 的别名。删除对象的属性。 vm.\$on( event, callback )：给实例绑定一个自定义事件。 vm.\$once( event, callback )：给实例绑定一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。 vm.\$off( [event, callback] )：移除自定义事件监听器。 vm.\$emit( event, […args] )：触发当前实例上的事件。附加参数都会传给监听器回调。 暂时只学习了这些方法 Vue实例的生命周期 关于Vue的生命周期我还是不太理解，所以就先放上dalao的解释了 Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。在这些事件响应方法中的this直接指向的是vue的实例。 Vue提供的可以注册的钩子： beforeCreate在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。 created实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\$el 属性目前不可见。 beforeMount在挂载开始之前被调用：相关的 render 函数首次被调用。 mountedel 被新创建的 vm.\$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.\$el 也在文档内。 beforeUpdate数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。 updated由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。 beforeDestroy实例销毁之前调用。在这一步，实例仍然完全可用。 destroyedVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。 2Vue指令 指令：是带有V-前缀的特殊属性，通过属性来操作元素Vue基本指令 v-text:在元素当中插入值,只能是文本v-html:在元素不中不仅可以插入文本，还可以插入标签 v-if根据表达式的true或false来动态插入和移除元素（代码注释） v-show根据表达式的true或false来隐藏和显示元素（css：display:none） v-for根据变量的值来循环渲染元素（用法类似for in） v-on监听元素事件，并执行相应的操作（相当于给元素添加监听器）v-on 缩写（v-on:click == @click） v-bind给元素绑定属性，可以添加表达式动态的判断是否添加v-bind 缩写（v-bind:href == :href） v-model实现了数据和视图的双向绑定分成了3步： 1）把元素的值和数据相绑定 2）当输入内容时，数据同步发生变化，视图 —数据的驱动 3）当改变数据时，输入内容也会发生变化，数据 -&gt; 视图的驱动 自定义指令通过directive来注册指令，可以注册全局指令和局部指令 Vue指令除了可以添加表示式，还可以添加修饰符 Vue.js 为 v-on 提供了 事件修饰符 .stop阻止事件冒泡 .prevent不再重载页面 .capture添加事件侦听器时使用时间捕获模式 .self只当事件在该元素本身（而不是子元素）触发时触发回调 .once事件只能点击一次 修饰符例子如下： 1234567891011121314151617&lt;div id=&quot;app&quot;&gt;&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;/div&gt; 按键修饰符v-on:keyup.13=”submit”只有在 keyCode 是 13 时调用 vm.submit() 因为记住全部按键太难了，所以Vue提供了按键别名 全部的按键别名： .enter.tab.delete (捕获 “删除” 和 “退格” 键).esc.space.up.down.left.right.ctrl.alt.shift.meta 3其他Vue除了实例和指令外，还有一些其他的知识点 3.1 数据绑定最常见的形式就是使用 &#123;&#123;…&#125;&#125;（双大括号）的文本插值： 3.2 Vue组件组件可以扩展 HTML 元素，封装可重用的代码。 我个人对组件的看法是类似于DOM元素的东西，通俗的讲就是HTMl的标签 component可以用来注册组件，可以注册全局组件和局部组件父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。但如果子组件要把数据传递回去，就需要使用自定义事件！我们可以使用 v-on 绑定自定义事件 3.3 Vue.js 路由通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。Vue.js 路由需要载入 vue-router 库 暂时应该就学了这些东西。。。以后学的再补充吧。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（四）]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[14Vue.js 自定义指令 Vue 允许注册自定义指令。指令（v-model v-show 等。。）使用 directives 来注册指令我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用12345678910111213141516171819&lt;div id=&quot;app&quot;&gt; &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt; &lt;input v-focus&gt;&lt;/div&gt; &lt;script&gt;// 注册一个全局自定义指令 v-focusVue.directive(&apos;focus&apos;, &#123; // 当绑定元素插入到 DOM 中。 inserted: function (el) &#123; // 聚焦元素 el.focus() &#125;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 钩子函数bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。unbind: 只调用一次， 指令与元素解绑时调用。 钩子函数参数el: 指令所绑定的元素，可以用来直接操作 DOM 。binding: 一个对象，包含以下属性： name: 指令名，不包括 v- 前缀。value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。 vnode: Vue 编译生成的虚拟节点。oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 1234567891011121314151617181920212223&lt;div id=&quot;app&quot; v-runoob:hello.a.b=&quot;message&quot;&gt;&lt;/div&gt; &lt;script&gt;Vue.directive(&apos;runoob&apos;, &#123; bind: function (el, binding, vnode) &#123; var s = JSON.stringify el.innerHTML = &apos;name: &apos; + s(binding.name) + &apos;&lt;br&gt;&apos; + &apos;value: &apos; + s(binding.value) + &apos;&lt;br&gt;&apos; + &apos;expression: &apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; + &apos;argument: &apos; + s(binding.arg) + &apos;&lt;br&gt;&apos; + &apos;modifiers: &apos; + s(binding.modifiers) + &apos;&lt;br&gt;&apos; + &apos;vnode keys: &apos; + Object.keys(vnode).join(&apos;, &apos;) &#125;&#125;)new Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;xxxx!&apos; &#125;&#125;)&lt;/script&gt; 有时候我们不需要其他钩子函数，我们可以简写函数1234Vue.directive(&apos;runoob&apos;, function (el, binding) &#123; // 设置指令的背景颜色 el.style.backgroundColor = binding.value.color&#125;) 总结：Vue支持写自定义函数，同样也是响应式的函数，根据参数的变化而变化。具体的还不太清楚。 15Vue.js 路由 Vue.js 路由允许我们通过不同的 URL 访问不同的内容。通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。Vue.js 路由需要载入 vue-router 库Vue.js + vue-router 可以很简单的实现单页应用。 html12345678910111213141516&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;Hello App!&lt;/h1&gt; &lt;p&gt; &lt;!-- 使用 router-link 组件来导航. --&gt; &lt;!-- 通过传入 `to` 属性指定链接. --&gt; &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt; &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt; &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt; &lt;/p&gt; &lt;!-- 路由出口 --&gt; &lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; js12345678910111213141516171819202122232425262728293031// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter) // 1. 定义（路由）组件。// 可以从其他文件 import 进来const Foo = &#123; template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; &#125;const Bar = &#123; template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; &#125; // 2. 定义路由// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是// 通过 Vue.extend() 创建的组件构造器，// 或者，只是一个组件配置对象。// 我们晚点再讨论嵌套路由。const routes = [ &#123; path: &apos;/foo&apos;, component: Foo &#125;, &#123; path: &apos;/bar&apos;, component: Bar &#125;] // 3. 创建 router 实例，然后传 `routes` 配置// 你还可以传别的配置参数, 不过先这么简单着吧。const router = new VueRouter(&#123; routes // （缩写）相当于 routes: routes&#125;) // 4. 创建和挂载根实例。// 记得要通过 router 配置参数注入路由，// 从而让整个应用都有路由功能const app = new Vue(&#123; router&#125;).$mount(&apos;#app&apos;) // 现在，应用已经启动了！ 总结：Vue.js路由很好理解，就是本来是多页面的网页，可以通过单页来实现，根据点击的router-link的url不同，在下面router-view处会渲染不同的页面来实现单页面跳转效果。还有就是使用起来可能有点小困难吧。。。意思很好理解，实际操作应该不简单 到这里基础的Vue.js已经学完了，感觉上和以前学JQuery没什么差别，感觉上就是看了的，基本都看懂了，但是实际使用起来就是无从下手的感觉，总感觉看了跟没有看一样，所以还是找点Vue的练习做做吧。。。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于事件冒泡和事件捕获（二）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_5_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[附上今天看见的非常形象的事件冒泡代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt; &lt;style&gt; * &#123; box-sizing: border-box; margin: 0; padding: 20px; transition: background 800ms; &#125; ul &#123; height: 100%; list-style: none; background: hsl(193, 66%, 85%); &#125; li &#123; height: 100%; background: hsl(193, 66%, 95%); &#125; .highlight &#123; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;One&lt;/li&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;Two&lt;/li&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;Three. Click Me!!!&lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; var pause = 200; new Vue(&#123; el: &quot;#app&quot;, methods: &#123; callback(event) &#123; var ms = event.timeout = (event.timeout + pause) || 0; var target = event.currentTarget; console.log(target); setTimeout(function() &#123; target.classList.add(&apos;highlight&apos;); setTimeout(function() &#123; target.classList.remove(&apos;highlight&apos;); &#125;, pause); &#125;, ms); &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于事件冒泡和事件捕获]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_4_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%2F</url>
    <content type="text"><![CDATA[今天在学习Vue,js时接触到了事件修饰符.capture，意思为添加事件侦听器时使用事件捕获模式，不太明白，所以搜索了一下捕获模式，才明白原来是事件冒泡和事件捕获，虽然很早之前就已经接触过事件冒泡和事件捕获，但是一直都是一个很模糊的概念，没有去了解过，所以这次我就好好的了解了一下关于事件冒泡和事件捕获 事件冒泡：即事件由子元素向祖先元素传播事件捕获：即事件由祖先元素向子元素传播要说明的是在IE浏览器和opera浏览器中，是不存在这个阶段的。 addEventListener(type,fn,boolean)，前面两个参数不用解释，第三个参数boolean，就是决定注册事件发生在捕 获阶段还是冒泡阶段，具体参考如下：true : 捕获阶段false : 冒泡阶段 在默认情况下，发生在一个子元素上的单击事件（或者其他事件），如果在其父级元素绑定了一个同样的事件，此时点击子元素，click事件会首先被子元素捕获，执行绑定的事件程序，之后会被父级元素捕获，再次激发一段脚本的执行，这就是所谓的“事件冒泡”。 我个人的理解所谓的事件冒泡和事件捕获就是事件发生的顺序，冒泡是从小向大发生，也就是先子元素发生事件，再父元素发生事件，捕获则相反，一般来说，事件冒泡比较多，我个人接触的也都是事件冒泡，以前遇到过事件冒泡相关的问题，就是子元素触发了事件，父元素也同样触发了事件，因为都绑定了click事件，只要给子元素的事件添加阻止冒泡即可1event.stopPropagation() event.stopPropagation()方法这是阻止事件的冒泡方法，不让事件向documen上蔓延，但是默认事件任然会执行event.preventDefault()方法这是阻止默认事件的方法return false ；这个方法比较暴力，他会同事阻止事件冒泡也会阻止默认事件]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（三）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_3_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[11Vue.js 事件处理器 事件监听可以使用 v-on 指令通常情况下，我们需要使用一个方法来调用 JavaScript 方法。v-on 可以接收一个定义的方法来调用。1234567891011121314151617181920212223242526&lt;div id=&quot;app&quot;&gt; &lt;!-- `greet` 是在下面定义的方法名 --&gt; &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: &apos;#app&apos;, data: &#123; name: &apos;Vue.js&apos; &#125;, // 在 `methods` 对象中定义方法 methods: &#123; greet: function (event) &#123; // `this` 在方法里指当前 Vue 实例 alert(&apos;Hello &apos; + this.name + &apos;!&apos;) // `event` 是原生 DOM 事件 if (event) &#123; alert(event.target.tagName) &#125; &#125; &#125;&#125;)// 也可以用 JavaScript 直接调用方法app.greet() // -&gt; &apos;Hello Vue.js!&apos;&lt;/script&gt; 除了直接绑定到一个方法，也可以用内联 JavaScript 语句123456789101112131415&lt;div id=&quot;app&quot;&gt; &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt; &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, methods: &#123; say: function (message) &#123; alert(message) &#125; &#125;&#125;)&lt;/script&gt; 事件修饰符Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。Vue.js通过由点(.)表示的指令后缀来调用修饰符。.stop.prevent.capture.self.once123456789101112131415&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt; 按键修饰符Vue 允许为 v-on 在监听键盘事件时添加按键修饰符12&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;&lt;input v-on:keyup.13=&quot;submit&quot;&gt; 记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：1234&lt;!-- 同上 --&gt;&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;&lt;!-- 缩写语法 --&gt;&lt;input @keyup.enter=&quot;submit&quot;&gt; 全部的按键别名：.enter.tab.delete (捕获 “删除” 和 “退格” 键).esc.space.up.down.left.right.ctrl.alt.shift.meta 总结：v-on就像是onclick一样，可以在DOM元素的属性里给DOM添加方法，当然一个DOM对应一个vue实例，对应的function得是vue实例里的。 12Vue.js 表单 你可以用 v-model 指令在表单控件元素上创建双向数据绑定。v-model 会根据控件类型自动选取正确的方法来更新元素。12&lt;input v-model=&quot;message&quot; placeholder=&quot;单行文本输入……&quot;&gt;&lt;textarea v-model=&quot;message2&quot; placeholder=&quot;多行文本输入……&quot;&gt;&lt;/textarea&gt; 复选框复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组12345678910111213141516171819202122232425&lt;div id=&quot;app&quot;&gt; &lt;p&gt;单个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt; &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt; &lt;p&gt;多个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;taobao&quot;&gt;taobao&lt;/label&gt; &lt;br&gt; &lt;span&gt;选择的值为: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; checked : false, checkedNames: [] &#125;&#125;)&lt;/script&gt; 单选框123456789101112131415161718&lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;radio&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;radio&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;br&gt; &lt;span&gt;选中值为: &#123;&#123; picked &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; picked : &apos;Runoob&apos; &#125;&#125;)&lt;/script&gt; 演示了单选按钮的双向数据绑定 select 列表1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;select v-model=&quot;selected&quot; name=&quot;fruit&quot;&gt; &lt;option value=&quot;&quot;&gt;选择一个网站&lt;/option&gt; &lt;option value=&quot;www.runoob.com&quot;&gt;Runoob&lt;/option&gt; &lt;option value=&quot;www.google.com&quot;&gt;Google&lt;/option&gt; &lt;/select&gt; &lt;div id=&quot;output&quot;&gt; 选择的网站是: &#123;&#123;selected&#125;&#125; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; selected: &apos;&apos; &#125;&#125;)&lt;/script&gt; v-model会获取元素的value属性修饰符.lazy在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步.number如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值.trim如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入12&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;&lt;input v-model.lazy=&quot;msg&quot; &gt; 总结：感觉更像是介绍了v-model，动态根据元素来改变vue实例里的元素，从而连带改变（重新渲染）html页面 13Vue.js 组件 组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。几乎任意类型的应用的界面都可以抽象为一个组件树注册一个全局组件语法格式如下：1Vue.component(tagName, options) tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：1&lt;tagName&gt;&lt;/tagName&gt; 全局组件所有实例都能用全局组件。1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt;&lt;/div&gt;&lt;script&gt;// 注册Vue.component(&apos;runoob&apos;, &#123; template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 局部组件我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：123456789101112131415161718&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt;&lt;/div&gt;&lt;script&gt;var Child = &#123; template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;&#125;// 创建根实例new Vue(&#123; el: &apos;#app&apos;, components: &#123; // &lt;runoob&gt; 将只在父模板可用 &apos;runoob&apos;: Child &#125;&#125;)&lt;/script&gt; Propprop 是父组件用来传递数据的一个自定义属性。父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：123456789101112131415161718192021222324&lt;div id=&quot;app&quot;&gt; &lt;div&gt; &lt;input v-model=&quot;parentMsg&quot;&gt; &lt;br&gt; &lt;child v-bind:message=&quot;parentMsg&quot;&gt;&lt;/child&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;// 注册Vue.component(&apos;child&apos;, &#123; // 声明 props props: [&apos;message&apos;], // 同样也可以在 vm 实例中像 &quot;this.message&quot; 这样使用 template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;, data: &#123; parentMsg: &apos;父组件内容&apos; &#125;&#125;)&lt;/script&gt; 注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。Prop 验证组件可以为 props 指定验证要求。prop 是一个对象而不是字符串数组时，它包含验证要求：12345678910111213141516171819202122232425262728293031Vue.component(&apos;example&apos;, &#123; props: &#123; // 基础类型检测 （`null` 意思是任何类型都可以） propA: Number, // 多种类型 propB: [String, Number], // 必传且是字符串 propC: &#123; type: String, required: true &#125;, // 数字，有默认值 propD: &#123; type: Number, default: 100 &#125;, // 数组／对象的默认值应当由一个工厂函数返回 propE: &#123; type: Object, default: function () &#123; return &#123; message: &apos;hello&apos; &#125; &#125; &#125;, // 自定义验证函数 propF: &#123; validator: function (value) &#123; return value &gt; 10 &#125; &#125; &#125;&#125;) type 可以是下面原生构造器：StringNumberBooleanFunctionObjectArraytype 也可以是一个自定义构造器，使用 instanceof 检测。 自定义事件父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！ 我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即： 使用 $on(eventName) 监听事件使用 $emit(eventName) 触发事件另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。 以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。1234567891011121314151617181920212223242526272829303132333435&lt;div id=&quot;app&quot;&gt; &lt;div id=&quot;counter-event-example&quot;&gt; &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt; &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt; &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;Vue.component(&apos;button-counter&apos;, &#123; template: &apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;, data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; incrementHandler: function () &#123; this.counter += 1 this.$emit(&apos;increment&apos;) &#125; &#125;,&#125;)new Vue(&#123; el: &apos;#counter-event-example&apos;, data: &#123; total: 0 &#125;, methods: &#123; incrementTotal: function () &#123; this.total += 1 &#125; &#125;&#125;)&lt;/script&gt; 如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 总结：Vue.js组件我个人感觉就像是把一些写好的标签封装起来，组件的应该就是标签的意思，vue组件内部可以自己产生变量，但是父组件传递变量进去需要prop声明，组件也可以通过自定义方法来把变量传回父组件，至于native修饰符，我太明白。引用dalao的话：意思就是当你给一个vue组件绑定事件时候，要加上native！如果是普通的html元素！就不需要。感觉native就是把组件变回原生DOM的一种方式，不知这样说对不对。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（二）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_2_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[6Vue.js 条件语句 条件判断v-if根据表达式的值(true 或 false )来决定是否插入对应的元素。v-else可以用 v-else 指令给 v-if 添加一个 “else” 块1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt; Sorry &lt;/div&gt; &lt;div v-else&gt; Not sorry &lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 这里在v-if里写了js的随机数（0-1），如果大于0.5为true，显示Sorry，如果小于0.5为false，显示not sorry。v-else-ifv-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt; A &lt;/div&gt; &lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt; B &lt;/div&gt; &lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt; C &lt;/div&gt; &lt;div v-else&gt; Not A/B/C &lt;/div&gt;&lt;/div&gt; v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。v-show我们也可以使用 v-show 指令来根据条件展示元素用法和单独用v-if类似 总结：v-if，v-esle和v-if-else用法和js类似 7Vue.js 循环语句 v-forv-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。v-for 可以绑定数据到数组来渲染一个列表：1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;ol&gt; &lt;li v-for=&quot;site in sites&quot;&gt; &#123;&#123; site.name &#125;&#125; &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; sites: [ &#123; name: &apos;Runoob&apos; &#125;, &#123; name: &apos;Google&apos; &#125;, &#123; name: &apos;Taobao&apos; &#125; ] &#125;&#125;)&lt;/script&gt; site可以自己命名，sites是实例的一组数组v-for 迭代对象v-for 可以通过一个对象的属性来迭代数据123&lt;li v-for=&quot;value in object&quot;&gt; &#123;&#123; value &#125;&#125;&lt;/li&gt; object为对象，value为对象的属性内容（可以自己命名）也可以提供第二个的参数为键名123&lt;li v-for=&quot;(value, key) in object&quot;&gt; &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;&lt;/li&gt; 键名就是对象属性名，这里key为属性名，value为属性内容还可以提供第三个参数为索引123&lt;li v-for=&quot;(value, key, index) in object&quot;&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;&lt;/li&gt; 简单的说索引就1234…，给每个属性都加一个（差不多是这样吧emm…）v-for 迭代整数123&lt;li v-for=&quot;n in 10&quot;&gt; &#123;&#123; n &#125;&#125;&lt;/li&gt; 会依次显示1-10 总结：v-for应该就跟for（x in y）一个用法吧 8Vue.js 计算属性 计算属性关键词: computed。计算属性在处理一些复杂逻辑时是很有用的。1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;p&gt;原始字符串: &#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;p&gt;计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var vm = new Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;Runoob!&apos; &#125;, computed: &#123; // 计算属性的 getter reversedMessage: function () &#123; // `this` 指向 vm 实例 return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;)&lt;/script&gt; 这里声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。我们可以使用 methods（函数） 来替代 computed（计算属性），效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。12345methods: &#123; reversedMessage2: function () &#123; return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125; 可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。 computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter1234567891011121314151617181920212223242526272829&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123; site &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var vm = new Vue(&#123; el: &apos;#app&apos;, data: &#123; name: &apos;Google&apos;, url: &apos;http://www.google.com&apos; &#125;, computed: &#123; site: &#123; // getter get: function () &#123; return this.name + &apos; &apos; + this.url &#125;, // setter set: function (newValue) &#123; var names = newValue.split(&apos; &apos;) this.name = names[0] this.url = names[names.length - 1] &#125; &#125; &#125;&#125;)// 调用 setter， vm.name 和 vm.url 也会被对应更新vm.site = &apos;xxxx http://www.runoob.com&apos;; 从实例运行结果看在运行 vm.site = ‘xxxx http://www.runoob.com&#39;; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新。 总结：computed（计算属性）看起来和使用起来都和methods（函数）一样，区别应该就是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。 9Vue.js 监听属性 watch我们可以通过 watch 来响应数据的变化123456789101112131415161718192021222324252627282930313233&lt;div id = &quot;computed_props&quot;&gt; 千米 : &lt;input type = &quot;text&quot; v-model = &quot;kilometers&quot;&gt; 米 : &lt;input type = &quot;text&quot; v-model = &quot;meters&quot;&gt;&lt;/div&gt;&lt;p id=&quot;info&quot;&gt;&lt;/p&gt;&lt;script type = &quot;text/javascript&quot;&gt; var vm = new Vue(&#123; el: &apos;#computed_props&apos;, data: &#123; kilometers : 0, meters:0 &#125;, methods: &#123; &#125;, computed :&#123; &#125;, watch : &#123; kilometers:function(val) &#123; this.kilometers = val; this.meters = val * 1000; &#125;, meters : function (val) &#123; this.kilometers = val/ 1000; this.meters = val; &#125; &#125; &#125;); // $watch 是一个实例方法 vm.$watch(&apos;kilometers&apos;, function (newValue, oldValue) &#123; // 这个回调将在 vm.kilometers 改变后调用 document.getElementById (&quot;info&quot;).innerHTML = &quot;修改前值为: &quot; + oldValue + &quot;，修改后值为: &quot; + newValue;&#125;)&lt;/script&gt; watch 对象创建了两个方法 kilometers 和 meters。当我们再输入框输入数据时，watch 会实时监听数据变化并改变自身的值。 总结：watch对象创建的函数名对应data里的属性名，改属性发生变化时调用watch里对应的函数 10Vue.js 样式绑定 class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数class 属性绑定1&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt; isActive为true时，调用class=”active”，为false时，不调用我们也可以在对象中传入更多属性用来动态切换多个 class 。123&lt;div class=&quot;static&quot; v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;&lt;/div&gt; 我们也可以直接绑定数据里的一个对象12345678910111213141516171819202122232425262728&lt;style&gt;.active &#123; width: 100px; height: 100px; background: green;&#125;.text-danger &#123; background: red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; classObject: &#123; active: true, &apos;text-danger&apos;: true &#125; &#125;&#125;)&lt;/script&gt;&lt;/body&gt; 此外，我们也可以在这里绑定返回对象的计算属性123456789101112131415new Vue(&#123; el: &apos;#app&apos;, data: &#123; isActive: true, error: null &#125;, computed: &#123; classObject: function () &#123; return &#123; active: this.isActive &amp;&amp; !this.error, &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;, &#125; &#125; &#125;&#125;) 数组语法我们可以把一个数组传给 v-bind:class123456789101112&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; activeClass: &apos;active&apos;, errorClass: &apos;text-danger&apos; &#125;&#125;)&lt;/script&gt; 我们还可以使用三元表达式来切换列表中的 class1&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &apos;&apos;]&quot;&gt;&lt;/div&gt; Vue.js style(内联样式)我们可以在 v-bind:style 直接设置样式123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; 也可以直接绑定到一个样式对象，让模板更清晰123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;styleObject&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; v-bind:style 可以使用数组将多个样式对象应用到一个元素上123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; 注意：当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。 总结：v-bind提供很多种添加class或style的方法，我也不能一下一一全部记住，总而言之就是可以响应式的添加样式，改变个别样式可以使用style。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（一）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1Vue.js 安装 1.本地安装在 Vue.js 的官网上直接下载 vue.min.js 并用 script 标签引入。2.CDN 方法unpkg：https://unpkg.com/vue/dist/vue.js, 会保持和 npm 发布的最新的版本一致。cdnjs : https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js3.NPM 方法123456789# 查看版本$ npm -v2.3.0#升级 npmcnpm install npm -g# 最新稳定版$ cnpm install vue 在用 Vue.js 构建大型应用时推荐使用 NPM 安装 总结：npm方法不太明白什么意思，但是至少可以像JQuery一样可以本地导入或网页导入 2命令行工具 Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。123456789101112131415161718192021222324252627# 全局安装 vue-cli$ cnpm install --global vue-cli# 创建一个基于 webpack 模板的新项目$ vue init webpack my-project# 这里需要进行一些配置，默认回车即可This will install Vue 2.x version of the template.For Vue 1.x use: vue init webpack#1.0 my-project? Project name my-project? Project description A Vue.js project? Author runoob &lt;test@runoob.com&gt;? Vue build standalone? Use ESLint to lint your code? Yes? Pick an ESLint preset Standard? Setup unit tests with Karma + Mocha? Yes? Setup e2e tests with Nightwatch? Yes vue-cli · Generated &quot;my-project&quot;. To get started: cd my-project npm install npm run dev Documentation can be found at https://vuejs-templates.github.io/webpack 进入项目，安装并运行：123456$ cd my-project$ cnpm install$ cnpm run dev DONE Compiled successfully in 4388ms&gt; Listening at http://localhost:8080 成功执行以上命令后访问 http://localhost:8080/，可以看见搭建的网页 注意：Vue.js 不支持 IE8 及其以下 IE 版本。 总结：暂时用不到吧，而且也不知道有那些命令 3Vue.js 目录结构 目录/文件 说明 build 项目构建(webpack)相关代码 config 配置目录，包括端口号等。我们初学可以使用默认的。 node_modules npm 加载的项目依赖模块 src 这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：assets: 放置一些图片，如logo等。components: 目录里面放了一个组件文件，可以不用。App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。main.js: 项目的核心文件。 static 静态资源目录，如图片、字体等。 test 初始测试目录，可删除 .xxxx文件 这些是一些配置文件，包括语法配置，git配置等。 index.html 首页入口文件，你可以添加一些 meta 信息或统计代码啥的。 package.json 项目配置文件。 README.md 项目的说明文档，markdown 格式 总结：emmm…，不知道说什么好 4Vue.js 起步 每个 Vue 应用都需要通过实例化 Vue 来实现12345678910111213var vm = new Vue(&#123; el: &apos;#vue_det&apos;, data: &#123; data1:&quot;1&quot;, data2:&quot;2&quot;, data3:&quot;3&quot; &#125;, methods: &#123; function1: function() &#123; return data1; &#125; &#125; &#125;) Vue实例的el对应DOM的iddata用于定义属性methods用于定义的函数，可以通过 return 来返回函数值&#123;&#123; &#125;&#125;用于输出对象属性和函数返回值（用于DOM内）123&lt;div id=&quot;vue_det&quot;&gt; &lt;p&gt;&#123;&#123;data1&#125;&#125;&lt;/p&gt;&lt;/div&gt; 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。 总结：个人觉得就像是创建了一个object实例，然后提供了&#123;&#123; &#125;&#125;方法在DOM里直接显示出数据，并且可以时时改动，挺好理解的。 5Vue.js 模板语法 插值1.数据绑定最常见的形式就是使用&#123;&#123; &#125;&#125;的文本插值2.使用 v-html 指令用于输出 html 代码1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;&#123;&#123;message1&#125;&#125;&lt;/h1&gt; &lt;div v-html=&quot;message2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; message1: &apos;文本插值&apos; message2: &apos;&lt;h1&gt;HTML插值&lt;/h1&gt;&apos; &#125;&#125;)&lt;/script&gt; 属性HTML 属性中的值应使用 v-bind 指令以下实例判断 class2 的值，如果为 true 使用 class1 类的样式，否则不使用该类：1&lt;div v-bind:class=&quot;&#123;&apos;class1&apos;: class2&#125;&quot;&gt; 表达式Vue.js 都提供了完全的 JavaScript 表达式支持。在&#123;&#123; &#125;&#125;里或v-bind:class=””里使用js表达式都没有问题，比如123456789101112&lt;div id=&quot;app&quot;&gt;&#123;&#123;5+5&#125;&#125;&lt;br&gt;&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;&lt;br&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; ok: true, &#125;&#125;)&lt;/script&gt; 指令指令是带有 v- 前缀的特殊属性指令用于在表达式的值改变时，将某些行为应用到 DOM 上1&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; 这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素 参数参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性1&lt;a v-bind:href=&quot;url&quot;&gt;超链接&lt;/a&gt; href就是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定另一个例子是 v-on 指令，它用于监听 DOM 事件：1&lt;a v-on:click=&quot;function&quot;&gt; 修饰符修饰符是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()1&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt; 用户输入在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定12&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;&lt;input v-model=&quot;message&quot;&gt; 这里input通过v-model改变了message的值，同时也反应到了p上 过滤器Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”（|）指示1&#123;&#123; message | function &#125;&#125; 过滤器函数接受表达式的值作为第一个参数。function为函数，message为参数传入function内过滤器可以串联：1&#123;&#123; message | filterA | filterB &#125;&#125; 过滤器是 JavaScript 函数，因此可以接受参数：1&#123;&#123; message | filterA(&apos;arg1&apos;, arg2) &#125;&#125; 这里，message 是第一个参数，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。 缩写Vue.js 为两个最为常用的指令提供了特别的缩写v-bind和v-on12345678&lt;!-- 完整语法 --&gt;&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 完整语法 --&gt;&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt; 总结：Vue.js模板语法还挺多的，我个人感觉更像是把js响应式的写进了DOM里，更加直观一些，语法谁然多，但是都不是很难。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义网页右键菜单（补充）]]></title>
    <url>%2F2018%2F04%2F18%2F2018_4_18_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89%20%2F</url>
    <content type="text"><![CDATA[鼠标事件 button值 备注 click 0 单击鼠标左键 click 1 单击鼠标中键 mousedown 0 按下鼠标左键 mousedown 1 按下鼠标中键 mousedown 2 按下鼠标右键]]></content>
      <tags>
        <tag>鼠标点击事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CSS实现折叠面板]]></title>
    <url>%2F2018%2F04%2F18%2F2018_4_18_1_%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[效果：使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板，要求样式一致。 要使用到的是 radio，label，伪类，兄弟相邻选择器 radio：单选框 label：文本框 伪类：:checked —选中时添加的类兄弟相邻选择器：li+li {…} 我的思路：1创建区域section2在section中建立3个radio，css设置radio的样式：dispaly:none3再创建3个label，绑定对应的radio4在label里写上标题，然后在里面创建div标签，再建立p标签，写入对应的内容5最后在css里给给div绑定对应的css3动画到这里为止差不多就成型了 我遇到的问题：1radio没有单选框效果产生的原因：没有给3个radio给定相同的name属性解决办法：123&lt;input type="radio" id="one" name="cascade" /&gt;&lt;input type="radio" id="two" name="cascade" /&gt;&lt;input type="radio" id="three" name="cascade" /&gt; 2绑定的动画没有动画的过度效果产生原因：高度再没有具体数值时，不会产生动画解决办法：给高度一个固定数值1height: 250px; 建议div高度和section宽度，不要使用百分比，以免出现显示不全或空白太多的情况 3绑定动画后，刷新页面会产生折叠动画产生的原因：我给div绑定了折叠动画，因为不绑定会再失去checked时直接消失，但是绑定了折叠动画会在开始时就先播放动画。解决办法：建议使用css3的过滤1transition: height 1s linear; 过滤只在对应属性改变时才会产生动画。 4折叠框没办法全部折叠产生的原因：radio选择后必须有一个选中解决办法：使用js改变radio只能有一个被选中的情况（还是用到了js…，我感觉还不如用js让多选框只能单选来的简单）1234567891011121314151617代码部分还不会，所以借鉴别人的 document.body.onmousedown = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; target.previousValue = target.checked; &#125; &#125; document.body.onclick = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; if (target.previousValue) &#123; target.checked = false; &#125; &#125; &#125; 但只对点击radio有效。。。 最后贴出我的代码： index.html （html文件）1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;section&gt; &lt;input type="radio" id="one" name="cascade" /&gt; &lt;label for="one"&gt;Collapsible Group Item #1 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;input type="radio" id="two" name="cascade" /&gt; &lt;label for="two"&gt;Collapsible Group Item #2 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;input type="radio" id="three" name="cascade" /&gt; &lt;label for="three"&gt;Collapsible Group Item #3 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;/section&gt; &lt;script src="js/myjs.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css文件）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849*&#123; margin: 0; padding: 0; &#125; body,html&#123; width: 100%; height: 100%; &#125; /*折叠框局域*/ section&#123; width: 500px; margin: auto; margin-top: 20px; border: 1px solid #ddd; border-radius: 4px; &#125; /*设置单选框不可见*/ input[type="radio"] &#123; display: none; &#125; label&#123; display: block; border: 1px solid #ddd; border-radius: 4px; margin: 10px; padding: 10px; background-color: #f5f5f5; overflow: hidden; &#125; div&#123; font-size: 15px; overflow: hidden; height: 0; padding: 0; display: block; margin: -12px; margin-top: 10px; background-color: #fff; border: 1px solid #ddd; border-radius: 0px 0px 4px 4px; transition: height 1s linear; &#125; p&#123; margin: 10px; &#125; /*单选宽选中时改变高度*/ input[type="radio"]:checked+label div&#123; height: 250px; &#125; myjs.js（javascript文件）12345678910111213141516document.body.onmousedown = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; target.previousValue = target.checked; &#125;&#125;document.body.onclick = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; if (target.previousValue) &#123; target.checked = false; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义网页右键菜单]]></title>
    <url>%2F2018%2F04%2F17%2F2018_4_17_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[效果：在特定区域点击鼠标右键，弹出自定义菜单。 要使用到的是 contextmenu 事件 contextmenu效果：初始右键效果 我的思路：1创建区域div2js重新定义右键效果3重定义右键效果为创建一个ul里面是多个li，li里写入菜单文字4创建的ul需要定位在鼠标当前位置5然后创建完ul后给各个li绑定click事件到这里为止差不多就成型了 需要解决的问题：1得创建一个消除ul的方法不然会一直创建ul，那么什么时候应该消除ul，在区域中点击左键或中键，点击右键先的消除ul再重新创建ul，点击ul内部的li，先产生效果再消除ul2创建的ul消除后click事件消失应该在创建ul的时候就绑定事件，如果在ul消失后绑定事件会报错 我遇到的问题：1创建区域时，使用百分比的高度，没效果产生的原因：没有给body和html定义高度，区域的高度百分比继承于body，body继承于html解决办法：1234html,body&#123; width: 100%; height: 100%;&#125; 2给li绑定事件不生效产生的原因：我是通过给产生的li添加属性index值来判断是哪个菜单的，然后获取到li的index值来绑定对应的事件，但是通过 getAttribute() 方法获取的index值默认为字符串，然后使用 if(index == number) 时，判断不相同。解决办法：12let index_0 = li_0.getAttribute("index");index_0 = index_0 - 0; 使用 - 0，可以快速转变为数字类型（算是小及技巧吧！！！） 最后贴出我的代码： index.html （html文件）1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="area"&gt; &lt;p&gt;在区域中点击右键查看菜单&lt;/p&gt; &lt;/div&gt; &lt;script src="js/myjs.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css文件）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657*&#123; margin: 0; padding: 0;&#125;html,body&#123; width: 100%; height: 100%;&#125;#area&#123; width: 50%; height: 50%; margin: auto; margin-top: 100px; background-color: #fff; border: 1px solid #000;&#125;ul&#123; overflow: hidden; position: absolute; list-style-type: none; /*border: 1px solid #000;*/ border-radius: 10px; box-shadow: 0px 0px 5px #000; background-color: #fff; width: 150px;&#125;li&#123; /*margin-left: 10px; margin-right: 10px;*/ padding-top: 5px; padding-bottom: 5px; padding-left: 10px; background-color: #fff; border-bottom: 1px solid #eee; /*cursor: pointer;*/&#125;li&#123; -moz-user-select:none;/*火狐*/ -webkit-user-select:none;/*webkit浏览器*/ -ms-user-select:none;/*IE10*/ -khtml-user-select:none;/*早期浏览器*/ user-select:none;&#125;/*文字不可选中*/.last&#123; border: none;&#125;.box&#123; border: 1px solid #eee; width: 100px; height: 100px; position: absolute; top: 0; left: 0;&#125;.on&#123; background-color: #999;&#125; myjs.js（javascript文件）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163let area = document.getElementById("area");//点击区域let client_x;//鼠标当前的x坐标let client_y;//鼠标当前的y坐标let index = 0;//判断是否有菜单，有为1，无为0let index_1 = 0;//判断菜单1是否已点击，点击为1.未点击为0let index_2 = 0;//判断菜单2是否已点击，点击为1.未点击为0let index_3 = 0;//判断菜单3是否已点击，点击为1.未点击为0//给区域绑定contextmenu事件，重新定义右键效果area.addEventListener("contextmenu",function(e)&#123; if(window.event)&#123; e = window.event; &#125; e.preventDefault(); //阻止原有的菜单 e.returnValue = false; //在IE中阻止原有的菜单 e.stopPropagation(); //判断是否已经有菜单 if(index == 0)&#123; determine(); addlist(); &#125; else&#123; cleanlist(); determine(); addlist(); &#125;&#125;,false);//给区域绑定左键和中键效果，消除菜单area.addEventListener("mousedown",function(e)&#123; if(e.button == 1||e.button == 0)&#123; cleanlist(); &#125;&#125;,false);//获取鼠标当前的xy坐标function determine(e)&#123; e = event || window.event; client_x = e.clientX; client_y = e.clientY;&#125;//产生菜单function addlist()&#123; let ul_0 = document.createElement("ul"); ul_0.setAttribute("id","meau"); for(let i = 0; i &lt; 3; i++)&#123; (function(i)&#123; let li_0 = document.createElement("li"); li_0.setAttribute("index",i); if(i == 2)&#123; li_0.setAttribute("class","last"); &#125; switch(i)&#123; case 0: if(index_1 == 1)&#123; li_0.setAttribute("class","on"); &#125; li_0.innerHTML = "背景变红"; break; case 1: if(index_2 == 1)&#123; li_0.setAttribute("class","on"); &#125; li_0.innerHTML = "字体变大" break; case 2: if(index_3 == 1)&#123; li_0.className += " on"; &#125; li_0.innerHTML = "边框变粗" break; &#125; ul_0.appendChild(li_0); &#125;)(i); &#125; ul_0.style.left = client_x+"px"; ul_0.style.top = client_y+"px"; document.body.appendChild(ul_0); addfunction(ul_0); index = 1;&#125;//清除菜单function cleanlist()&#123; if(index == 0)&#123; return; &#125; let box = document.getElementById("meau"); document.body.removeChild(box); index = 0;&#125;//给产生的菜单添加事件function addfunction(ul_0)&#123; for(let i = 0; i &lt; 3; i++)&#123; (function(i)&#123; let li_0 = ul_0.getElementsByTagName("li")[i]; let index_0 = li_0.getAttribute("index"); index_0 = index_0 - 0; switch(index_0)&#123; case 0: addfunction_0(li_0); break; case 1: addfunction_1(li_0); break; case 2: addfunction_2(li_0); break; &#125; &#125;)(i); &#125;&#125;//给菜单1绑定事件function addfunction_0(li_0)&#123; li_0.addEventListener("click",function(e)&#123; e.stopPropagation(); if(index_1 == 0)&#123; area.style.backgroundColor = "red"; cleanlist(); index_1 = 1; &#125; else&#123; area.style.backgroundColor = "#fff"; cleanlist(); index_1 = 0; &#125; &#125;,false);&#125;//给菜单2绑定事件function addfunction_1(li_0)&#123; li_0.addEventListener("click",function()&#123; if(index_2 == 0)&#123; area.style.fontSize = "32px"; cleanlist(); index_2 = 1; &#125; else&#123; area.style.fontSize = "16px"; cleanlist(); index_2 = 0; &#125; &#125;,false);&#125;//给菜单3绑定事件function addfunction_2(li_0)&#123; li_0.addEventListener("click",function()&#123; if(index_3 == 0)&#123; area.style.border = "5px solid #000"; cleanlist(); index_3 = 1; &#125; else&#123; area.style.border = "1px solid #000"; cleanlist(); index_3 = 0; &#125; &#125;,false);&#125;]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F04%2F17%2F2018_4_17_1_%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2_%E5%A6%82%E4%BD%95%E7%94%A8github%20page%2Bhexo%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[emmm…,这是我的第一篇博客，不知道该写什么，就记录一下自己怎么跟着大佬的步伐使用github和hexo搭建个人博客好了。 要使用到的是github,node.js,hexo 我的博客搭建在 GitHub Pages上 GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。 1安装git node.js直接next选择安装目录即可 2配置node.js环境变量在环境变量里的path下添加node.js的安装目录即可 3安装hexo打开cmd,进入node.js安装目录下,利用 npm 命令即可安装1npm install -g hexo 以上是安装必要的组件,然后可以开始搭建个人博客 4搭建个人博客依旧在cmd的node.js目录下输入 1mkdir blog &amp;&amp; cd blog bolg是你的博客目录,可以自行更改,记得备份好文件,以免丢失1hexo init 安装依赖包1npm install 至此,博客搭建成功! 当然,仅仅是本地的了。此时执行1hexo g 即可生成静态页面，然后执行1hexo s 访问 http://localhost:4000 即可看到你的博客。 5部署博客到github注册github账号,并登录 创建仓库 注：Github Pages的Repository名字是特定的，比如我Github账号是FrattiNor，那么我Github Pages Repository的名字就是FrattiNor.github.io。 设置github pages 选择主题并发布即可 然后复制你github page的https链接进入的bolg文件夹下修改_config.yml文件修改底部的repository为刚刚复制的链接如下 deploy:type: gitrepository: https://github.com/FrattiNor/FrattiNor.github.io.gitbranch: master 最后回到cmd执行12npm install hexo-deployer-git --save （这命令是为了解决hexo新版本的部署问题） 12hexo g （这是重新生成blog） 12hexo d（这是将本地blog部署到github的仓库） 试试在浏览器的地址栏输入：“https://你的用户名.github.io/” 这样个人博客就搭建完成了，然后就可以修改主题和发布博文了 主题在这里 https://github.com/hexojs/hexo/wiki/Themes博文使用makedown编写]]></content>
      <tags>
        <tag>第一</tag>
        <tag>如何搭建个人博客</tag>
      </tags>
  </entry>
</search>
