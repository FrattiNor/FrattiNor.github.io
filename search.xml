<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack和vue-cli学习]]></title>
    <url>%2F2018%2F04%2F24%2F2018_4_24_vue-cli%E5%92%8Cwebpack%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前几天学习了Vue.js，使用起来确实是非常的便捷，不需要自己手动的去操作DOM，只需要改变数据就能实现DOM的改变。然后我搜了一下Vue相关的项目，本来是打算自己先做着试试的，结果发现完全看不懂啊，一个完整的项目涉及到的东西还是非常的多。 首先我看到的就是Vue-cli，这是一个vue官方提供的vue项目的脚手架工具，emmm。。。，看不懂，脚手架工具是个什么玩意，然后我就去搜了一下vue-cli相关的知识，大概的意思应该是快捷的创建好一个vue项目模板，差不多就是一个样本，你照着修改就行了。 接下来就是要创建模板了，官方提供了2种模板使用： 基于vue cli和browserify的项目模板基于vue cli和webpack的项目模板 emmm。。。browserify是个什么东西，我还清楚，webpack呢有听说过，是个打包工具来着，所以我决定要创建webpack的项目模板 安装vue-cli脚手架工具1npm install vue-cli -g 安装webpack打包工具1npm install webpack -g 创建webpack-simple模板1vue init webpack-simple my-webpack-simple-demo 会产生对应的my-webpack-simple-demo项目文件夹 打开文件夹文件树结构如下： ├─.babelrc // babel配置文件├─.gitignore├─index.html // 主页├─package.json // 项目配置文件├─README.md├─webpack.config.js // webpack配置文件├─dist // 发布目录│ ├─.gitkeep├─src // 开发目录│ ├─App.vue // App.vue组件│ ├─main.js // 预编译入口 。。。还是看不懂项目里的都是些啥，我只知道index.html 是首页README.md 是展示的makedown文件package.josn 是json文件具体什么用也不清楚其他一概不知，一个完整的项目东西也太多了，和做一个单独的网页配上css和js完全不一样 所以大概还得一样一样学过来 那么既然这个是基于vue-cli和webpack的项目模板，所以就先从webpack学起吧！ 跟着别人的教程走吧 首先webpack是什么1.一个打包工具2.一个模块加载工具3.各种资源都可以当成模块来处理 emmm。。。，说真的，每次学新的东西的时候，都是看着这种很专业的术语来学习真的是非常的不明觉厉啊，前面看git命令的时候也是一样，所以还是先看后面的例子吧 对于模块的组织，通常有如下几种方法：1.通过书写在不同的文件中，使用script标签进行加载 这个是我目前会的那种。。。 2.CommonJS进行加载（NodeJS就是使用这种方式） CommonJS又是什么，nodejs还没开始看呢。。 3.AMD进行加载（require.js使用这种方式） emmm… 4.ES6模块 es6也没怎么看 算了，慢慢来吧 webpack的特点 1.丰富的插件，方便进行开发工作2.大量的加载器，包括加载各种静态资源3.代码分割，提供按需加载的能力4.发布工具 webpack的优势1.webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。2.能被模块化的不仅仅是 JS 了。3.开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。4.扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。 大概是意思就是我要使用webpack还得先去学CommonJS ok！开始webpack的例子了还是实际的代码比较容易理解 安装webpack，前面安装过了 使用webpack12npm init # 会自动生成一个package.json文件npm install webpack --save-dev #将webpack增加到package.json文件中 如果要安装开发工具1npm install webpack-dev-server --save-dev webpack的配置每个项目下都必须配置有一个webpack.config.js，它的作用如同常规的gulpfile.js/Gruntfile.js，就是一个配置项，告诉webpack他需要做什么下面是个例子12345678910111213141516171819202122232425262728293031323334353637var webpack = require(&apos;webpack&apos;);var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);module.exports = &#123; //插件项 plugins: [commonsPlugin], //页面入口文件配置 entry: &#123; index : &apos;./src/js/page/index.js&apos; &#125;, //入口文件输出配置 output: &#123; path: &apos;dist/js/page&apos;, filename: &apos;[name].js&apos; &#125;, module: &#123; //加载器配置 loaders: [ &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;, &#123; test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; &#125;, &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;, &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125; ] &#125;, //其它解决方案配置 resolve: &#123; //查找module的话从这里开始查找 root: &apos;E:/github/flux-example/src&apos;, //绝对路径 //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名 extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;], //模块别名定义，方便后续直接引用别名，无须多写长长的地址 alias: &#123; AppStore : &apos;js/stores/AppStores.js&apos;, ActionType : &apos;js/actions/ActionType.js&apos;, AppAction : &apos;js/actions/AppAction.js&apos; &#125; &#125;&#125;; plugins 是插件项，这里我们使用了一个CommonsChunkPlugin的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用entry 是页面的入口文件配置，output是对应的输出配置文件（既入口文件最终要生成什么名字的文件，存放在哪里）module.loaders 是最关键的一块配置，它告诉webpack每种文件都需要使用什么加载器来处理。加载器需要使用npm来加载resolve模块 是查找模块的路径和扩展名和别名 webpack开始使用1.正确安装webpack2.书写entry.js文件1document.write(&quot;entry&quot;); 3.书写index.html12345678&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 4.执行命令，生成bundle.js1$ webpack ./entry.js bundle.js 5.打开html文件，显示entry6.增加content.js文件1module.exports = &quot;content&quot; 7.修改entry.js1document.write(require(&quot;./content.js&quot;)); 8.打开html文件，显示content9.增加css.css文件123body&#123; background:yellow;&#125; 10.修改entry.js12require(&quot;!style-loader!css-loader!./style.css&quot;);document.write(require(&quot;./content.js&quot;)); 11.执行命令，安装加载器1npm install css-loader style-loader 12.执行webpack命令1$ webpack ./entry.js bundle.js --module-bind &quot;css=style-loader!css-loader&quot; 14.打开html文件，显示背景黄色15.使用配置文件默认配置文件为webpack.config.js增加webpack.config.js文件123456789101112module.exports = &#123; entry: &quot;./entry.js&quot;, output: &#123; path: __dirname, filename: &quot;bundle.js&quot; &#125;, module: &#123; loaders: [ &#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125; ] &#125;&#125;; 执行命令1$ webpack 16.发布服务器安装服务器12$ npm install webpack-dev-server -g$ webpack-dev-server --progress --colors 服务器可以自动生成和刷新，修改代码保持后自动更新画面http://localhost:8080/webpack-dev-server/bundle 17.webpack常用命令1$ webpack --display-error-details 后面的参数“–display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。1234$ webpack --config XXX.js //使用另一份配置文件（比如webpack.config2.js）来打包$ webpack --watch //监听变动并自动打包$ webpack -p //压缩混淆脚本，这个非常非常重要！$ webpack -d //生成map映射文件，告知哪些模块被最终打包到哪里了 总结一下吧：vue-cli是脚手架工具，用来创建vue项目模板，webpack是打包工具，总的来说就是把多个文件打包成一个文件，不仅仅是js文件，静态资源也可以打包，学习webpack有那么一点感觉，但又很模糊，先到这里吧。]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js数组函数]]></title>
    <url>%2F2018%2F04%2F21%2F2018_4_21_2_%E6%95%B0%E7%BB%84%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[push：将参数添加到原数组末尾，并返回数组的长度 concat：返回一个新数组，是将参数添加到原数组中构成的 splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,… reverse：将数组反序 sort(orderfunction)：按指定的参数对数组进行排序 slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组 实例： 1、数组的创建123var arrayObj = new Array(); //创建一个数组 var arrayObj = new Array([size]); //创建一个数组并指定长度，注意不是上限，是长度 var arrayObj = new Array([element0[, element1[, ...[, elementN]]]]); 创建一个数组并赋值 要说明的是，虽然第二种方法创建数组指定了长度，但实际上所有情况下数组都是变长的，也就是说即使指定了长度为5，仍然可以将元素存储在规定长度以外的，注意：这时长度会随之改变。 2、数组的元素的访问12var testGetArrValue=arrayObj[1]; //获取数组的元素值 arrayObj[1]= &quot;这是新值&quot;; //给数组元素赋予新的值 3、数组元素的添加 arrayObj. push([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组结尾，并返回数组新长度arrayObj.unshift([item1 [item2 [. . . [itemN ]]]]);// 将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度arrayObj.splice(insertPos,0,[item1[, item2[, . . . [,itemN]]]]);//将一个或多个新元素插入到数组的指定位置，插入位置的元素自动后移，返回””。 4、数组元素的删除123arrayObj.pop(); //移除最后一个元素并返回该元素值 arrayObj.shift(); //移除最前一个元素并返回该元素值，数组中元素自动前移 arrayObj.splice(deletePos,deleteCount); //删除从指定位置deletePos开始的指定数量deleteCount的元素，数组形式返回所移除的元素 5、数组的截取和合并 arrayObj.slice(start, [end]); //以数组的形式返回数组的一部分，注意不包括 end 对应的元素，如果省略 end 将复制 start 之后的所有元素arrayObj.concat([item1[, item2[, . . . [,itemN]]]]); //将多个数组（也可以是字符串，或者是数组和字符串的混合）连接为一个数组，返回连接好的新的数组 6、数组的拷贝12arrayObj.slice(0); //返回数组的拷贝数组，注意是一个新的数组，不是指向 arrayObj.concat(); //返回数组的拷贝数组，注意是一个新的数组，不是指向 7、数组元素的排序12arrayObj.reverse(); //反转元素（最前的排到最后、最后的排到最前），返回数组地址 arrayObj.sort(); //对数组元素排序，返回数组地址 8、数组元素的字符串化12arrayObj.join(separator); //返回字符串，这个字符串将数组的每一个元素值连接在一起，中间用 separator 隔开。 toLocaleString 、toString 、valueOf：可以看作是join的特殊用法，不常用]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue小练习_图书管理]]></title>
    <url>%2F2018%2F04%2F21%2F2018_4_21_1_vue%E7%BB%83%E4%B9%A0_%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[这个是最后完成的样子demo 昨天学习看完了基本的Vue.js的知识点，今天开始做一些vue小练习 小练习目标： 实现动态渲染html页面的图书实现图书的添加和删除 差不多就这样吧，这个练习刚刚看到是时候还是觉得挺简单的，但是实际写起来就是觉得无从下手，大概是刚刚看完vue吧，没办法直接使用。所以我就先写了html和css大概这样吧 接下来就是写js了 我的想法如下:1 写一个vue实例vm对应图书的div2 在vm里写一个books数组，数组里写图书的信息，3 然后在html里通过v-for渲染4 然后创建一个对象（newBook），然后给newBook写上书名（bookName），作者（author），价格（price）等属性5 给删除按钮写删除对应行的函数（del），写在methods里6 添加书籍里的书名，作者，价格用v-model对应起newBook.bookName，newBook.author，newBook.price。7 给添加按钮写添加函数（add） 大概的想法是这样的 然后我开始实现我的想法遇到了很多问题，这大概就是第一使用vue吧 遇到的问题如下:1 js文件里的vue实例或在html属性里写错，可能会导致实例对应的DOM元素直接消失。我接二连三的遇到这个问题，一直不知道错在哪，然后就浪费了很多时间，比如v-model=”newbook.bookname”这个大小写问题，我一直没有发现 解决办法：不要写错咯 2 在写del函数的时候没办法删除对应行，暂时还不知道怎么解决，不过同时也学会了一个新的js的数组操作函数Array.splice(x,y)x对应的是数组的位置，y是要删除的数量，想到解决办法我会写上去的。 解决办法：目前的想法是在渲染的时候给button添加一个index属性，来确定是哪一行前面的想法不知道可不可行，我给books添加了index属性，我是用event.target确定当前button的，但是target.index不能使用，所以我把button的index属性改为了id属性，通过target.id确定是数组的哪个位置，然后把删除掉数组对应的位置不过只是删除数组元素还是会产生问题，就是删除一个元素后，会打乱原来的index，产生断层，所以还要在del函数里给数组对应位置后面的所有对象的index都减一，才能保证index不会产生断层。 3 在写add函数的时候，遇到这样一个问题，就是把newBook对象通过push函数添加进books数组里的时候，我再改变newBook对象的属性，books数组里对应的位置也会发生改变，这大概就是响应式吧，原来还会这样的。 解决办法：在add函数里重新let一个对象，把newBook的属性全部copy一份给新对象，然后把新对象push进数组就没有这个问题了 4 在写add函数的时候，还有遇到了一个问题，就是明明我在data里申明了newBook这个对象，但是在push的时候使用this.books.push(newBook)时报错说newBook没有申明，后来我想了想，大概是newBook不是全局变量的原因吧 解决办法：使用时要用this.newBook，this代表当前实例 最后附上我的代码index.html（html）12345678910111213141516171819202122232425262728&lt;div id=&quot;book&quot;&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt;&lt;td&gt;书名&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;价格&lt;/td&gt;&lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr v-for=&quot;book in books&quot;&gt; &lt;td&gt;&#123;&#123; book.bookName &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; book.author &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; book.price &#125;&#125;&lt;/td&gt; &lt;td&gt;&lt;button v-bind:id=&quot;book.index&quot; v-on:click=&quot;del&quot;&gt;删除&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;添加书籍&lt;/p&gt; &lt;label&gt;书名&lt;/label&gt; &lt;input v-model=&quot;bookName&quot; type=&quot;text&quot; /&gt; &lt;label&gt;作者&lt;/label&gt; &lt;input v-model=&quot;author&quot; type=&quot;text&quot; /&gt; &lt;label&gt;价格&lt;/label&gt; &lt;input v-model.number=&quot;price&quot; type=&quot;number&quot; /&gt; &lt;button v-on:click=&quot;add&quot;&gt;添加&lt;/button&gt; &lt;/div&gt; &lt;script src=&quot;js/myjs.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394*&#123; margin: 0; padding: 0;&#125;html,body&#123; width: 100%; height: 100%;&#125;#book&#123; width: 100%;&#125;h1&#123; margin: 20px;&#125;div&#123; margin: 20px;&#125;table&#123; width: 95%;&#125;tr&#123; width: 100%;&#125;td&#123; width: 25%;&#125;td,table&#123; border-collapse: collapse;&#125;thead td&#123; font-weight:bold; font-size: 18px; height: 30px; border-bottom: 2px solid #ddd;&#125;tbody td&#123; padding-bottom: 10px; font-size: 13px; height: 40px; border-top: 1px solid #ddd;&#125;label&#123; /*display: block;*/ font-weight:bold; /*margin: 5px 0;*/&#125;p&#123; margin: 20px 0 10px 0;&#125;input::-webkit-outer-spin-button,input::-webkit-inner-spin-button &#123; -webkit-appearance: none !important; margin: 0;&#125;input[type=&quot;text&quot;],input[type=&quot;number&quot;]&#123; display: block; margin: 3px 0 10px 0; width: 95%; padding: 8px; border-radius: 4px; border: 1px solid #ddd; outline:none;&#125;input[type=&quot;text&quot;]:focus,input[type=&quot;number&quot;]:focus&#123; border: 1px solid #3af; box-shadow: 0 0 10px 1px #ddd;&#125;button&#123; background-color: #3E74B5; border: 1px solid #3868A3; padding: 7px 14px; border-radius: 4px; color: #fff; outline: none;&#125;button:hover&#123; background-color:#325C8F;&#125; myjs.js（js）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var vm = new Vue(&#123; el: &quot;#book&quot;, data: &#123; bookName:&quot;&quot;, author:&quot;&quot;, price:&quot;&quot;, index: &quot;3&quot;, books: [ &#123; bookName: &quot;红楼梦&quot;, author: &quot;曹雪芹&quot;, price: &quot;32&quot;, index: &quot;0&quot; &#125;, &#123; bookName: &quot;水浒传&quot;, author: &quot;施耐庵&quot;, price: &quot;30&quot;, index: &quot;1&quot; &#125;, &#123; bookName: &quot;三国演义&quot;, author: &quot;罗贯中&quot;, price: &quot;24&quot;, index: &quot;2&quot; &#125;, &#123; bookName: &quot;西游记&quot;, author: &quot;吴承恩&quot;, price: &quot;20&quot;, index: &quot;3&quot; &#125; ] &#125;, methods: &#123; del: function(event)&#123; let tar = event.target; this.books.splice(tar.id,1); for(let i = tar.id;i &lt; this.index;i++)&#123; this.books[i].index--; &#125; this.index--; &#125;, add: function()&#123; this.index++; let newBook = new Object(); newBook.bookName = this.bookName; newBook.author = this.author; newBook.price = this.price; newBook.index = this.index; if(newBook.bookName == &quot;&quot;)&#123; alert(&quot;书名为空&quot;); return; &#125; if(newBook.author == &quot;&quot;)&#123; alert(&quot;作者为空&quot;); return; &#125; this.books.push(newBook); this.bookName = &quot;&quot;; this.author = &quot;&quot;; this.price = &quot;&quot;; &#125; &#125;&#125;) 最后总结一下吧：1.vue的响应式渲染确实非常的好用，改变实例的属性就能动态渲染html页面2.我还不太熟悉vue的写法，经常漏写逗号，写多了就好3.今天还知道了一些新的数组函数，过会我把今天看的数组函数都列一下吧4.总的来说vue还是非常便利的]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript闭包问题]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_5_Javascript%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[闭包这个问题，其实是我一直没有搞懂的，到现在为止也没有，但是我很早之前就遇到过闭包的问题，当时要给多个li绑定事件，为了方便我使用了for循环一个一个的给每个li绑定事件，但是，结果发现只有最后一个li绑定了事件，这个问题一直困扰着我，后来问了学长才知道，这个是闭包问题。后来用了立即执行函数才解决问题直到现在我也不太明白闭包到底是个什么东西，但大概有个概念就是变量作用域的问题，在函数外面访问不到函数内部变量，函数内部可以访问函数外部的变量，从而导致了闭包问题的产生那么要怎么样才能在访问函数内部的变量呢，这里就是闭包的概念了，在函数内部写一个函数，当然能访问到函数的变量，然后再将变量做为返回值，这样函数外部就能访问到函数内部的变量了。。。。emmm，大概是这么个意思吧。 前面是我个人对闭包的简单理解 下面是借鉴dalao对闭包的理解: 我的理解是，闭包就是能够读取其他函数内部变量的函数。 由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。 所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。123456789101112131415161718192021function f1()&#123; var n=999; nAdd=function()&#123;n+=1&#125; function f2()&#123; alert(n); &#125; return f2; &#125; var result=f1(); result(); // 999 nAdd(); result(); // 1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。 为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。 这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 基本命令]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_4_git%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1git init 本地创建git仓库 1git remote add origin https://github.com/xxxxxx/xxxxx.git 关联本地仓库到对应的github仓库 1git add 文件名/文件夹名 添加文件到本地仓库 1git commit -m &quot;形容这次操作&quot; 提交信息 1git push origin master 上传到github仓库 1git rm -r --cached idea 删除本地仓库的idea文件，cached不会删除本地文件，去掉会删除本地文件 我目前就知道这么多 然后今天还看见了一个比较全面的git命令表格 我就照搬过来了 个人本地使用 行为 命令 备注 初始化 init 在本地的当前目录里初始化git仓库 clone https://…. 从网络上某个地址拷贝仓库(repository)到本地 查看当前状态 status 查看当前仓库的状态。碰到问题不知道怎么办的时候，可以通过看它给出的提示来解决问题 查看不同 diff 查看当前状态和最新的commit之间不同的地方 添加文件 add -A 这算是相当通用的了。在commit之前要先add 撤回stage的东西 checkout - - . 这里用小数点表示撤回所有修改，在- -的前后都有空格 提交 commit -m “提交信息” 提交信息最好能体现更改了什么 删除未tracked clean -xf 删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件 查看提交记录 log 查看当前版本及之前的commit记录 reflog HEAD的变更记录 版本回退 reset –hard 版本号 回退到指定版本号的版本，该版本之后的修改都被删除。同时也是通过这个命令回到最新版本。需要reflog配合 个人使用远程仓库 行为 命令 备注 设置用户名 config - -global user.name “你的用户名” 设置邮箱 config - -global user.email “你的邮箱” 生成ssh key ssh-keygen -t rsa -C “你的邮箱” 这条命令前面不用加git 添加远程仓库 remote add origin 你复制的地址 设置origin 上传并指定默认 push -u origin master 指定origin为默认主机，以后push默认上传到origin上 提交到远程仓库 push 将当前分支增加的commit提交到远程仓库 从远程仓库同步 pull 在本地版本低于远程仓库版本的时候，获取远程仓库的commit]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github 创建本地仓库以及上传到github仓库]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_3_github%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%BB%A5%E5%8F%8A%E4%B8%8A%E4%BC%A0%E5%88%B0github%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[1 注册github账号 2 新建仓库 3 安装git 4 打开Git Bash，输入以下命令生成密钥来验证身份1ssh-keygen -C &apos;your@email.address&apos; -t rsa 之后会要求输入密码，输入正确后会在windows当前用户目录下生成.ssh文件夹 5 把文件夹下的id_rsa.pub文件内容全部复制 6 然后打开github账户设置 7 打开ssh keys，右上角点击add ssh key，key栏粘贴刚才的密钥。 8 在你想要文件夹下打开Git Bash，输入1git init 会在文件夹下创建.git文件夹（隐藏的） 9 添加单个文件（test.txt）本地仓库1git add test.txt 10 把添加的文件提交到仓库1git commit -m &quot;add test.txt&quot; 命令行引号里面是我们用来描述这次操作，方便以后我们查记录的时候能清楚这次操作主要修改 到这里本地仓库已经完成了 最后提交到github仓库12git remote add origin https://github.com/xxxxxx/xxxxx.gitgit push origin master 完成]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习总结]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_2_Vue.js%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[已经学习了基本的Vue.js我来总结一下具体学了什么我把Vue.js分成几类1Vue实例 Vue实例写在js文件里Vue实例有以下的属性 el：对应具体的DOM data：写实例的变量 methods：写实例的函数 computed：写实例的计算属性（计算属性类似methods，区别是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行） watch：给对应的实例变量写回调函数，在变量发生改变时触发 暂时只学习了这些属性 Vue实例有以下的方法 vm.\$watch( expOrFn, callback, [options] )：对应watch，再实例变量发生改变时触发，回调函数得到的参数为新值和旧值。 vm.\$set( target, key, value )：这是全局 Vue.set 的别名。设置对象的属性。 vm.\$delete：这是全局 Vue.delete 的别名。删除对象的属性。 vm.\$on( event, callback )：给实例绑定一个自定义事件。 vm.\$once( event, callback )：给实例绑定一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。 vm.\$off( [event, callback] )：移除自定义事件监听器。 vm.\$emit( event, […args] )：触发当前实例上的事件。附加参数都会传给监听器回调。 暂时只学习了这些方法 Vue实例的生命周期 关于Vue的生命周期我还是不太理解，所以就先放上dalao的解释了 Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。在这些事件响应方法中的this直接指向的是vue的实例。 Vue提供的可以注册的钩子： beforeCreate在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。 created实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，\$el 属性目前不可见。 beforeMount在挂载开始之前被调用：相关的 render 函数首次被调用。 mountedel 被新创建的 vm.\$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.\$el 也在文档内。 beforeUpdate数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。 updated由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。 beforeDestroy实例销毁之前调用。在这一步，实例仍然完全可用。 destroyedVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。 2Vue指令 指令：是带有V-前缀的特殊属性，通过属性来操作元素Vue基本指令 v-text:在元素当中插入值,只能是文本v-html:在元素不中不仅可以插入文本，还可以插入标签 v-if根据表达式的true或false来动态插入和移除元素（代码注释） v-show根据表达式的true或false来隐藏和显示元素（css：display:none） v-for根据变量的值来循环渲染元素（用法类似for in） v-on监听元素事件，并执行相应的操作（相当于给元素添加监听器）v-on 缩写（v-on:click == @click） v-bind给元素绑定属性，可以添加表达式动态的判断是否添加v-bind 缩写（v-bind:href == :href） v-model实现了数据和视图的双向绑定分成了3步： 1）把元素的值和数据相绑定 2）当输入内容时，数据同步发生变化，视图 —数据的驱动 3）当改变数据时，输入内容也会发生变化，数据 -&gt; 视图的驱动 自定义指令通过directive来注册指令，可以注册全局指令和局部指令 Vue指令除了可以添加表示式，还可以添加修饰符 Vue.js 为 v-on 提供了 事件修饰符 .stop阻止事件冒泡 .prevent不再重载页面 .capture添加事件侦听器时使用时间捕获模式 .self只当事件在该元素本身（而不是子元素）触发时触发回调 .once事件只能点击一次 修饰符例子如下： 1234567891011121314151617&lt;div id=&quot;app&quot;&gt;&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;/div&gt; 按键修饰符v-on:keyup.13=”submit”只有在 keyCode 是 13 时调用 vm.submit() 因为记住全部按键太难了，所以Vue提供了按键别名 全部的按键别名： .enter.tab.delete (捕获 “删除” 和 “退格” 键).esc.space.up.down.left.right.ctrl.alt.shift.meta 3其他Vue除了实例和指令外，还有一些其他的知识点 3.1 数据绑定最常见的形式就是使用 &#123;&#123;…&#125;&#125;（双大括号）的文本插值： 3.2 Vue组件组件可以扩展 HTML 元素，封装可重用的代码。 我个人对组件的看法是类似于DOM元素的东西，通俗的讲就是HTMl的标签 component可以用来注册组件，可以注册全局组件和局部组件父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。但如果子组件要把数据传递回去，就需要使用自定义事件！我们可以使用 v-on 绑定自定义事件 3.3 Vue.js 路由通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。Vue.js 路由需要载入 vue-router 库 暂时应该就学了这些东西。。。以后学的再补充吧。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（四）]]></title>
    <url>%2F2018%2F04%2F20%2F2018_4_20_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[14Vue.js 自定义指令 Vue 允许注册自定义指令。指令（v-model v-show 等。。）使用 directives 来注册指令我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用12345678910111213141516171819&lt;div id=&quot;app&quot;&gt; &lt;p&gt;页面载入时，input 元素自动获取焦点：&lt;/p&gt; &lt;input v-focus&gt;&lt;/div&gt; &lt;script&gt;// 注册一个全局自定义指令 v-focusVue.directive(&apos;focus&apos;, &#123; // 当绑定元素插入到 DOM 中。 inserted: function (el) &#123; // 聚焦元素 el.focus() &#125;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 钩子函数bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。unbind: 只调用一次， 指令与元素解绑时调用。 钩子函数参数el: 指令所绑定的元素，可以用来直接操作 DOM 。binding: 一个对象，包含以下属性： name: 指令名，不包括 v- 前缀。value: 指令的绑定值， 例如： v-my-directive=”1 + 1”, value 的值是 2。oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。expression: 绑定值的字符串形式。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”。arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”。modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。 vnode: Vue 编译生成的虚拟节点。oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 1234567891011121314151617181920212223&lt;div id=&quot;app&quot; v-runoob:hello.a.b=&quot;message&quot;&gt;&lt;/div&gt; &lt;script&gt;Vue.directive(&apos;runoob&apos;, &#123; bind: function (el, binding, vnode) &#123; var s = JSON.stringify el.innerHTML = &apos;name: &apos; + s(binding.name) + &apos;&lt;br&gt;&apos; + &apos;value: &apos; + s(binding.value) + &apos;&lt;br&gt;&apos; + &apos;expression: &apos; + s(binding.expression) + &apos;&lt;br&gt;&apos; + &apos;argument: &apos; + s(binding.arg) + &apos;&lt;br&gt;&apos; + &apos;modifiers: &apos; + s(binding.modifiers) + &apos;&lt;br&gt;&apos; + &apos;vnode keys: &apos; + Object.keys(vnode).join(&apos;, &apos;) &#125;&#125;)new Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;xxxx!&apos; &#125;&#125;)&lt;/script&gt; 有时候我们不需要其他钩子函数，我们可以简写函数1234Vue.directive(&apos;runoob&apos;, function (el, binding) &#123; // 设置指令的背景颜色 el.style.backgroundColor = binding.value.color&#125;) 总结：Vue支持写自定义函数，同样也是响应式的函数，根据参数的变化而变化。具体的还不太清楚。 15Vue.js 路由 Vue.js 路由允许我们通过不同的 URL 访问不同的内容。通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。Vue.js 路由需要载入 vue-router 库Vue.js + vue-router 可以很简单的实现单页应用。 html12345678910111213141516&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;app&quot;&gt; &lt;h1&gt;Hello App!&lt;/h1&gt; &lt;p&gt; &lt;!-- 使用 router-link 组件来导航. --&gt; &lt;!-- 通过传入 `to` 属性指定链接. --&gt; &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt; &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt; &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar&lt;/router-link&gt; &lt;/p&gt; &lt;!-- 路由出口 --&gt; &lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt; js12345678910111213141516171819202122232425262728293031// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter) // 1. 定义（路由）组件。// 可以从其他文件 import 进来const Foo = &#123; template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; &#125;const Bar = &#123; template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; &#125; // 2. 定义路由// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是// 通过 Vue.extend() 创建的组件构造器，// 或者，只是一个组件配置对象。// 我们晚点再讨论嵌套路由。const routes = [ &#123; path: &apos;/foo&apos;, component: Foo &#125;, &#123; path: &apos;/bar&apos;, component: Bar &#125;] // 3. 创建 router 实例，然后传 `routes` 配置// 你还可以传别的配置参数, 不过先这么简单着吧。const router = new VueRouter(&#123; routes // （缩写）相当于 routes: routes&#125;) // 4. 创建和挂载根实例。// 记得要通过 router 配置参数注入路由，// 从而让整个应用都有路由功能const app = new Vue(&#123; router&#125;).$mount(&apos;#app&apos;) // 现在，应用已经启动了！ 总结：Vue.js路由很好理解，就是本来是多页面的网页，可以通过单页来实现，根据点击的router-link的url不同，在下面router-view处会渲染不同的页面来实现单页面跳转效果。还有就是使用起来可能有点小困难吧。。。意思很好理解，实际操作应该不简单 到这里基础的Vue.js已经学完了，感觉上和以前学JQuery没什么差别，感觉上就是看了的，基本都看懂了，但是实际使用起来就是无从下手的感觉，总感觉看了跟没有看一样，所以还是找点Vue的练习做做吧。。。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于事件冒泡和事件捕获（二）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_5_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[附上今天看见的非常形象的事件冒泡代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/vue/2.1.3/vue.js&quot;&gt;&lt;/script&gt; &lt;style&gt; * &#123; box-sizing: border-box; margin: 0; padding: 20px; transition: background 800ms; &#125; ul &#123; height: 100%; list-style: none; background: hsl(193, 66%, 85%); &#125; li &#123; height: 100%; background: hsl(193, 66%, 95%); &#125; .highlight &#123; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;One&lt;/li&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;Two&lt;/li&gt; &lt;ul @click=&quot;callback($event)&quot;&gt; &lt;li @click=&quot;callback($event)&quot;&gt;Three. Click Me!!!&lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; var pause = 200; new Vue(&#123; el: &quot;#app&quot;, methods: &#123; callback(event) &#123; var ms = event.timeout = (event.timeout + pause) || 0; var target = event.currentTarget; console.log(target); setTimeout(function() &#123; target.classList.add(&apos;highlight&apos;); setTimeout(function() &#123; target.classList.remove(&apos;highlight&apos;); &#125;, pause); &#125;, ms); &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于事件冒泡和事件捕获]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_4_%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7%2F</url>
    <content type="text"><![CDATA[今天在学习Vue,js时接触到了事件修饰符.capture，意思为添加事件侦听器时使用事件捕获模式，不太明白，所以搜索了一下捕获模式，才明白原来是事件冒泡和事件捕获，虽然很早之前就已经接触过事件冒泡和事件捕获，但是一直都是一个很模糊的概念，没有去了解过，所以这次我就好好的了解了一下关于事件冒泡和事件捕获 事件冒泡：即事件由子元素向祖先元素传播事件捕获：即事件由祖先元素向子元素传播要说明的是在IE浏览器和opera浏览器中，是不存在这个阶段的。 addEventListener(type,fn,boolean)，前面两个参数不用解释，第三个参数boolean，就是决定注册事件发生在捕 获阶段还是冒泡阶段，具体参考如下：true : 捕获阶段false : 冒泡阶段 在默认情况下，发生在一个子元素上的单击事件（或者其他事件），如果在其父级元素绑定了一个同样的事件，此时点击子元素，click事件会首先被子元素捕获，执行绑定的事件程序，之后会被父级元素捕获，再次激发一段脚本的执行，这就是所谓的“事件冒泡”。 我个人的理解所谓的事件冒泡和事件捕获就是事件发生的顺序，冒泡是从小向大发生，也就是先子元素发生事件，再父元素发生事件，捕获则相反，一般来说，事件冒泡比较多，我个人接触的也都是事件冒泡，以前遇到过事件冒泡相关的问题，就是子元素触发了事件，父元素也同样触发了事件，因为都绑定了click事件，只要给子元素的事件添加阻止冒泡即可1event.stopPropagation() event.stopPropagation()方法这是阻止事件的冒泡方法，不让事件向documen上蔓延，但是默认事件任然会执行event.preventDefault()方法这是阻止默认事件的方法return false ；这个方法比较暴力，他会同事阻止事件冒泡也会阻止默认事件]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（三）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_3_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[11Vue.js 事件处理器 事件监听可以使用 v-on 指令通常情况下，我们需要使用一个方法来调用 JavaScript 方法。v-on 可以接收一个定义的方法来调用。1234567891011121314151617181920212223242526&lt;div id=&quot;app&quot;&gt; &lt;!-- `greet` 是在下面定义的方法名 --&gt; &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: &apos;#app&apos;, data: &#123; name: &apos;Vue.js&apos; &#125;, // 在 `methods` 对象中定义方法 methods: &#123; greet: function (event) &#123; // `this` 在方法里指当前 Vue 实例 alert(&apos;Hello &apos; + this.name + &apos;!&apos;) // `event` 是原生 DOM 事件 if (event) &#123; alert(event.target.tagName) &#125; &#125; &#125;&#125;)// 也可以用 JavaScript 直接调用方法app.greet() // -&gt; &apos;Hello Vue.js!&apos;&lt;/script&gt; 除了直接绑定到一个方法，也可以用内联 JavaScript 语句123456789101112131415&lt;div id=&quot;app&quot;&gt; &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt; &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, methods: &#123; say: function (message) &#123; alert(message) &#125; &#125;&#125;)&lt;/script&gt; 事件修饰符Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。Vue.js通过由点(.)表示的指令后缀来调用修饰符。.stop.prevent.capture.self.once123456789101112131415&lt;!-- 阻止单击事件冒泡 --&gt;&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;&lt;!-- 提交事件不再重载页面 --&gt;&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;&lt;!-- 修饰符可以串联 --&gt;&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;&lt;!-- 只有修饰符 --&gt;&lt;form v-on:submit.prevent&gt;&lt;/form&gt;&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;&lt;a v-on:click.once=&quot;doThis&quot;&gt;&lt;/a&gt; 按键修饰符Vue 允许为 v-on 在监听键盘事件时添加按键修饰符12&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;&lt;input v-on:keyup.13=&quot;submit&quot;&gt; 记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：1234&lt;!-- 同上 --&gt;&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;&lt;!-- 缩写语法 --&gt;&lt;input @keyup.enter=&quot;submit&quot;&gt; 全部的按键别名：.enter.tab.delete (捕获 “删除” 和 “退格” 键).esc.space.up.down.left.right.ctrl.alt.shift.meta 总结：v-on就像是onclick一样，可以在DOM元素的属性里给DOM添加方法，当然一个DOM对应一个vue实例，对应的function得是vue实例里的。 12Vue.js 表单 你可以用 v-model 指令在表单控件元素上创建双向数据绑定。v-model 会根据控件类型自动选取正确的方法来更新元素。12&lt;input v-model=&quot;message&quot; placeholder=&quot;单行文本输入……&quot;&gt;&lt;textarea v-model=&quot;message2&quot; placeholder=&quot;多行文本输入……&quot;&gt;&lt;/textarea&gt; 复选框复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组12345678910111213141516171819202122232425&lt;div id=&quot;app&quot;&gt; &lt;p&gt;单个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt; &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt; &lt;p&gt;多个复选框：&lt;/p&gt; &lt;input type=&quot;checkbox&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt; &lt;label for=&quot;taobao&quot;&gt;taobao&lt;/label&gt; &lt;br&gt; &lt;span&gt;选择的值为: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; checked : false, checkedNames: [] &#125;&#125;)&lt;/script&gt; 单选框123456789101112131415161718&lt;div id=&quot;app&quot;&gt; &lt;input type=&quot;radio&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;radio&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;picked&quot;&gt; &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt; &lt;br&gt; &lt;span&gt;选中值为: &#123;&#123; picked &#125;&#125;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; picked : &apos;Runoob&apos; &#125;&#125;)&lt;/script&gt; 演示了单选按钮的双向数据绑定 select 列表1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;select v-model=&quot;selected&quot; name=&quot;fruit&quot;&gt; &lt;option value=&quot;&quot;&gt;选择一个网站&lt;/option&gt; &lt;option value=&quot;www.runoob.com&quot;&gt;Runoob&lt;/option&gt; &lt;option value=&quot;www.google.com&quot;&gt;Google&lt;/option&gt; &lt;/select&gt; &lt;div id=&quot;output&quot;&gt; 选择的网站是: &#123;&#123;selected&#125;&#125; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; selected: &apos;&apos; &#125;&#125;)&lt;/script&gt; v-model会获取元素的value属性修饰符.lazy在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步.number如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值.trim如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入12&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;&lt;input v-model.lazy=&quot;msg&quot; &gt; 总结：感觉更像是介绍了v-model，动态根据元素来改变vue实例里的元素，从而连带改变（重新渲染）html页面 13Vue.js 组件 组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。几乎任意类型的应用的界面都可以抽象为一个组件树注册一个全局组件语法格式如下：1Vue.component(tagName, options) tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：1&lt;tagName&gt;&lt;/tagName&gt; 全局组件所有实例都能用全局组件。1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt;&lt;/div&gt;&lt;script&gt;// 注册Vue.component(&apos;runoob&apos;, &#123; template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 局部组件我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：123456789101112131415161718&lt;div id=&quot;app&quot;&gt; &lt;runoob&gt;&lt;/runoob&gt;&lt;/div&gt;&lt;script&gt;var Child = &#123; template: &apos;&lt;h1&gt;自定义组件!&lt;/h1&gt;&apos;&#125;// 创建根实例new Vue(&#123; el: &apos;#app&apos;, components: &#123; // &lt;runoob&gt; 将只在父模板可用 &apos;runoob&apos;: Child &#125;&#125;)&lt;/script&gt; Propprop 是父组件用来传递数据的一个自定义属性。父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”：123456789101112131415161718192021222324&lt;div id=&quot;app&quot;&gt; &lt;div&gt; &lt;input v-model=&quot;parentMsg&quot;&gt; &lt;br&gt; &lt;child v-bind:message=&quot;parentMsg&quot;&gt;&lt;/child&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;// 注册Vue.component(&apos;child&apos;, &#123; // 声明 props props: [&apos;message&apos;], // 同样也可以在 vm 实例中像 &quot;this.message&quot; 这样使用 template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;&#125;)// 创建根实例new Vue(&#123; el: &apos;#app&apos;, data: &#123; parentMsg: &apos;父组件内容&apos; &#125;&#125;)&lt;/script&gt; 注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。Prop 验证组件可以为 props 指定验证要求。prop 是一个对象而不是字符串数组时，它包含验证要求：12345678910111213141516171819202122232425262728293031Vue.component(&apos;example&apos;, &#123; props: &#123; // 基础类型检测 （`null` 意思是任何类型都可以） propA: Number, // 多种类型 propB: [String, Number], // 必传且是字符串 propC: &#123; type: String, required: true &#125;, // 数字，有默认值 propD: &#123; type: Number, default: 100 &#125;, // 数组／对象的默认值应当由一个工厂函数返回 propE: &#123; type: Object, default: function () &#123; return &#123; message: &apos;hello&apos; &#125; &#125; &#125;, // 自定义验证函数 propF: &#123; validator: function (value) &#123; return value &gt; 10 &#125; &#125; &#125;&#125;) type 可以是下面原生构造器：StringNumberBooleanFunctionObjectArraytype 也可以是一个自定义构造器，使用 instanceof 检测。 自定义事件父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！ 我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即： 使用 $on(eventName) 监听事件使用 $emit(eventName) 触发事件另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。 以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。1234567891011121314151617181920212223242526272829303132333435&lt;div id=&quot;app&quot;&gt; &lt;div id=&quot;counter-event-example&quot;&gt; &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt; &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt; &lt;button-counter v-on:increment=&quot;incrementTotal&quot;&gt;&lt;/button-counter&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;Vue.component(&apos;button-counter&apos;, &#123; template: &apos;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&apos;, data: function () &#123; return &#123; counter: 0 &#125; &#125;, methods: &#123; incrementHandler: function () &#123; this.counter += 1 this.$emit(&apos;increment&apos;) &#125; &#125;,&#125;)new Vue(&#123; el: &apos;#counter-event-example&apos;, data: &#123; total: 0 &#125;, methods: &#123; incrementTotal: function () &#123; this.total += 1 &#125; &#125;&#125;)&lt;/script&gt; 如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 总结：Vue.js组件我个人感觉就像是把一些写好的标签封装起来，组件的应该就是标签的意思，vue组件内部可以自己产生变量，但是父组件传递变量进去需要prop声明，组件也可以通过自定义方法来把变量传回父组件，至于native修饰符，我太明白。引用dalao的话：意思就是当你给一个vue组件绑定事件时候，要加上native！如果是普通的html元素！就不需要。感觉native就是把组件变回原生DOM的一种方式，不知这样说对不对。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（二）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_2_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[6Vue.js 条件语句 条件判断v-if根据表达式的值(true 或 false )来决定是否插入对应的元素。v-else可以用 v-else 指令给 v-if 添加一个 “else” 块1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;Math.random() &gt; 0.5&quot;&gt; Sorry &lt;/div&gt; &lt;div v-else&gt; Not sorry &lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;&#125;)&lt;/script&gt; 这里在v-if里写了js的随机数（0-1），如果大于0.5为true，显示Sorry，如果小于0.5为false，显示not sorry。v-else-ifv-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;div v-if=&quot;type === &apos;A&apos;&quot;&gt; A &lt;/div&gt; &lt;div v-else-if=&quot;type === &apos;B&apos;&quot;&gt; B &lt;/div&gt; &lt;div v-else-if=&quot;type === &apos;C&apos;&quot;&gt; C &lt;/div&gt; &lt;div v-else&gt; Not A/B/C &lt;/div&gt;&lt;/div&gt; v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。v-show我们也可以使用 v-show 指令来根据条件展示元素用法和单独用v-if类似 总结：v-if，v-esle和v-if-else用法和js类似 7Vue.js 循环语句 v-forv-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。v-for 可以绑定数据到数组来渲染一个列表：1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;ol&gt; &lt;li v-for=&quot;site in sites&quot;&gt; &#123;&#123; site.name &#125;&#125; &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; sites: [ &#123; name: &apos;Runoob&apos; &#125;, &#123; name: &apos;Google&apos; &#125;, &#123; name: &apos;Taobao&apos; &#125; ] &#125;&#125;)&lt;/script&gt; site可以自己命名，sites是实例的一组数组v-for 迭代对象v-for 可以通过一个对象的属性来迭代数据123&lt;li v-for=&quot;value in object&quot;&gt; &#123;&#123; value &#125;&#125;&lt;/li&gt; object为对象，value为对象的属性内容（可以自己命名）也可以提供第二个的参数为键名123&lt;li v-for=&quot;(value, key) in object&quot;&gt; &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;&lt;/li&gt; 键名就是对象属性名，这里key为属性名，value为属性内容还可以提供第三个参数为索引123&lt;li v-for=&quot;(value, key, index) in object&quot;&gt; &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;&lt;/li&gt; 简单的说索引就1234…，给每个属性都加一个（差不多是这样吧emm…）v-for 迭代整数123&lt;li v-for=&quot;n in 10&quot;&gt; &#123;&#123; n &#125;&#125;&lt;/li&gt; 会依次显示1-10 总结：v-for应该就跟for（x in y）一个用法吧 8Vue.js 计算属性 计算属性关键词: computed。计算属性在处理一些复杂逻辑时是很有用的。1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;p&gt;原始字符串: &#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;p&gt;计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var vm = new Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;Runoob!&apos; &#125;, computed: &#123; // 计算属性的 getter reversedMessage: function () &#123; // `this` 指向 vm 实例 return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;)&lt;/script&gt; 这里声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。我们可以使用 methods（函数） 来替代 computed（计算属性），效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。12345methods: &#123; reversedMessage2: function () &#123; return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125; 可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。 computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter1234567891011121314151617181920212223242526272829&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123; site &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var vm = new Vue(&#123; el: &apos;#app&apos;, data: &#123; name: &apos;Google&apos;, url: &apos;http://www.google.com&apos; &#125;, computed: &#123; site: &#123; // getter get: function () &#123; return this.name + &apos; &apos; + this.url &#125;, // setter set: function (newValue) &#123; var names = newValue.split(&apos; &apos;) this.name = names[0] this.url = names[names.length - 1] &#125; &#125; &#125;&#125;)// 调用 setter， vm.name 和 vm.url 也会被对应更新vm.site = &apos;xxxx http://www.runoob.com&apos;; 从实例运行结果看在运行 vm.site = ‘xxxx http://www.runoob.com&#39;; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新。 总结：computed（计算属性）看起来和使用起来都和methods（函数）一样，区别应该就是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。 9Vue.js 监听属性 watch我们可以通过 watch 来响应数据的变化123456789101112131415161718192021222324252627282930313233&lt;div id = &quot;computed_props&quot;&gt; 千米 : &lt;input type = &quot;text&quot; v-model = &quot;kilometers&quot;&gt; 米 : &lt;input type = &quot;text&quot; v-model = &quot;meters&quot;&gt;&lt;/div&gt;&lt;p id=&quot;info&quot;&gt;&lt;/p&gt;&lt;script type = &quot;text/javascript&quot;&gt; var vm = new Vue(&#123; el: &apos;#computed_props&apos;, data: &#123; kilometers : 0, meters:0 &#125;, methods: &#123; &#125;, computed :&#123; &#125;, watch : &#123; kilometers:function(val) &#123; this.kilometers = val; this.meters = val * 1000; &#125;, meters : function (val) &#123; this.kilometers = val/ 1000; this.meters = val; &#125; &#125; &#125;); // $watch 是一个实例方法 vm.$watch(&apos;kilometers&apos;, function (newValue, oldValue) &#123; // 这个回调将在 vm.kilometers 改变后调用 document.getElementById (&quot;info&quot;).innerHTML = &quot;修改前值为: &quot; + oldValue + &quot;，修改后值为: &quot; + newValue;&#125;)&lt;/script&gt; watch 对象创建了两个方法 kilometers 和 meters。当我们再输入框输入数据时，watch 会实时监听数据变化并改变自身的值。 总结：watch对象创建的函数名对应data里的属性名，改属性发生变化时调用watch里对应的函数 10Vue.js 样式绑定 class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数class 属性绑定1&lt;div v-bind:class=&quot;&#123; active: isActive &#125;&quot;&gt;&lt;/div&gt; isActive为true时，调用class=”active”，为false时，不调用我们也可以在对象中传入更多属性用来动态切换多个 class 。123&lt;div class=&quot;static&quot; v-bind:class=&quot;&#123; active: isActive, &apos;text-danger&apos;: hasError &#125;&quot;&gt;&lt;/div&gt; 我们也可以直接绑定数据里的一个对象12345678910111213141516171819202122232425262728&lt;style&gt;.active &#123; width: 100px; height: 100px; background: green;&#125;.text-danger &#123; background: red;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:class=&quot;classObject&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; classObject: &#123; active: true, &apos;text-danger&apos;: true &#125; &#125;&#125;)&lt;/script&gt;&lt;/body&gt; 此外，我们也可以在这里绑定返回对象的计算属性123456789101112131415new Vue(&#123; el: &apos;#app&apos;, data: &#123; isActive: true, error: null &#125;, computed: &#123; classObject: function () &#123; return &#123; active: this.isActive &amp;&amp; !this.error, &apos;text-danger&apos;: this.error &amp;&amp; this.error.type === &apos;fatal&apos;, &#125; &#125; &#125;&#125;) 数组语法我们可以把一个数组传给 v-bind:class123456789101112&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; activeClass: &apos;active&apos;, errorClass: &apos;text-danger&apos; &#125;&#125;)&lt;/script&gt; 我们还可以使用三元表达式来切换列表中的 class1&lt;div v-bind:class=&quot;[errorClass ,isActive ? activeClass : &apos;&apos;]&quot;&gt;&lt;/div&gt; Vue.js style(内联样式)我们可以在 v-bind:style 直接设置样式123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize + &apos;px&apos; &#125;&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; 也可以直接绑定到一个样式对象，让模板更清晰123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;styleObject&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; v-bind:style 可以使用数组将多个样式对象应用到一个元素上123&lt;div id=&quot;app&quot;&gt; &lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;菜鸟教程&lt;/div&gt;&lt;/div&gt; 注意：当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。 总结：v-bind提供很多种添加class或style的方法，我也不能一下一一全部记住，总而言之就是可以响应式的添加样式，改变个别样式可以使用style。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js 学习（一）]]></title>
    <url>%2F2018%2F04%2F19%2F2018_4_19_1_Vue.js%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1Vue.js 安装 1.本地安装在 Vue.js 的官网上直接下载 vue.min.js 并用 script 标签引入。2.CDN 方法unpkg：https://unpkg.com/vue/dist/vue.js, 会保持和 npm 发布的最新的版本一致。cdnjs : https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js3.NPM 方法123456789# 查看版本$ npm -v2.3.0#升级 npmcnpm install npm -g# 最新稳定版$ cnpm install vue 在用 Vue.js 构建大型应用时推荐使用 NPM 安装 总结：npm方法不太明白什么意思，但是至少可以像JQuery一样可以本地导入或网页导入 2命令行工具 Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。123456789101112131415161718192021222324252627# 全局安装 vue-cli$ cnpm install --global vue-cli# 创建一个基于 webpack 模板的新项目$ vue init webpack my-project# 这里需要进行一些配置，默认回车即可This will install Vue 2.x version of the template.For Vue 1.x use: vue init webpack#1.0 my-project? Project name my-project? Project description A Vue.js project? Author runoob &lt;test@runoob.com&gt;? Vue build standalone? Use ESLint to lint your code? Yes? Pick an ESLint preset Standard? Setup unit tests with Karma + Mocha? Yes? Setup e2e tests with Nightwatch? Yes vue-cli · Generated &quot;my-project&quot;. To get started: cd my-project npm install npm run dev Documentation can be found at https://vuejs-templates.github.io/webpack 进入项目，安装并运行：123456$ cd my-project$ cnpm install$ cnpm run dev DONE Compiled successfully in 4388ms&gt; Listening at http://localhost:8080 成功执行以上命令后访问 http://localhost:8080/，可以看见搭建的网页 注意：Vue.js 不支持 IE8 及其以下 IE 版本。 总结：暂时用不到吧，而且也不知道有那些命令 3Vue.js 目录结构 目录/文件 说明 build 项目构建(webpack)相关代码 config 配置目录，包括端口号等。我们初学可以使用默认的。 node_modules npm 加载的项目依赖模块 src 这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：assets: 放置一些图片，如logo等。components: 目录里面放了一个组件文件，可以不用。App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。main.js: 项目的核心文件。 static 静态资源目录，如图片、字体等。 test 初始测试目录，可删除 .xxxx文件 这些是一些配置文件，包括语法配置，git配置等。 index.html 首页入口文件，你可以添加一些 meta 信息或统计代码啥的。 package.json 项目配置文件。 README.md 项目的说明文档，markdown 格式 总结：emmm…，不知道说什么好 4Vue.js 起步 每个 Vue 应用都需要通过实例化 Vue 来实现12345678910111213var vm = new Vue(&#123; el: &apos;#vue_det&apos;, data: &#123; data1:&quot;1&quot;, data2:&quot;2&quot;, data3:&quot;3&quot; &#125;, methods: &#123; function1: function() &#123; return data1; &#125; &#125; &#125;) Vue实例的el对应DOM的iddata用于定义属性methods用于定义的函数，可以通过 return 来返回函数值&#123;&#123; &#125;&#125;用于输出对象属性和函数返回值（用于DOM内）123&lt;div id=&quot;vue_det&quot;&gt; &lt;p&gt;&#123;&#123;data1&#125;&#125;&lt;/p&gt;&lt;/div&gt; 当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。 总结：个人觉得就像是创建了一个object实例，然后提供了&#123;&#123; &#125;&#125;方法在DOM里直接显示出数据，并且可以时时改动，挺好理解的。 5Vue.js 模板语法 插值1.数据绑定最常见的形式就是使用&#123;&#123; &#125;&#125;的文本插值2.使用 v-html 指令用于输出 html 代码1234567891011121314&lt;div id=&quot;app&quot;&gt; &lt;h1&gt;&#123;&#123;message1&#125;&#125;&lt;/h1&gt; &lt;div v-html=&quot;message2&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; message1: &apos;文本插值&apos; message2: &apos;&lt;h1&gt;HTML插值&lt;/h1&gt;&apos; &#125;&#125;)&lt;/script&gt; 属性HTML 属性中的值应使用 v-bind 指令以下实例判断 class2 的值，如果为 true 使用 class1 类的样式，否则不使用该类：1&lt;div v-bind:class=&quot;&#123;&apos;class1&apos;: class2&#125;&quot;&gt; 表达式Vue.js 都提供了完全的 JavaScript 表达式支持。在&#123;&#123; &#125;&#125;里或v-bind:class=””里使用js表达式都没有问题，比如123456789101112&lt;div id=&quot;app&quot;&gt;&#123;&#123;5+5&#125;&#125;&lt;br&gt;&#123;&#123; ok ? &apos;YES&apos; : &apos;NO&apos; &#125;&#125;&lt;br&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: &apos;#app&apos;, data: &#123; ok: true, &#125;&#125;)&lt;/script&gt; 指令指令是带有 v- 前缀的特殊属性指令用于在表达式的值改变时，将某些行为应用到 DOM 上1&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; 这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素 参数参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性1&lt;a v-bind:href=&quot;url&quot;&gt;超链接&lt;/a&gt; href就是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定另一个例子是 v-on 指令，它用于监听 DOM 事件：1&lt;a v-on:click=&quot;function&quot;&gt; 修饰符修饰符是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()1&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt; 用户输入在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定12&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;&lt;input v-model=&quot;message&quot;&gt; 这里input通过v-model改变了message的值，同时也反应到了p上 过滤器Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”（|）指示1&#123;&#123; message | function &#125;&#125; 过滤器函数接受表达式的值作为第一个参数。function为函数，message为参数传入function内过滤器可以串联：1&#123;&#123; message | filterA | filterB &#125;&#125; 过滤器是 JavaScript 函数，因此可以接受参数：1&#123;&#123; message | filterA(&apos;arg1&apos;, arg2) &#125;&#125; 这里，message 是第一个参数，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。 缩写Vue.js 为两个最为常用的指令提供了特别的缩写v-bind和v-on12345678&lt;!-- 完整语法 --&gt;&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 完整语法 --&gt;&lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt; 总结：Vue.js模板语法还挺多的，我个人感觉更像是把js响应式的写进了DOM里，更加直观一些，语法谁然多，但是都不是很难。]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义网页右键菜单（补充）]]></title>
    <url>%2F2018%2F04%2F18%2F2018_4_18_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%EF%BC%88%E8%A1%A5%E5%85%85%EF%BC%89%20%2F</url>
    <content type="text"><![CDATA[鼠标事件 button值 备注 click 0 单击鼠标左键 click 1 单击鼠标中键 mousedown 0 按下鼠标左键 mousedown 1 按下鼠标中键 mousedown 2 按下鼠标右键]]></content>
      <tags>
        <tag>鼠标点击事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CSS实现折叠面板]]></title>
    <url>%2F2018%2F04%2F18%2F2018_4_18_1_%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[效果：使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板，要求样式一致。 要使用到的是 radio，label，伪类，兄弟相邻选择器 radio：单选框 label：文本框 伪类：:checked —选中时添加的类兄弟相邻选择器：li+li {…} 我的思路：1创建区域section2在section中建立3个radio，css设置radio的样式：dispaly:none3再创建3个label，绑定对应的radio4在label里写上标题，然后在里面创建div标签，再建立p标签，写入对应的内容5最后在css里给给div绑定对应的css3动画到这里为止差不多就成型了 我遇到的问题：1radio没有单选框效果产生的原因：没有给3个radio给定相同的name属性解决办法：123&lt;input type="radio" id="one" name="cascade" /&gt;&lt;input type="radio" id="two" name="cascade" /&gt;&lt;input type="radio" id="three" name="cascade" /&gt; 2绑定的动画没有动画的过度效果产生原因：高度再没有具体数值时，不会产生动画解决办法：给高度一个固定数值1height: 250px; 建议div高度和section宽度，不要使用百分比，以免出现显示不全或空白太多的情况 3绑定动画后，刷新页面会产生折叠动画产生的原因：我给div绑定了折叠动画，因为不绑定会再失去checked时直接消失，但是绑定了折叠动画会在开始时就先播放动画。解决办法：建议使用css3的过滤1transition: height 1s linear; 过滤只在对应属性改变时才会产生动画。 4折叠框没办法全部折叠产生的原因：radio选择后必须有一个选中解决办法：使用js改变radio只能有一个被选中的情况（还是用到了js…，我感觉还不如用js让多选框只能单选来的简单）1234567891011121314151617代码部分还不会，所以借鉴别人的 document.body.onmousedown = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; target.previousValue = target.checked; &#125; &#125; document.body.onclick = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; if (target.previousValue) &#123; target.checked = false; &#125; &#125; &#125; 但只对点击radio有效。。。 最后贴出我的代码： index.html （html文件）1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;section&gt; &lt;input type="radio" id="one" name="cascade" /&gt; &lt;label for="one"&gt;Collapsible Group Item #1 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;input type="radio" id="two" name="cascade" /&gt; &lt;label for="two"&gt;Collapsible Group Item #2 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;input type="radio" id="three" name="cascade" /&gt; &lt;label for="three"&gt;Collapsible Group Item #3 &lt;div&gt;&lt;p&gt;Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single- origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS. &lt;/p&gt;&lt;/div&gt; &lt;/label&gt; &lt;/section&gt; &lt;script src="js/myjs.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css文件）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849*&#123; margin: 0; padding: 0; &#125; body,html&#123; width: 100%; height: 100%; &#125; /*折叠框局域*/ section&#123; width: 500px; margin: auto; margin-top: 20px; border: 1px solid #ddd; border-radius: 4px; &#125; /*设置单选框不可见*/ input[type="radio"] &#123; display: none; &#125; label&#123; display: block; border: 1px solid #ddd; border-radius: 4px; margin: 10px; padding: 10px; background-color: #f5f5f5; overflow: hidden; &#125; div&#123; font-size: 15px; overflow: hidden; height: 0; padding: 0; display: block; margin: -12px; margin-top: 10px; background-color: #fff; border: 1px solid #ddd; border-radius: 0px 0px 4px 4px; transition: height 1s linear; &#125; p&#123; margin: 10px; &#125; /*单选宽选中时改变高度*/ input[type="radio"]:checked+label div&#123; height: 250px; &#125; myjs.js（javascript文件）12345678910111213141516document.body.onmousedown = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; target.previousValue = target.checked; &#125;&#125;document.body.onclick = function (event) &#123; event = event || window.event; var target = event.target || event.srcElement; if (target.type === 'radio') &#123; if (target.previousValue) &#123; target.checked = false; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义网页右键菜单]]></title>
    <url>%2F2018%2F04%2F17%2F2018_4_17_2_%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[效果：在特定区域点击鼠标右键，弹出自定义菜单。 要使用到的是 contextmenu 事件 contextmenu效果：初始右键效果 我的思路：1创建区域div2js重新定义右键效果3重定义右键效果为创建一个ul里面是多个li，li里写入菜单文字4创建的ul需要定位在鼠标当前位置5然后创建完ul后给各个li绑定click事件到这里为止差不多就成型了 需要解决的问题：1得创建一个消除ul的方法不然会一直创建ul，那么什么时候应该消除ul，在区域中点击左键或中键，点击右键先的消除ul再重新创建ul，点击ul内部的li，先产生效果再消除ul2创建的ul消除后click事件消失应该在创建ul的时候就绑定事件，如果在ul消失后绑定事件会报错 我遇到的问题：1创建区域时，使用百分比的高度，没效果产生的原因：没有给body和html定义高度，区域的高度百分比继承于body，body继承于html解决办法：1234html,body&#123; width: 100%; height: 100%;&#125; 2给li绑定事件不生效产生的原因：我是通过给产生的li添加属性index值来判断是哪个菜单的，然后获取到li的index值来绑定对应的事件，但是通过 getAttribute() 方法获取的index值默认为字符串，然后使用 if(index == number) 时，判断不相同。解决办法：12let index_0 = li_0.getAttribute("index");index_0 = index_0 - 0; 使用 - 0，可以快速转变为数字类型（算是小及技巧吧！！！） 最后贴出我的代码： index.html （html文件）1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" type="text/css" href="css/mycss.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="area"&gt; &lt;p&gt;在区域中点击右键查看菜单&lt;/p&gt; &lt;/div&gt; &lt;script src="js/myjs.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; mycss.css（css文件）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657*&#123; margin: 0; padding: 0;&#125;html,body&#123; width: 100%; height: 100%;&#125;#area&#123; width: 50%; height: 50%; margin: auto; margin-top: 100px; background-color: #fff; border: 1px solid #000;&#125;ul&#123; overflow: hidden; position: absolute; list-style-type: none; /*border: 1px solid #000;*/ border-radius: 10px; box-shadow: 0px 0px 5px #000; background-color: #fff; width: 150px;&#125;li&#123; /*margin-left: 10px; margin-right: 10px;*/ padding-top: 5px; padding-bottom: 5px; padding-left: 10px; background-color: #fff; border-bottom: 1px solid #eee; /*cursor: pointer;*/&#125;li&#123; -moz-user-select:none;/*火狐*/ -webkit-user-select:none;/*webkit浏览器*/ -ms-user-select:none;/*IE10*/ -khtml-user-select:none;/*早期浏览器*/ user-select:none;&#125;/*文字不可选中*/.last&#123; border: none;&#125;.box&#123; border: 1px solid #eee; width: 100px; height: 100px; position: absolute; top: 0; left: 0;&#125;.on&#123; background-color: #999;&#125; myjs.js（javascript文件）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163let area = document.getElementById("area");//点击区域let client_x;//鼠标当前的x坐标let client_y;//鼠标当前的y坐标let index = 0;//判断是否有菜单，有为1，无为0let index_1 = 0;//判断菜单1是否已点击，点击为1.未点击为0let index_2 = 0;//判断菜单2是否已点击，点击为1.未点击为0let index_3 = 0;//判断菜单3是否已点击，点击为1.未点击为0//给区域绑定contextmenu事件，重新定义右键效果area.addEventListener("contextmenu",function(e)&#123; if(window.event)&#123; e = window.event; &#125; e.preventDefault(); //阻止原有的菜单 e.returnValue = false; //在IE中阻止原有的菜单 e.stopPropagation(); //判断是否已经有菜单 if(index == 0)&#123; determine(); addlist(); &#125; else&#123; cleanlist(); determine(); addlist(); &#125;&#125;,false);//给区域绑定左键和中键效果，消除菜单area.addEventListener("mousedown",function(e)&#123; if(e.button == 1||e.button == 0)&#123; cleanlist(); &#125;&#125;,false);//获取鼠标当前的xy坐标function determine(e)&#123; e = event || window.event; client_x = e.clientX; client_y = e.clientY;&#125;//产生菜单function addlist()&#123; let ul_0 = document.createElement("ul"); ul_0.setAttribute("id","meau"); for(let i = 0; i &lt; 3; i++)&#123; (function(i)&#123; let li_0 = document.createElement("li"); li_0.setAttribute("index",i); if(i == 2)&#123; li_0.setAttribute("class","last"); &#125; switch(i)&#123; case 0: if(index_1 == 1)&#123; li_0.setAttribute("class","on"); &#125; li_0.innerHTML = "背景变红"; break; case 1: if(index_2 == 1)&#123; li_0.setAttribute("class","on"); &#125; li_0.innerHTML = "字体变大" break; case 2: if(index_3 == 1)&#123; li_0.className += " on"; &#125; li_0.innerHTML = "边框变粗" break; &#125; ul_0.appendChild(li_0); &#125;)(i); &#125; ul_0.style.left = client_x+"px"; ul_0.style.top = client_y+"px"; document.body.appendChild(ul_0); addfunction(ul_0); index = 1;&#125;//清除菜单function cleanlist()&#123; if(index == 0)&#123; return; &#125; let box = document.getElementById("meau"); document.body.removeChild(box); index = 0;&#125;//给产生的菜单添加事件function addfunction(ul_0)&#123; for(let i = 0; i &lt; 3; i++)&#123; (function(i)&#123; let li_0 = ul_0.getElementsByTagName("li")[i]; let index_0 = li_0.getAttribute("index"); index_0 = index_0 - 0; switch(index_0)&#123; case 0: addfunction_0(li_0); break; case 1: addfunction_1(li_0); break; case 2: addfunction_2(li_0); break; &#125; &#125;)(i); &#125;&#125;//给菜单1绑定事件function addfunction_0(li_0)&#123; li_0.addEventListener("click",function(e)&#123; e.stopPropagation(); if(index_1 == 0)&#123; area.style.backgroundColor = "red"; cleanlist(); index_1 = 1; &#125; else&#123; area.style.backgroundColor = "#fff"; cleanlist(); index_1 = 0; &#125; &#125;,false);&#125;//给菜单2绑定事件function addfunction_1(li_0)&#123; li_0.addEventListener("click",function()&#123; if(index_2 == 0)&#123; area.style.fontSize = "32px"; cleanlist(); index_2 = 1; &#125; else&#123; area.style.fontSize = "16px"; cleanlist(); index_2 = 0; &#125; &#125;,false);&#125;//给菜单3绑定事件function addfunction_2(li_0)&#123; li_0.addEventListener("click",function()&#123; if(index_3 == 0)&#123; area.style.border = "5px solid #000"; cleanlist(); index_3 = 1; &#125; else&#123; area.style.border = "1px solid #000"; cleanlist(); index_3 = 0; &#125; &#125;,false);&#125;]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F04%2F17%2F2018_4_17_1_%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2_%E5%A6%82%E4%BD%95%E7%94%A8github%20page%2Bhexo%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[emmm…,这是我的第一篇博客，不知道该写什么，就记录一下自己怎么跟着大佬的步伐使用github和hexo搭建个人博客好了。 要使用到的是github,node.js,hexo 我的博客搭建在 GitHub Pages上 GitHub Pages本用于介绍托管在GitHub的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。 1安装git node.js直接next选择安装目录即可 2配置node.js环境变量在环境变量里的path下添加node.js的安装目录即可 3安装hexo打开cmd,进入node.js安装目录下,利用 npm 命令即可安装1npm install -g hexo 以上是安装必要的组件,然后可以开始搭建个人博客 4搭建个人博客依旧在cmd的node.js目录下输入 1mkdir blog &amp;&amp; cd blog bolg是你的博客目录,可以自行更改,记得备份好文件,以免丢失1hexo init 安装依赖包1npm install 至此,博客搭建成功! 当然,仅仅是本地的了。此时执行1hexo g 即可生成静态页面，然后执行1hexo s 访问 http://localhost:4000 即可看到你的博客。 5部署博客到github注册github账号,并登录 创建仓库 注：Github Pages的Repository名字是特定的，比如我Github账号是FrattiNor，那么我Github Pages Repository的名字就是FrattiNor.github.io。 设置github pages 选择主题并发布即可 然后复制你github page的https链接进入的bolg文件夹下修改_config.yml文件修改底部的repository为刚刚复制的链接如下 deploy:type: gitrepository: https://github.com/FrattiNor/FrattiNor.github.io.gitbranch: master 最后回到cmd执行12npm install hexo-deployer-git --save （这命令是为了解决hexo新版本的部署问题） 12hexo g （这是重新生成blog） 12hexo d（这是将本地blog部署到github的仓库） 试试在浏览器的地址栏输入：“https://你的用户名.github.io/” 这样个人博客就搭建完成了，然后就可以修改主题和发布博文了 主题在这里 https://github.com/hexojs/hexo/wiki/Themes博文使用makedown编写]]></content>
      <tags>
        <tag>第一</tag>
        <tag>如何搭建个人博客</tag>
      </tags>
  </entry>
</search>
